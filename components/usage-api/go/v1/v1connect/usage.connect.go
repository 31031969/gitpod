// Copyright (c) 2023 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: usage/v1/usage.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gitpod-io/gitpod/usage-api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UsageServiceName is the fully-qualified name of the UsageService service.
	UsageServiceName = "usage.v1.UsageService"
)

// UsageServiceClient is a client for the usage.v1.UsageService service.
type UsageServiceClient interface {
	// GetCostCenter retrieves the active cost center for the given attributionID
	GetCostCenter(context.Context, *connect_go.Request[v1.GetCostCenterRequest]) (*connect_go.Response[v1.GetCostCenterResponse], error)
	// SetCostCenter stores the given cost center
	SetCostCenter(context.Context, *connect_go.Request[v1.SetCostCenterRequest]) (*connect_go.Response[v1.SetCostCenterResponse], error)
	// Triggers reconciliation of usage.
	ReconcileUsage(context.Context, *connect_go.Request[v1.ReconcileUsageRequest]) (*connect_go.Response[v1.ReconcileUsageResponse], error)
	// ResetUsage resets Usage for CostCenters which have expired or will explire shortly
	ResetUsage(context.Context, *connect_go.Request[v1.ResetUsageRequest]) (*connect_go.Response[v1.ResetUsageResponse], error)
	// ListUsage retrieves all usage for the specified attributionId and theb given time range
	ListUsage(context.Context, *connect_go.Request[v1.ListUsageRequest]) (*connect_go.Response[v1.ListUsageResponse], error)
	// GetBalance returns the current credits balance for the given attributionId
	GetBalance(context.Context, *connect_go.Request[v1.GetBalanceRequest]) (*connect_go.Response[v1.GetBalanceResponse], error)
	// AddUsageCreditNote adds a usage credit note to the given cost center with the effective date of now
	AddUsageCreditNote(context.Context, *connect_go.Request[v1.AddUsageCreditNoteRequest]) (*connect_go.Response[v1.AddUsageCreditNoteResponse], error)
}

// NewUsageServiceClient constructs a client for the usage.v1.UsageService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUsageServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UsageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &usageServiceClient{
		getCostCenter: connect_go.NewClient[v1.GetCostCenterRequest, v1.GetCostCenterResponse](
			httpClient,
			baseURL+"/usage.v1.UsageService/GetCostCenter",
			opts...,
		),
		setCostCenter: connect_go.NewClient[v1.SetCostCenterRequest, v1.SetCostCenterResponse](
			httpClient,
			baseURL+"/usage.v1.UsageService/SetCostCenter",
			opts...,
		),
		reconcileUsage: connect_go.NewClient[v1.ReconcileUsageRequest, v1.ReconcileUsageResponse](
			httpClient,
			baseURL+"/usage.v1.UsageService/ReconcileUsage",
			opts...,
		),
		resetUsage: connect_go.NewClient[v1.ResetUsageRequest, v1.ResetUsageResponse](
			httpClient,
			baseURL+"/usage.v1.UsageService/ResetUsage",
			opts...,
		),
		listUsage: connect_go.NewClient[v1.ListUsageRequest, v1.ListUsageResponse](
			httpClient,
			baseURL+"/usage.v1.UsageService/ListUsage",
			opts...,
		),
		getBalance: connect_go.NewClient[v1.GetBalanceRequest, v1.GetBalanceResponse](
			httpClient,
			baseURL+"/usage.v1.UsageService/GetBalance",
			opts...,
		),
		addUsageCreditNote: connect_go.NewClient[v1.AddUsageCreditNoteRequest, v1.AddUsageCreditNoteResponse](
			httpClient,
			baseURL+"/usage.v1.UsageService/AddUsageCreditNote",
			opts...,
		),
	}
}

// usageServiceClient implements UsageServiceClient.
type usageServiceClient struct {
	getCostCenter      *connect_go.Client[v1.GetCostCenterRequest, v1.GetCostCenterResponse]
	setCostCenter      *connect_go.Client[v1.SetCostCenterRequest, v1.SetCostCenterResponse]
	reconcileUsage     *connect_go.Client[v1.ReconcileUsageRequest, v1.ReconcileUsageResponse]
	resetUsage         *connect_go.Client[v1.ResetUsageRequest, v1.ResetUsageResponse]
	listUsage          *connect_go.Client[v1.ListUsageRequest, v1.ListUsageResponse]
	getBalance         *connect_go.Client[v1.GetBalanceRequest, v1.GetBalanceResponse]
	addUsageCreditNote *connect_go.Client[v1.AddUsageCreditNoteRequest, v1.AddUsageCreditNoteResponse]
}

// GetCostCenter calls usage.v1.UsageService.GetCostCenter.
func (c *usageServiceClient) GetCostCenter(ctx context.Context, req *connect_go.Request[v1.GetCostCenterRequest]) (*connect_go.Response[v1.GetCostCenterResponse], error) {
	return c.getCostCenter.CallUnary(ctx, req)
}

// SetCostCenter calls usage.v1.UsageService.SetCostCenter.
func (c *usageServiceClient) SetCostCenter(ctx context.Context, req *connect_go.Request[v1.SetCostCenterRequest]) (*connect_go.Response[v1.SetCostCenterResponse], error) {
	return c.setCostCenter.CallUnary(ctx, req)
}

// ReconcileUsage calls usage.v1.UsageService.ReconcileUsage.
func (c *usageServiceClient) ReconcileUsage(ctx context.Context, req *connect_go.Request[v1.ReconcileUsageRequest]) (*connect_go.Response[v1.ReconcileUsageResponse], error) {
	return c.reconcileUsage.CallUnary(ctx, req)
}

// ResetUsage calls usage.v1.UsageService.ResetUsage.
func (c *usageServiceClient) ResetUsage(ctx context.Context, req *connect_go.Request[v1.ResetUsageRequest]) (*connect_go.Response[v1.ResetUsageResponse], error) {
	return c.resetUsage.CallUnary(ctx, req)
}

// ListUsage calls usage.v1.UsageService.ListUsage.
func (c *usageServiceClient) ListUsage(ctx context.Context, req *connect_go.Request[v1.ListUsageRequest]) (*connect_go.Response[v1.ListUsageResponse], error) {
	return c.listUsage.CallUnary(ctx, req)
}

// GetBalance calls usage.v1.UsageService.GetBalance.
func (c *usageServiceClient) GetBalance(ctx context.Context, req *connect_go.Request[v1.GetBalanceRequest]) (*connect_go.Response[v1.GetBalanceResponse], error) {
	return c.getBalance.CallUnary(ctx, req)
}

// AddUsageCreditNote calls usage.v1.UsageService.AddUsageCreditNote.
func (c *usageServiceClient) AddUsageCreditNote(ctx context.Context, req *connect_go.Request[v1.AddUsageCreditNoteRequest]) (*connect_go.Response[v1.AddUsageCreditNoteResponse], error) {
	return c.addUsageCreditNote.CallUnary(ctx, req)
}

// UsageServiceHandler is an implementation of the usage.v1.UsageService service.
type UsageServiceHandler interface {
	// GetCostCenter retrieves the active cost center for the given attributionID
	GetCostCenter(context.Context, *connect_go.Request[v1.GetCostCenterRequest]) (*connect_go.Response[v1.GetCostCenterResponse], error)
	// SetCostCenter stores the given cost center
	SetCostCenter(context.Context, *connect_go.Request[v1.SetCostCenterRequest]) (*connect_go.Response[v1.SetCostCenterResponse], error)
	// Triggers reconciliation of usage.
	ReconcileUsage(context.Context, *connect_go.Request[v1.ReconcileUsageRequest]) (*connect_go.Response[v1.ReconcileUsageResponse], error)
	// ResetUsage resets Usage for CostCenters which have expired or will explire shortly
	ResetUsage(context.Context, *connect_go.Request[v1.ResetUsageRequest]) (*connect_go.Response[v1.ResetUsageResponse], error)
	// ListUsage retrieves all usage for the specified attributionId and theb given time range
	ListUsage(context.Context, *connect_go.Request[v1.ListUsageRequest]) (*connect_go.Response[v1.ListUsageResponse], error)
	// GetBalance returns the current credits balance for the given attributionId
	GetBalance(context.Context, *connect_go.Request[v1.GetBalanceRequest]) (*connect_go.Response[v1.GetBalanceResponse], error)
	// AddUsageCreditNote adds a usage credit note to the given cost center with the effective date of now
	AddUsageCreditNote(context.Context, *connect_go.Request[v1.AddUsageCreditNoteRequest]) (*connect_go.Response[v1.AddUsageCreditNoteResponse], error)
}

// NewUsageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUsageServiceHandler(svc UsageServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/usage.v1.UsageService/GetCostCenter", connect_go.NewUnaryHandler(
		"/usage.v1.UsageService/GetCostCenter",
		svc.GetCostCenter,
		opts...,
	))
	mux.Handle("/usage.v1.UsageService/SetCostCenter", connect_go.NewUnaryHandler(
		"/usage.v1.UsageService/SetCostCenter",
		svc.SetCostCenter,
		opts...,
	))
	mux.Handle("/usage.v1.UsageService/ReconcileUsage", connect_go.NewUnaryHandler(
		"/usage.v1.UsageService/ReconcileUsage",
		svc.ReconcileUsage,
		opts...,
	))
	mux.Handle("/usage.v1.UsageService/ResetUsage", connect_go.NewUnaryHandler(
		"/usage.v1.UsageService/ResetUsage",
		svc.ResetUsage,
		opts...,
	))
	mux.Handle("/usage.v1.UsageService/ListUsage", connect_go.NewUnaryHandler(
		"/usage.v1.UsageService/ListUsage",
		svc.ListUsage,
		opts...,
	))
	mux.Handle("/usage.v1.UsageService/GetBalance", connect_go.NewUnaryHandler(
		"/usage.v1.UsageService/GetBalance",
		svc.GetBalance,
		opts...,
	))
	mux.Handle("/usage.v1.UsageService/AddUsageCreditNote", connect_go.NewUnaryHandler(
		"/usage.v1.UsageService/AddUsageCreditNote",
		svc.AddUsageCreditNote,
		opts...,
	))
	return "/usage.v1.UsageService/", mux
}

// UnimplementedUsageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUsageServiceHandler struct{}

func (UnimplementedUsageServiceHandler) GetCostCenter(context.Context, *connect_go.Request[v1.GetCostCenterRequest]) (*connect_go.Response[v1.GetCostCenterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usage.v1.UsageService.GetCostCenter is not implemented"))
}

func (UnimplementedUsageServiceHandler) SetCostCenter(context.Context, *connect_go.Request[v1.SetCostCenterRequest]) (*connect_go.Response[v1.SetCostCenterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usage.v1.UsageService.SetCostCenter is not implemented"))
}

func (UnimplementedUsageServiceHandler) ReconcileUsage(context.Context, *connect_go.Request[v1.ReconcileUsageRequest]) (*connect_go.Response[v1.ReconcileUsageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usage.v1.UsageService.ReconcileUsage is not implemented"))
}

func (UnimplementedUsageServiceHandler) ResetUsage(context.Context, *connect_go.Request[v1.ResetUsageRequest]) (*connect_go.Response[v1.ResetUsageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usage.v1.UsageService.ResetUsage is not implemented"))
}

func (UnimplementedUsageServiceHandler) ListUsage(context.Context, *connect_go.Request[v1.ListUsageRequest]) (*connect_go.Response[v1.ListUsageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usage.v1.UsageService.ListUsage is not implemented"))
}

func (UnimplementedUsageServiceHandler) GetBalance(context.Context, *connect_go.Request[v1.GetBalanceRequest]) (*connect_go.Response[v1.GetBalanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usage.v1.UsageService.GetBalance is not implemented"))
}

func (UnimplementedUsageServiceHandler) AddUsageCreditNote(context.Context, *connect_go.Request[v1.AddUsageCreditNoteRequest]) (*connect_go.Response[v1.AddUsageCreditNoteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usage.v1.UsageService.AddUsageCreditNote is not implemented"))
}
