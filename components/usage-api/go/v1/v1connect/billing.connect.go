// Copyright (c) 2023 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: usage/v1/billing.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gitpod-io/gitpod/usage-api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BillingServiceName is the fully-qualified name of the BillingService service.
	BillingServiceName = "usage.v1.BillingService"
)

// BillingServiceClient is a client for the usage.v1.BillingService service.
type BillingServiceClient interface {
	// ReconcileInvoices retrieves current credit balance and reflects it in
	// billing system. Internal RPC, not intended for general consumption.
	ReconcileInvoices(context.Context, *connect_go.Request[v1.ReconcileInvoicesRequest]) (*connect_go.Response[v1.ReconcileInvoicesResponse], error)
	// FinalizeInvoice marks all sessions occurring in the given Stripe invoice as
	// having been invoiced.
	FinalizeInvoice(context.Context, *connect_go.Request[v1.FinalizeInvoiceRequest]) (*connect_go.Response[v1.FinalizeInvoiceResponse], error)
	// CancelSubscription cancels a stripe subscription in our system
	// Called by a stripe webhook
	CancelSubscription(context.Context, *connect_go.Request[v1.CancelSubscriptionRequest]) (*connect_go.Response[v1.CancelSubscriptionResponse], error)
	// GetStripeCustomer retrieves a Stripe Customer
	GetStripeCustomer(context.Context, *connect_go.Request[v1.GetStripeCustomerRequest]) (*connect_go.Response[v1.GetStripeCustomerResponse], error)
	CreateStripeCustomer(context.Context, *connect_go.Request[v1.CreateStripeCustomerRequest]) (*connect_go.Response[v1.CreateStripeCustomerResponse], error)
	// CreateHoldPaymentIntent is meant to create a PaymentIntent for the given
	// customer, that is meant as measure to verify the payment
	// method/creditability of this user on first signup, before we create the
	// subscription
	CreateHoldPaymentIntent(context.Context, *connect_go.Request[v1.CreateHoldPaymentIntentRequest]) (*connect_go.Response[v1.CreateHoldPaymentIntentResponse], error)
	CreateStripeSubscription(context.Context, *connect_go.Request[v1.CreateStripeSubscriptionRequest]) (*connect_go.Response[v1.CreateStripeSubscriptionResponse], error)
	// GetPriceInformation returns the price information for a given attribtion id
	GetPriceInformation(context.Context, *connect_go.Request[v1.GetPriceInformationRequest]) (*connect_go.Response[v1.GetPriceInformationResponse], error)
	// OnChargeDispute handles charge disputes created with the underlying payment
	// provider.
	OnChargeDispute(context.Context, *connect_go.Request[v1.OnChargeDisputeRequest]) (*connect_go.Response[v1.OnChargeDisputeResponse], error)
}

// NewBillingServiceClient constructs a client for the usage.v1.BillingService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBillingServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BillingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &billingServiceClient{
		reconcileInvoices: connect_go.NewClient[v1.ReconcileInvoicesRequest, v1.ReconcileInvoicesResponse](
			httpClient,
			baseURL+"/usage.v1.BillingService/ReconcileInvoices",
			opts...,
		),
		finalizeInvoice: connect_go.NewClient[v1.FinalizeInvoiceRequest, v1.FinalizeInvoiceResponse](
			httpClient,
			baseURL+"/usage.v1.BillingService/FinalizeInvoice",
			opts...,
		),
		cancelSubscription: connect_go.NewClient[v1.CancelSubscriptionRequest, v1.CancelSubscriptionResponse](
			httpClient,
			baseURL+"/usage.v1.BillingService/CancelSubscription",
			opts...,
		),
		getStripeCustomer: connect_go.NewClient[v1.GetStripeCustomerRequest, v1.GetStripeCustomerResponse](
			httpClient,
			baseURL+"/usage.v1.BillingService/GetStripeCustomer",
			opts...,
		),
		createStripeCustomer: connect_go.NewClient[v1.CreateStripeCustomerRequest, v1.CreateStripeCustomerResponse](
			httpClient,
			baseURL+"/usage.v1.BillingService/CreateStripeCustomer",
			opts...,
		),
		createHoldPaymentIntent: connect_go.NewClient[v1.CreateHoldPaymentIntentRequest, v1.CreateHoldPaymentIntentResponse](
			httpClient,
			baseURL+"/usage.v1.BillingService/CreateHoldPaymentIntent",
			opts...,
		),
		createStripeSubscription: connect_go.NewClient[v1.CreateStripeSubscriptionRequest, v1.CreateStripeSubscriptionResponse](
			httpClient,
			baseURL+"/usage.v1.BillingService/CreateStripeSubscription",
			opts...,
		),
		getPriceInformation: connect_go.NewClient[v1.GetPriceInformationRequest, v1.GetPriceInformationResponse](
			httpClient,
			baseURL+"/usage.v1.BillingService/GetPriceInformation",
			opts...,
		),
		onChargeDispute: connect_go.NewClient[v1.OnChargeDisputeRequest, v1.OnChargeDisputeResponse](
			httpClient,
			baseURL+"/usage.v1.BillingService/OnChargeDispute",
			opts...,
		),
	}
}

// billingServiceClient implements BillingServiceClient.
type billingServiceClient struct {
	reconcileInvoices        *connect_go.Client[v1.ReconcileInvoicesRequest, v1.ReconcileInvoicesResponse]
	finalizeInvoice          *connect_go.Client[v1.FinalizeInvoiceRequest, v1.FinalizeInvoiceResponse]
	cancelSubscription       *connect_go.Client[v1.CancelSubscriptionRequest, v1.CancelSubscriptionResponse]
	getStripeCustomer        *connect_go.Client[v1.GetStripeCustomerRequest, v1.GetStripeCustomerResponse]
	createStripeCustomer     *connect_go.Client[v1.CreateStripeCustomerRequest, v1.CreateStripeCustomerResponse]
	createHoldPaymentIntent  *connect_go.Client[v1.CreateHoldPaymentIntentRequest, v1.CreateHoldPaymentIntentResponse]
	createStripeSubscription *connect_go.Client[v1.CreateStripeSubscriptionRequest, v1.CreateStripeSubscriptionResponse]
	getPriceInformation      *connect_go.Client[v1.GetPriceInformationRequest, v1.GetPriceInformationResponse]
	onChargeDispute          *connect_go.Client[v1.OnChargeDisputeRequest, v1.OnChargeDisputeResponse]
}

// ReconcileInvoices calls usage.v1.BillingService.ReconcileInvoices.
func (c *billingServiceClient) ReconcileInvoices(ctx context.Context, req *connect_go.Request[v1.ReconcileInvoicesRequest]) (*connect_go.Response[v1.ReconcileInvoicesResponse], error) {
	return c.reconcileInvoices.CallUnary(ctx, req)
}

// FinalizeInvoice calls usage.v1.BillingService.FinalizeInvoice.
func (c *billingServiceClient) FinalizeInvoice(ctx context.Context, req *connect_go.Request[v1.FinalizeInvoiceRequest]) (*connect_go.Response[v1.FinalizeInvoiceResponse], error) {
	return c.finalizeInvoice.CallUnary(ctx, req)
}

// CancelSubscription calls usage.v1.BillingService.CancelSubscription.
func (c *billingServiceClient) CancelSubscription(ctx context.Context, req *connect_go.Request[v1.CancelSubscriptionRequest]) (*connect_go.Response[v1.CancelSubscriptionResponse], error) {
	return c.cancelSubscription.CallUnary(ctx, req)
}

// GetStripeCustomer calls usage.v1.BillingService.GetStripeCustomer.
func (c *billingServiceClient) GetStripeCustomer(ctx context.Context, req *connect_go.Request[v1.GetStripeCustomerRequest]) (*connect_go.Response[v1.GetStripeCustomerResponse], error) {
	return c.getStripeCustomer.CallUnary(ctx, req)
}

// CreateStripeCustomer calls usage.v1.BillingService.CreateStripeCustomer.
func (c *billingServiceClient) CreateStripeCustomer(ctx context.Context, req *connect_go.Request[v1.CreateStripeCustomerRequest]) (*connect_go.Response[v1.CreateStripeCustomerResponse], error) {
	return c.createStripeCustomer.CallUnary(ctx, req)
}

// CreateHoldPaymentIntent calls usage.v1.BillingService.CreateHoldPaymentIntent.
func (c *billingServiceClient) CreateHoldPaymentIntent(ctx context.Context, req *connect_go.Request[v1.CreateHoldPaymentIntentRequest]) (*connect_go.Response[v1.CreateHoldPaymentIntentResponse], error) {
	return c.createHoldPaymentIntent.CallUnary(ctx, req)
}

// CreateStripeSubscription calls usage.v1.BillingService.CreateStripeSubscription.
func (c *billingServiceClient) CreateStripeSubscription(ctx context.Context, req *connect_go.Request[v1.CreateStripeSubscriptionRequest]) (*connect_go.Response[v1.CreateStripeSubscriptionResponse], error) {
	return c.createStripeSubscription.CallUnary(ctx, req)
}

// GetPriceInformation calls usage.v1.BillingService.GetPriceInformation.
func (c *billingServiceClient) GetPriceInformation(ctx context.Context, req *connect_go.Request[v1.GetPriceInformationRequest]) (*connect_go.Response[v1.GetPriceInformationResponse], error) {
	return c.getPriceInformation.CallUnary(ctx, req)
}

// OnChargeDispute calls usage.v1.BillingService.OnChargeDispute.
func (c *billingServiceClient) OnChargeDispute(ctx context.Context, req *connect_go.Request[v1.OnChargeDisputeRequest]) (*connect_go.Response[v1.OnChargeDisputeResponse], error) {
	return c.onChargeDispute.CallUnary(ctx, req)
}

// BillingServiceHandler is an implementation of the usage.v1.BillingService service.
type BillingServiceHandler interface {
	// ReconcileInvoices retrieves current credit balance and reflects it in
	// billing system. Internal RPC, not intended for general consumption.
	ReconcileInvoices(context.Context, *connect_go.Request[v1.ReconcileInvoicesRequest]) (*connect_go.Response[v1.ReconcileInvoicesResponse], error)
	// FinalizeInvoice marks all sessions occurring in the given Stripe invoice as
	// having been invoiced.
	FinalizeInvoice(context.Context, *connect_go.Request[v1.FinalizeInvoiceRequest]) (*connect_go.Response[v1.FinalizeInvoiceResponse], error)
	// CancelSubscription cancels a stripe subscription in our system
	// Called by a stripe webhook
	CancelSubscription(context.Context, *connect_go.Request[v1.CancelSubscriptionRequest]) (*connect_go.Response[v1.CancelSubscriptionResponse], error)
	// GetStripeCustomer retrieves a Stripe Customer
	GetStripeCustomer(context.Context, *connect_go.Request[v1.GetStripeCustomerRequest]) (*connect_go.Response[v1.GetStripeCustomerResponse], error)
	CreateStripeCustomer(context.Context, *connect_go.Request[v1.CreateStripeCustomerRequest]) (*connect_go.Response[v1.CreateStripeCustomerResponse], error)
	// CreateHoldPaymentIntent is meant to create a PaymentIntent for the given
	// customer, that is meant as measure to verify the payment
	// method/creditability of this user on first signup, before we create the
	// subscription
	CreateHoldPaymentIntent(context.Context, *connect_go.Request[v1.CreateHoldPaymentIntentRequest]) (*connect_go.Response[v1.CreateHoldPaymentIntentResponse], error)
	CreateStripeSubscription(context.Context, *connect_go.Request[v1.CreateStripeSubscriptionRequest]) (*connect_go.Response[v1.CreateStripeSubscriptionResponse], error)
	// GetPriceInformation returns the price information for a given attribtion id
	GetPriceInformation(context.Context, *connect_go.Request[v1.GetPriceInformationRequest]) (*connect_go.Response[v1.GetPriceInformationResponse], error)
	// OnChargeDispute handles charge disputes created with the underlying payment
	// provider.
	OnChargeDispute(context.Context, *connect_go.Request[v1.OnChargeDisputeRequest]) (*connect_go.Response[v1.OnChargeDisputeResponse], error)
}

// NewBillingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBillingServiceHandler(svc BillingServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/usage.v1.BillingService/ReconcileInvoices", connect_go.NewUnaryHandler(
		"/usage.v1.BillingService/ReconcileInvoices",
		svc.ReconcileInvoices,
		opts...,
	))
	mux.Handle("/usage.v1.BillingService/FinalizeInvoice", connect_go.NewUnaryHandler(
		"/usage.v1.BillingService/FinalizeInvoice",
		svc.FinalizeInvoice,
		opts...,
	))
	mux.Handle("/usage.v1.BillingService/CancelSubscription", connect_go.NewUnaryHandler(
		"/usage.v1.BillingService/CancelSubscription",
		svc.CancelSubscription,
		opts...,
	))
	mux.Handle("/usage.v1.BillingService/GetStripeCustomer", connect_go.NewUnaryHandler(
		"/usage.v1.BillingService/GetStripeCustomer",
		svc.GetStripeCustomer,
		opts...,
	))
	mux.Handle("/usage.v1.BillingService/CreateStripeCustomer", connect_go.NewUnaryHandler(
		"/usage.v1.BillingService/CreateStripeCustomer",
		svc.CreateStripeCustomer,
		opts...,
	))
	mux.Handle("/usage.v1.BillingService/CreateHoldPaymentIntent", connect_go.NewUnaryHandler(
		"/usage.v1.BillingService/CreateHoldPaymentIntent",
		svc.CreateHoldPaymentIntent,
		opts...,
	))
	mux.Handle("/usage.v1.BillingService/CreateStripeSubscription", connect_go.NewUnaryHandler(
		"/usage.v1.BillingService/CreateStripeSubscription",
		svc.CreateStripeSubscription,
		opts...,
	))
	mux.Handle("/usage.v1.BillingService/GetPriceInformation", connect_go.NewUnaryHandler(
		"/usage.v1.BillingService/GetPriceInformation",
		svc.GetPriceInformation,
		opts...,
	))
	mux.Handle("/usage.v1.BillingService/OnChargeDispute", connect_go.NewUnaryHandler(
		"/usage.v1.BillingService/OnChargeDispute",
		svc.OnChargeDispute,
		opts...,
	))
	return "/usage.v1.BillingService/", mux
}

// UnimplementedBillingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBillingServiceHandler struct{}

func (UnimplementedBillingServiceHandler) ReconcileInvoices(context.Context, *connect_go.Request[v1.ReconcileInvoicesRequest]) (*connect_go.Response[v1.ReconcileInvoicesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usage.v1.BillingService.ReconcileInvoices is not implemented"))
}

func (UnimplementedBillingServiceHandler) FinalizeInvoice(context.Context, *connect_go.Request[v1.FinalizeInvoiceRequest]) (*connect_go.Response[v1.FinalizeInvoiceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usage.v1.BillingService.FinalizeInvoice is not implemented"))
}

func (UnimplementedBillingServiceHandler) CancelSubscription(context.Context, *connect_go.Request[v1.CancelSubscriptionRequest]) (*connect_go.Response[v1.CancelSubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usage.v1.BillingService.CancelSubscription is not implemented"))
}

func (UnimplementedBillingServiceHandler) GetStripeCustomer(context.Context, *connect_go.Request[v1.GetStripeCustomerRequest]) (*connect_go.Response[v1.GetStripeCustomerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usage.v1.BillingService.GetStripeCustomer is not implemented"))
}

func (UnimplementedBillingServiceHandler) CreateStripeCustomer(context.Context, *connect_go.Request[v1.CreateStripeCustomerRequest]) (*connect_go.Response[v1.CreateStripeCustomerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usage.v1.BillingService.CreateStripeCustomer is not implemented"))
}

func (UnimplementedBillingServiceHandler) CreateHoldPaymentIntent(context.Context, *connect_go.Request[v1.CreateHoldPaymentIntentRequest]) (*connect_go.Response[v1.CreateHoldPaymentIntentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usage.v1.BillingService.CreateHoldPaymentIntent is not implemented"))
}

func (UnimplementedBillingServiceHandler) CreateStripeSubscription(context.Context, *connect_go.Request[v1.CreateStripeSubscriptionRequest]) (*connect_go.Response[v1.CreateStripeSubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usage.v1.BillingService.CreateStripeSubscription is not implemented"))
}

func (UnimplementedBillingServiceHandler) GetPriceInformation(context.Context, *connect_go.Request[v1.GetPriceInformationRequest]) (*connect_go.Response[v1.GetPriceInformationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usage.v1.BillingService.GetPriceInformation is not implemented"))
}

func (UnimplementedBillingServiceHandler) OnChargeDispute(context.Context, *connect_go.Request[v1.OnChargeDisputeRequest]) (*connect_go.Response[v1.OnChargeDisputeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usage.v1.BillingService.OnChargeDispute is not implemented"))
}
