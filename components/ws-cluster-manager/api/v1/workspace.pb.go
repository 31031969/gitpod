// Copyright (c) 2023 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: definition/workspace.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WorkspaceType specifies the purpose/use of a workspace. Different workspace types are handled differently by all parts of the system.
type WorkspaceType int32

const (
	WorkspaceType_WORKSPACE_TYPE_UNSPECIFIED WorkspaceType = 0
	WorkspaceType_WORKSPACE_TYPE_REGULAR     WorkspaceType = 1
	WorkspaceType_WORKSPACE_TYPE_PREBUILD    WorkspaceType = 2
)

// Enum value maps for WorkspaceType.
var (
	WorkspaceType_name = map[int32]string{
		0: "WORKSPACE_TYPE_UNSPECIFIED",
		1: "WORKSPACE_TYPE_REGULAR",
		2: "WORKSPACE_TYPE_PREBUILD",
	}
	WorkspaceType_value = map[string]int32{
		"WORKSPACE_TYPE_UNSPECIFIED": 0,
		"WORKSPACE_TYPE_REGULAR":     1,
		"WORKSPACE_TYPE_PREBUILD":    2,
	}
)

func (x WorkspaceType) Enum() *WorkspaceType {
	p := new(WorkspaceType)
	*p = x
	return p
}

func (x WorkspaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkspaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_definition_workspace_proto_enumTypes[0].Descriptor()
}

func (WorkspaceType) Type() protoreflect.EnumType {
	return &file_definition_workspace_proto_enumTypes[0]
}

func (x WorkspaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkspaceType.Descriptor instead.
func (WorkspaceType) EnumDescriptor() ([]byte, []int) {
	return file_definition_workspace_proto_rawDescGZIP(), []int{0}
}

type AdmissionLevel int32

const (
	AdmissionLevel_ADMISSION_LEVEL_UNSPECIFIED AdmissionLevel = 0
	// ADMISION_LEVEL_OWNER_ONLY means the workspace can only be accessed using the owner token
	AdmissionLevel_ADMISSION_LEVEL_OWNER_ONLY AdmissionLevel = 1
	// ADMISION_LEVEL_EVERYONE means the workspace (including ports) can be accessed by everyone.
	AdmissionLevel_ADMISSION_LEVEL_EVERYONE AdmissionLevel = 2
)

// Enum value maps for AdmissionLevel.
var (
	AdmissionLevel_name = map[int32]string{
		0: "ADMISSION_LEVEL_UNSPECIFIED",
		1: "ADMISSION_LEVEL_OWNER_ONLY",
		2: "ADMISSION_LEVEL_EVERYONE",
	}
	AdmissionLevel_value = map[string]int32{
		"ADMISSION_LEVEL_UNSPECIFIED": 0,
		"ADMISSION_LEVEL_OWNER_ONLY":  1,
		"ADMISSION_LEVEL_EVERYONE":    2,
	}
)

func (x AdmissionLevel) Enum() *AdmissionLevel {
	p := new(AdmissionLevel)
	*p = x
	return p
}

func (x AdmissionLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdmissionLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_definition_workspace_proto_enumTypes[1].Descriptor()
}

func (AdmissionLevel) Type() protoreflect.EnumType {
	return &file_definition_workspace_proto_enumTypes[1]
}

func (x AdmissionLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdmissionLevel.Descriptor instead.
func (AdmissionLevel) EnumDescriptor() ([]byte, []int) {
	return file_definition_workspace_proto_rawDescGZIP(), []int{1}
}

// CloneTargetMode is the target state in which we want to leave a GitWorkspace
type CloneTargetMode int32

const (
	CloneTargetMode_CLONE_TARGET_MODE_UNSPECIFIED CloneTargetMode = 0
	// REMOTE_HEAD has the local WS point at the remote branch head
	CloneTargetMode_CLONE_TARGET_MODE_REMOTE_HEAD CloneTargetMode = 1
	// REMOTE_COMMIT has the local WS point at a specific commit
	CloneTargetMode_CLONE_TARGET_MODE_REMOTE_COMMIT CloneTargetMode = 2
	// REMOTE_BRANCH has the local WS point at a remote branch
	CloneTargetMode_CLONE_TARGET_MODE_REMOTE_BRANCH CloneTargetMode = 3
	// LOCAL_BRANCH creates a local branch in the workspace
	CloneTargetMode_CLONE_TARGET_MODE_LOCAL_BRANCH CloneTargetMode = 4
)

// Enum value maps for CloneTargetMode.
var (
	CloneTargetMode_name = map[int32]string{
		0: "CLONE_TARGET_MODE_UNSPECIFIED",
		1: "CLONE_TARGET_MODE_REMOTE_HEAD",
		2: "CLONE_TARGET_MODE_REMOTE_COMMIT",
		3: "CLONE_TARGET_MODE_REMOTE_BRANCH",
		4: "CLONE_TARGET_MODE_LOCAL_BRANCH",
	}
	CloneTargetMode_value = map[string]int32{
		"CLONE_TARGET_MODE_UNSPECIFIED":   0,
		"CLONE_TARGET_MODE_REMOTE_HEAD":   1,
		"CLONE_TARGET_MODE_REMOTE_COMMIT": 2,
		"CLONE_TARGET_MODE_REMOTE_BRANCH": 3,
		"CLONE_TARGET_MODE_LOCAL_BRANCH":  4,
	}
)

func (x CloneTargetMode) Enum() *CloneTargetMode {
	p := new(CloneTargetMode)
	*p = x
	return p
}

func (x CloneTargetMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloneTargetMode) Descriptor() protoreflect.EnumDescriptor {
	return file_definition_workspace_proto_enumTypes[2].Descriptor()
}

func (CloneTargetMode) Type() protoreflect.EnumType {
	return &file_definition_workspace_proto_enumTypes[2]
}

func (x CloneTargetMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloneTargetMode.Descriptor instead.
func (CloneTargetMode) EnumDescriptor() ([]byte, []int) {
	return file_definition_workspace_proto_rawDescGZIP(), []int{2}
}

// GitAuthMethod is the means of authentication used during clone
type GitAuthMethod int32

const (
	GitAuthMethod_GIT_AUTH_METHOD_UNSPECIFIED GitAuthMethod = 0
	// NO_AUTH disables authentication during clone
	GitAuthMethod_GIT_AUTH_METHOD_NO_AUTH GitAuthMethod = 1
	// BASIC_AUTH uses HTTP basic auth during clone (fails if repo is not cloned through http)
	GitAuthMethod_GIT_AUTH_METHOD_BASIC_AUTH GitAuthMethod = 2
	// BASIC_AUTH_OTS uses HTTP basic auth during the clone with the secrets coming from the OTS URL.
	// Fails if either the OTS download or the clone fail.
	GitAuthMethod_GIT_AUTH_METHOD_BASIC_AUTH_OTS GitAuthMethod = 3
)

// Enum value maps for GitAuthMethod.
var (
	GitAuthMethod_name = map[int32]string{
		0: "GIT_AUTH_METHOD_UNSPECIFIED",
		1: "GIT_AUTH_METHOD_NO_AUTH",
		2: "GIT_AUTH_METHOD_BASIC_AUTH",
		3: "GIT_AUTH_METHOD_BASIC_AUTH_OTS",
	}
	GitAuthMethod_value = map[string]int32{
		"GIT_AUTH_METHOD_UNSPECIFIED":    0,
		"GIT_AUTH_METHOD_NO_AUTH":        1,
		"GIT_AUTH_METHOD_BASIC_AUTH":     2,
		"GIT_AUTH_METHOD_BASIC_AUTH_OTS": 3,
	}
)

func (x GitAuthMethod) Enum() *GitAuthMethod {
	p := new(GitAuthMethod)
	*p = x
	return p
}

func (x GitAuthMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitAuthMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_definition_workspace_proto_enumTypes[3].Descriptor()
}

func (GitAuthMethod) Type() protoreflect.EnumType {
	return &file_definition_workspace_proto_enumTypes[3]
}

func (x GitAuthMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitAuthMethod.Descriptor instead.
func (GitAuthMethod) EnumDescriptor() ([]byte, []int) {
	return file_definition_workspace_proto_rawDescGZIP(), []int{3}
}

// WorkspacePhase is a simple, high-level summary of where the workspace is in its lifecycle.
// The phase is not intended to be a comprehensive rollup of observations of the workspace state,
// nor is it intended to be a comprehensive state machine.
// (based on  https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase)
type WorkspacePhase int32

const (
	// Unknown indicates an issue within the workspace manager in that it cannot determine the actual phase of
	// a workspace. This phase is usually accompanied by an error.
	WorkspacePhase_WORKSPACE_PHASE_UNSPECIFIED WorkspacePhase = 0
	// Pending means the workspace does not yet consume resources in the cluster, but rather is looking for
	// some space within the cluster. If for example the cluster needs to scale up to accomodate the
	// workspace, the workspace will be in Pending state until that happened.
	WorkspacePhase_WORKSPACE_PHASE_PENDING WorkspacePhase = 1
	// Creating means the workspace is currently being created. That includes downloading the images required
	// to run the workspace over the network. The time spent in this phase varies widely and depends on the current
	// network speed, image size and cache states.
	WorkspacePhase_WORKSPACE_PHASE_CREATING WorkspacePhase = 2
	// Initializing is the phase in which the workspace is executing the appropriate workspace initializer (e.g. Git
	// clone or backup download). After this phase one can expect the workspace to either be Running or Failed.
	WorkspacePhase_WORKSPACE_PHASE_INITIALIZING WorkspacePhase = 3
	// Running means the workspace is able to actively perform work, either by serving a user through Theia,
	// or as a headless workspace.
	WorkspacePhase_WORKSPACE_PHASE_RUNNING WorkspacePhase = 4
	// Interrupted is an exceptional state where the container should be running but is temporarily unavailable.
	// When in this state, we expect it to become running or stopping anytime soon.
	WorkspacePhase_WORKSPACE_PHASE_INTERRUPTED WorkspacePhase = 7
	// Stopping means that the workspace is currently shutting down. It could go to stopped every moment.
	WorkspacePhase_WORKSPACE_PHASE_STOPPING WorkspacePhase = 5
	// Stopped means the workspace ended regularly because it was shut down.
	WorkspacePhase_WORKSPACE_PHASE_STOPPED WorkspacePhase = 6
)

// Enum value maps for WorkspacePhase.
var (
	WorkspacePhase_name = map[int32]string{
		0: "WORKSPACE_PHASE_UNSPECIFIED",
		1: "WORKSPACE_PHASE_PENDING",
		2: "WORKSPACE_PHASE_CREATING",
		3: "WORKSPACE_PHASE_INITIALIZING",
		4: "WORKSPACE_PHASE_RUNNING",
		7: "WORKSPACE_PHASE_INTERRUPTED",
		5: "WORKSPACE_PHASE_STOPPING",
		6: "WORKSPACE_PHASE_STOPPED",
	}
	WorkspacePhase_value = map[string]int32{
		"WORKSPACE_PHASE_UNSPECIFIED":  0,
		"WORKSPACE_PHASE_PENDING":      1,
		"WORKSPACE_PHASE_CREATING":     2,
		"WORKSPACE_PHASE_INITIALIZING": 3,
		"WORKSPACE_PHASE_RUNNING":      4,
		"WORKSPACE_PHASE_INTERRUPTED":  7,
		"WORKSPACE_PHASE_STOPPING":     5,
		"WORKSPACE_PHASE_STOPPED":      6,
	}
)

func (x WorkspacePhase) Enum() *WorkspacePhase {
	p := new(WorkspacePhase)
	*p = x
	return p
}

func (x WorkspacePhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkspacePhase) Descriptor() protoreflect.EnumDescriptor {
	return file_definition_workspace_proto_enumTypes[4].Descriptor()
}

func (WorkspacePhase) Type() protoreflect.EnumType {
	return &file_definition_workspace_proto_enumTypes[4]
}

func (x WorkspacePhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkspacePhase.Descriptor instead.
func (WorkspacePhase) EnumDescriptor() ([]byte, []int) {
	return file_definition_workspace_proto_rawDescGZIP(), []int{4}
}

type Workspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ResourceMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *WorkspaceSpec    `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *WorkspaceStatus  `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Workspace) Reset() {
	*x = Workspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_definition_workspace_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workspace) ProtoMessage() {}

func (x *Workspace) ProtoReflect() protoreflect.Message {
	mi := &file_definition_workspace_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workspace.ProtoReflect.Descriptor instead.
func (*Workspace) Descriptor() ([]byte, []int) {
	return file_definition_workspace_proto_rawDescGZIP(), []int{0}
}

func (x *Workspace) GetMetadata() *ResourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Workspace) GetSpec() *WorkspaceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Workspace) GetStatus() *WorkspaceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type WorkspaceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type WorkspaceType `protobuf:"varint,1,opt,name=type,proto3,enum=v1.WorkspaceType" json:"type,omitempty"`
	// Class denotes the class of the workspace we ought to start
	Class string `protobuf:"bytes,2,opt,name=class,proto3" json:"class,omitempty"`
	// envvars are user-defined environment variables which ought to be available in the workspace
	Envvars []*EnvironmentVariable `protobuf:"bytes,3,rep,name=envvars,proto3" json:"envvars,omitempty"`
	// ports is the set of ports which ought to be exposed to the internet
	Ports []*PortSpec `protobuf:"bytes,4,rep,name=ports,proto3" json:"ports,omitempty"`
	// admission controlls who can access the workspace and its ports.
	Admission AdmissionLevel `protobuf:"varint,5,opt,name=admission,proto3,enum=v1.AdmissionLevel" json:"admission,omitempty"`
	// Git configures the Git user in the workspace
	Git *GitSpec `protobuf:"bytes,6,opt,name=git,proto3" json:"git,omitempty"`
	// ssh_public_keys is user's uploaded ssh public keys
	SshPublicKeys []string `protobuf:"bytes,7,rep,name=ssh_public_keys,json=sshPublicKeys,proto3" json:"ssh_public_keys,omitempty"`
	// timeout is the maximum time the workspace is allowed to run without activity
	Timeout *durationpb.Duration `protobuf:"bytes,8,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// initializer is the initializer to use to create the workspace content
	Initializer []byte `protobuf:"bytes,9,opt,name=initializer,proto3" json:"initializer,omitempty"`
}

func (x *WorkspaceSpec) Reset() {
	*x = WorkspaceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_definition_workspace_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceSpec) ProtoMessage() {}

func (x *WorkspaceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_definition_workspace_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceSpec.ProtoReflect.Descriptor instead.
func (*WorkspaceSpec) Descriptor() ([]byte, []int) {
	return file_definition_workspace_proto_rawDescGZIP(), []int{1}
}

func (x *WorkspaceSpec) GetType() WorkspaceType {
	if x != nil {
		return x.Type
	}
	return WorkspaceType_WORKSPACE_TYPE_UNSPECIFIED
}

func (x *WorkspaceSpec) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *WorkspaceSpec) GetEnvvars() []*EnvironmentVariable {
	if x != nil {
		return x.Envvars
	}
	return nil
}

func (x *WorkspaceSpec) GetPorts() []*PortSpec {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *WorkspaceSpec) GetAdmission() AdmissionLevel {
	if x != nil {
		return x.Admission
	}
	return AdmissionLevel_ADMISSION_LEVEL_UNSPECIFIED
}

func (x *WorkspaceSpec) GetGit() *GitSpec {
	if x != nil {
		return x.Git
	}
	return nil
}

func (x *WorkspaceSpec) GetSshPublicKeys() []string {
	if x != nil {
		return x.SshPublicKeys
	}
	return nil
}

func (x *WorkspaceSpec) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *WorkspaceSpec) GetInitializer() []byte {
	if x != nil {
		return x.Initializer
	}
	return nil
}

type EnvironmentVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EnvironmentVariable) Reset() {
	*x = EnvironmentVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_definition_workspace_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentVariable) ProtoMessage() {}

func (x *EnvironmentVariable) ProtoReflect() protoreflect.Message {
	mi := &file_definition_workspace_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentVariable.ProtoReflect.Descriptor instead.
func (*EnvironmentVariable) Descriptor() ([]byte, []int) {
	return file_definition_workspace_proto_rawDescGZIP(), []int{2}
}

func (x *EnvironmentVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvironmentVariable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// PortSpec describes a networking port exposed on a workspace
type PortSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port      uint32         `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Admission AdmissionLevel `protobuf:"varint,2,opt,name=admission,proto3,enum=v1.AdmissionLevel" json:"admission,omitempty"`
}

func (x *PortSpec) Reset() {
	*x = PortSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_definition_workspace_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortSpec) ProtoMessage() {}

func (x *PortSpec) ProtoReflect() protoreflect.Message {
	mi := &file_definition_workspace_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortSpec.ProtoReflect.Descriptor instead.
func (*PortSpec) Descriptor() ([]byte, []int) {
	return file_definition_workspace_proto_rawDescGZIP(), []int{3}
}

func (x *PortSpec) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PortSpec) GetAdmission() AdmissionLevel {
	if x != nil {
		return x.Admission
	}
	return AdmissionLevel_ADMISSION_LEVEL_UNSPECIFIED
}

// GitSpec configures the Git available within the workspace
type GitSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Git username
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// The Git email address
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *GitSpec) Reset() {
	*x = GitSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_definition_workspace_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitSpec) ProtoMessage() {}

func (x *GitSpec) ProtoReflect() protoreflect.Message {
	mi := &file_definition_workspace_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitSpec.ProtoReflect.Descriptor instead.
func (*GitSpec) Descriptor() ([]byte, []int) {
	return file_definition_workspace_proto_rawDescGZIP(), []int{4}
}

func (x *GitSpec) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GitSpec) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type WorkspaceContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Spec:
	//
	//	*WorkspaceContent_Empty
	//	*WorkspaceContent_Git
	//	*WorkspaceContent_Snapshot
	//	*WorkspaceContent_Prebuild
	//	*WorkspaceContent_Composite
	Spec isWorkspaceContent_Spec `protobuf_oneof:"spec"`
}

func (x *WorkspaceContent) Reset() {
	*x = WorkspaceContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_definition_workspace_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceContent) ProtoMessage() {}

func (x *WorkspaceContent) ProtoReflect() protoreflect.Message {
	mi := &file_definition_workspace_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceContent.ProtoReflect.Descriptor instead.
func (*WorkspaceContent) Descriptor() ([]byte, []int) {
	return file_definition_workspace_proto_rawDescGZIP(), []int{5}
}

func (m *WorkspaceContent) GetSpec() isWorkspaceContent_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *WorkspaceContent) GetEmpty() *WorkspaceContentEmpty {
	if x, ok := x.GetSpec().(*WorkspaceContent_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *WorkspaceContent) GetGit() *WorkspaceContentGit {
	if x, ok := x.GetSpec().(*WorkspaceContent_Git); ok {
		return x.Git
	}
	return nil
}

func (x *WorkspaceContent) GetSnapshot() *WorkspaceContentSnapshot {
	if x, ok := x.GetSpec().(*WorkspaceContent_Snapshot); ok {
		return x.Snapshot
	}
	return nil
}

func (x *WorkspaceContent) GetPrebuild() *WorkspaceContentPrebuild {
	if x, ok := x.GetSpec().(*WorkspaceContent_Prebuild); ok {
		return x.Prebuild
	}
	return nil
}

func (x *WorkspaceContent) GetComposite() *WorkspaceContentComposite {
	if x, ok := x.GetSpec().(*WorkspaceContent_Composite); ok {
		return x.Composite
	}
	return nil
}

type isWorkspaceContent_Spec interface {
	isWorkspaceContent_Spec()
}

type WorkspaceContent_Empty struct {
	Empty *WorkspaceContentEmpty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type WorkspaceContent_Git struct {
	Git *WorkspaceContentGit `protobuf:"bytes,2,opt,name=git,proto3,oneof"`
}

type WorkspaceContent_Snapshot struct {
	Snapshot *WorkspaceContentSnapshot `protobuf:"bytes,3,opt,name=snapshot,proto3,oneof"`
}

type WorkspaceContent_Prebuild struct {
	Prebuild *WorkspaceContentPrebuild `protobuf:"bytes,4,opt,name=prebuild,proto3,oneof"`
}

type WorkspaceContent_Composite struct {
	Composite *WorkspaceContentComposite `protobuf:"bytes,5,opt,name=composite,proto3,oneof"`
}

func (*WorkspaceContent_Empty) isWorkspaceContent_Spec() {}

func (*WorkspaceContent_Git) isWorkspaceContent_Spec() {}

func (*WorkspaceContent_Snapshot) isWorkspaceContent_Spec() {}

func (*WorkspaceContent_Prebuild) isWorkspaceContent_Spec() {}

func (*WorkspaceContent_Composite) isWorkspaceContent_Spec() {}

// Composite uses a collection of initializer to produce workspace content.
// All initializer are executed in the order they're provided.
type WorkspaceContentComposite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []*WorkspaceContent `protobuf:"bytes,1,rep,name=content,proto3" json:"content,omitempty"`
}

func (x *WorkspaceContentComposite) Reset() {
	*x = WorkspaceContentComposite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_definition_workspace_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceContentComposite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceContentComposite) ProtoMessage() {}

func (x *WorkspaceContentComposite) ProtoReflect() protoreflect.Message {
	mi := &file_definition_workspace_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceContentComposite.ProtoReflect.Descriptor instead.
func (*WorkspaceContentComposite) Descriptor() ([]byte, []int) {
	return file_definition_workspace_proto_rawDescGZIP(), []int{6}
}

func (x *WorkspaceContentComposite) GetContent() []*WorkspaceContent {
	if x != nil {
		return x.Content
	}
	return nil
}

type WorkspaceContentEmpty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WorkspaceContentEmpty) Reset() {
	*x = WorkspaceContentEmpty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_definition_workspace_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceContentEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceContentEmpty) ProtoMessage() {}

func (x *WorkspaceContentEmpty) ProtoReflect() protoreflect.Message {
	mi := &file_definition_workspace_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceContentEmpty.ProtoReflect.Descriptor instead.
func (*WorkspaceContentEmpty) Descriptor() ([]byte, []int) {
	return file_definition_workspace_proto_rawDescGZIP(), []int{7}
}

type WorkspaceContentGit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// remote_uri is the Git remote origin
	RemoteUri string `protobuf:"bytes,1,opt,name=remote_uri,json=remoteUri,proto3" json:"remote_uri,omitempty"`
	// upstream_remote_uri is the fork upstream of a repository
	UpstreamRemoteUri string `protobuf:"bytes,2,opt,name=upstream_remote_uri,json=upstreamRemoteUri,proto3" json:"upstream_remote_uri,omitempty"`
	// the target mode determines what gets checked out
	TargetMode CloneTargetMode `protobuf:"varint,3,opt,name=target_mode,json=targetMode,proto3,enum=v1.CloneTargetMode" json:"target_mode,omitempty"`
	// the value for the clone target mode - use depends on the target mode
	CloneTaget string `protobuf:"bytes,4,opt,name=clone_taget,json=cloneTaget,proto3" json:"clone_taget,omitempty"`
	// a path relative to the workspace root in which the code will be checked out to
	CheckoutLocation string `protobuf:"bytes,5,opt,name=checkout_location,json=checkoutLocation,proto3" json:"checkout_location,omitempty"`
	// config specifies the Git configuration for this workspace
	Config *GitConfig `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *WorkspaceContentGit) Reset() {
	*x = WorkspaceContentGit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_definition_workspace_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceContentGit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceContentGit) ProtoMessage() {}

func (x *WorkspaceContentGit) ProtoReflect() protoreflect.Message {
	mi := &file_definition_workspace_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceContentGit.ProtoReflect.Descriptor instead.
func (*WorkspaceContentGit) Descriptor() ([]byte, []int) {
	return file_definition_workspace_proto_rawDescGZIP(), []int{8}
}

func (x *WorkspaceContentGit) GetRemoteUri() string {
	if x != nil {
		return x.RemoteUri
	}
	return ""
}

func (x *WorkspaceContentGit) GetUpstreamRemoteUri() string {
	if x != nil {
		return x.UpstreamRemoteUri
	}
	return ""
}

func (x *WorkspaceContentGit) GetTargetMode() CloneTargetMode {
	if x != nil {
		return x.TargetMode
	}
	return CloneTargetMode_CLONE_TARGET_MODE_UNSPECIFIED
}

func (x *WorkspaceContentGit) GetCloneTaget() string {
	if x != nil {
		return x.CloneTaget
	}
	return ""
}

func (x *WorkspaceContentGit) GetCheckoutLocation() string {
	if x != nil {
		return x.CheckoutLocation
	}
	return ""
}

func (x *WorkspaceContentGit) GetConfig() *GitConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type GitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// custom config values to be set on clone provided through `.gitpod.yml`
	CustomConfig map[string]string `protobuf:"bytes,1,rep,name=custom_config,json=customConfig,proto3" json:"custom_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// authentication method
	Authentication GitAuthMethod `protobuf:"varint,2,opt,name=authentication,proto3,enum=v1.GitAuthMethod" json:"authentication,omitempty"`
	// auth_user is the username used to authenticate the clone
	AuthUser string `protobuf:"bytes,3,opt,name=auth_user,json=authUser,proto3" json:"auth_user,omitempty"`
	// auth_password is the password used to authenticate the clone (can also be an API token)
	AuthPassword string `protobuf:"bytes,4,opt,name=auth_password,json=authPassword,proto3" json:"auth_password,omitempty"`
	// auth_ots is a URL where one can download the authentication secret (<username>:<password>)
	// using a GET request.
	AuthOts string `protobuf:"bytes,5,opt,name=auth_ots,json=authOts,proto3" json:"auth_ots,omitempty"`
}

func (x *GitConfig) Reset() {
	*x = GitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_definition_workspace_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitConfig) ProtoMessage() {}

func (x *GitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_definition_workspace_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitConfig.ProtoReflect.Descriptor instead.
func (*GitConfig) Descriptor() ([]byte, []int) {
	return file_definition_workspace_proto_rawDescGZIP(), []int{9}
}

func (x *GitConfig) GetCustomConfig() map[string]string {
	if x != nil {
		return x.CustomConfig
	}
	return nil
}

func (x *GitConfig) GetAuthentication() GitAuthMethod {
	if x != nil {
		return x.Authentication
	}
	return GitAuthMethod_GIT_AUTH_METHOD_UNSPECIFIED
}

func (x *GitConfig) GetAuthUser() string {
	if x != nil {
		return x.AuthUser
	}
	return ""
}

func (x *GitConfig) GetAuthPassword() string {
	if x != nil {
		return x.AuthPassword
	}
	return ""
}

func (x *GitConfig) GetAuthOts() string {
	if x != nil {
		return x.AuthOts
	}
	return ""
}

type WorkspaceContentSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the snapshot to restore
	Snapshot string `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	// if snapshot string is volume snapshot and not GCS url
	FromVolumeSnapshot bool `protobuf:"varint,2,opt,name=from_volume_snapshot,json=fromVolumeSnapshot,proto3" json:"from_volume_snapshot,omitempty"`
}

func (x *WorkspaceContentSnapshot) Reset() {
	*x = WorkspaceContentSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_definition_workspace_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceContentSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceContentSnapshot) ProtoMessage() {}

func (x *WorkspaceContentSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_definition_workspace_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceContentSnapshot.ProtoReflect.Descriptor instead.
func (*WorkspaceContentSnapshot) Descriptor() ([]byte, []int) {
	return file_definition_workspace_proto_rawDescGZIP(), []int{10}
}

func (x *WorkspaceContentSnapshot) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

func (x *WorkspaceContentSnapshot) GetFromVolumeSnapshot() bool {
	if x != nil {
		return x.FromVolumeSnapshot
	}
	return false
}

// A prebuild initializer combines snapshots with Git: first we try the snapshot, then apply the Git clone target.
// If restoring the snapshot fails, we fall back to a regular Git initializer, which might be composite git initializer for multi-repo projects.
type WorkspaceContentPrebuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prebuild *WorkspaceContentSnapshot `protobuf:"bytes,1,opt,name=prebuild,proto3" json:"prebuild,omitempty"`
	Git      []*WorkspaceContentGit    `protobuf:"bytes,2,rep,name=git,proto3" json:"git,omitempty"`
}

func (x *WorkspaceContentPrebuild) Reset() {
	*x = WorkspaceContentPrebuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_definition_workspace_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceContentPrebuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceContentPrebuild) ProtoMessage() {}

func (x *WorkspaceContentPrebuild) ProtoReflect() protoreflect.Message {
	mi := &file_definition_workspace_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceContentPrebuild.ProtoReflect.Descriptor instead.
func (*WorkspaceContentPrebuild) Descriptor() ([]byte, []int) {
	return file_definition_workspace_proto_rawDescGZIP(), []int{11}
}

func (x *WorkspaceContentPrebuild) GetPrebuild() *WorkspaceContentSnapshot {
	if x != nil {
		return x.Prebuild
	}
	return nil
}

func (x *WorkspaceContentPrebuild) GetGit() []*WorkspaceContentGit {
	if x != nil {
		return x.Git
	}
	return nil
}

type WorkspaceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase      WorkspacePhase        `protobuf:"varint,1,opt,name=phase,proto3,enum=v1.WorkspacePhase" json:"phase,omitempty"`
	Conditions map[string]*Condition `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OwnerToken string                `protobuf:"bytes,3,opt,name=owner_token,json=ownerToken,proto3" json:"owner_token,omitempty"`
	Url        string                `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *WorkspaceStatus) Reset() {
	*x = WorkspaceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_definition_workspace_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceStatus) ProtoMessage() {}

func (x *WorkspaceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_definition_workspace_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceStatus.ProtoReflect.Descriptor instead.
func (*WorkspaceStatus) Descriptor() ([]byte, []int) {
	return file_definition_workspace_proto_rawDescGZIP(), []int{12}
}

func (x *WorkspaceStatus) GetPhase() WorkspacePhase {
	if x != nil {
		return x.Phase
	}
	return WorkspacePhase_WORKSPACE_PHASE_UNSPECIFIED
}

func (x *WorkspaceStatus) GetConditions() map[string]*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *WorkspaceStatus) GetOwnerToken() string {
	if x != nil {
		return x.OwnerToken
	}
	return ""
}

func (x *WorkspaceStatus) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

var File_definition_workspace_proto protoreflect.FileDescriptor

var file_definition_workspace_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31,
	0x1a, 0x19, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x09,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xf3, 0x02, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x31,
	0x0a, 0x07, 0x65, 0x6e, 0x76, 0x76, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x76, 0x61, 0x72,
	0x73, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x09, 0x61, 0x64,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x03, 0x67, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x33,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x13, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x50, 0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x09, 0x61,
	0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x07, 0x47, 0x69, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xb1, 0x02, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2b, 0x0a,
	0x03, 0x67, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x47, 0x69, 0x74, 0x48, 0x00, 0x52, 0x03, 0x67, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x4b, 0x0a, 0x19, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x8f, 0x02, 0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x55, 0x72, 0x69, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x55, 0x72, 0x69, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x54, 0x61, 0x67, 0x65, 0x74, 0x12, 0x2b, 0x0a,
	0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0xaa, 0x02, 0x0a, 0x09, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x44, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6f, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4f, 0x74, 0x73, 0x1a, 0x3f, 0x0a,
	0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x68,
	0x0a, 0x18, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x7f, 0x0a, 0x18, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x08, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x29,
	0x0a, 0x03, 0x67, 0x69, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x47, 0x69, 0x74, 0x52, 0x03, 0x67, 0x69, 0x74, 0x22, 0x81, 0x02, 0x0a, 0x0f, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a,
	0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a,
	0x4c, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x68, 0x0a,
	0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x1a, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x4f,
	0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x02, 0x2a, 0x6f, 0x0a, 0x0e, 0x41, 0x64, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x44, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x44,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4f, 0x57,
	0x4e, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x44,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x56,
	0x45, 0x52, 0x59, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x2a, 0xc5, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x1d,
	0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44,
	0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47,
	0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4c, 0x4f, 0x4e, 0x45,
	0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x54, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e,
	0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10, 0x04,
	0x2a, 0x91, 0x01, 0x0a, 0x0d, 0x47, 0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x49, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x49, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x01,
	0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x49, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x02,
	0x12, 0x22, 0x0a, 0x1e, 0x47, 0x49, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4f,
	0x54, 0x53, 0x10, 0x03, 0x2a, 0x87, 0x02, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x4f, 0x52, 0x4b, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x4f, 0x52, 0x4b,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41,
	0x43, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41,
	0x43, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f,
	0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x45,
	0x44, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10,
	0x05, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x50,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x42, 0x42,
	0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x77, 0x73, 0x2d, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_definition_workspace_proto_rawDescOnce sync.Once
	file_definition_workspace_proto_rawDescData = file_definition_workspace_proto_rawDesc
)

func file_definition_workspace_proto_rawDescGZIP() []byte {
	file_definition_workspace_proto_rawDescOnce.Do(func() {
		file_definition_workspace_proto_rawDescData = protoimpl.X.CompressGZIP(file_definition_workspace_proto_rawDescData)
	})
	return file_definition_workspace_proto_rawDescData
}

var file_definition_workspace_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_definition_workspace_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_definition_workspace_proto_goTypes = []interface{}{
	(WorkspaceType)(0),                // 0: v1.WorkspaceType
	(AdmissionLevel)(0),               // 1: v1.AdmissionLevel
	(CloneTargetMode)(0),              // 2: v1.CloneTargetMode
	(GitAuthMethod)(0),                // 3: v1.GitAuthMethod
	(WorkspacePhase)(0),               // 4: v1.WorkspacePhase
	(*Workspace)(nil),                 // 5: v1.Workspace
	(*WorkspaceSpec)(nil),             // 6: v1.WorkspaceSpec
	(*EnvironmentVariable)(nil),       // 7: v1.EnvironmentVariable
	(*PortSpec)(nil),                  // 8: v1.PortSpec
	(*GitSpec)(nil),                   // 9: v1.GitSpec
	(*WorkspaceContent)(nil),          // 10: v1.WorkspaceContent
	(*WorkspaceContentComposite)(nil), // 11: v1.WorkspaceContentComposite
	(*WorkspaceContentEmpty)(nil),     // 12: v1.WorkspaceContentEmpty
	(*WorkspaceContentGit)(nil),       // 13: v1.WorkspaceContentGit
	(*GitConfig)(nil),                 // 14: v1.GitConfig
	(*WorkspaceContentSnapshot)(nil),  // 15: v1.WorkspaceContentSnapshot
	(*WorkspaceContentPrebuild)(nil),  // 16: v1.WorkspaceContentPrebuild
	(*WorkspaceStatus)(nil),           // 17: v1.WorkspaceStatus
	nil,                               // 18: v1.GitConfig.CustomConfigEntry
	nil,                               // 19: v1.WorkspaceStatus.ConditionsEntry
	(*ResourceMetadata)(nil),          // 20: v1.ResourceMetadata
	(*durationpb.Duration)(nil),       // 21: google.protobuf.Duration
	(*Condition)(nil),                 // 22: v1.Condition
}
var file_definition_workspace_proto_depIdxs = []int32{
	20, // 0: v1.Workspace.metadata:type_name -> v1.ResourceMetadata
	6,  // 1: v1.Workspace.spec:type_name -> v1.WorkspaceSpec
	17, // 2: v1.Workspace.status:type_name -> v1.WorkspaceStatus
	0,  // 3: v1.WorkspaceSpec.type:type_name -> v1.WorkspaceType
	7,  // 4: v1.WorkspaceSpec.envvars:type_name -> v1.EnvironmentVariable
	8,  // 5: v1.WorkspaceSpec.ports:type_name -> v1.PortSpec
	1,  // 6: v1.WorkspaceSpec.admission:type_name -> v1.AdmissionLevel
	9,  // 7: v1.WorkspaceSpec.git:type_name -> v1.GitSpec
	21, // 8: v1.WorkspaceSpec.timeout:type_name -> google.protobuf.Duration
	1,  // 9: v1.PortSpec.admission:type_name -> v1.AdmissionLevel
	12, // 10: v1.WorkspaceContent.empty:type_name -> v1.WorkspaceContentEmpty
	13, // 11: v1.WorkspaceContent.git:type_name -> v1.WorkspaceContentGit
	15, // 12: v1.WorkspaceContent.snapshot:type_name -> v1.WorkspaceContentSnapshot
	16, // 13: v1.WorkspaceContent.prebuild:type_name -> v1.WorkspaceContentPrebuild
	11, // 14: v1.WorkspaceContent.composite:type_name -> v1.WorkspaceContentComposite
	10, // 15: v1.WorkspaceContentComposite.content:type_name -> v1.WorkspaceContent
	2,  // 16: v1.WorkspaceContentGit.target_mode:type_name -> v1.CloneTargetMode
	14, // 17: v1.WorkspaceContentGit.config:type_name -> v1.GitConfig
	18, // 18: v1.GitConfig.custom_config:type_name -> v1.GitConfig.CustomConfigEntry
	3,  // 19: v1.GitConfig.authentication:type_name -> v1.GitAuthMethod
	15, // 20: v1.WorkspaceContentPrebuild.prebuild:type_name -> v1.WorkspaceContentSnapshot
	13, // 21: v1.WorkspaceContentPrebuild.git:type_name -> v1.WorkspaceContentGit
	4,  // 22: v1.WorkspaceStatus.phase:type_name -> v1.WorkspacePhase
	19, // 23: v1.WorkspaceStatus.conditions:type_name -> v1.WorkspaceStatus.ConditionsEntry
	22, // 24: v1.WorkspaceStatus.ConditionsEntry.value:type_name -> v1.Condition
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_definition_workspace_proto_init() }
func file_definition_workspace_proto_init() {
	if File_definition_workspace_proto != nil {
		return
	}
	file_definition_metadata_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_definition_workspace_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_definition_workspace_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_definition_workspace_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_definition_workspace_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_definition_workspace_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_definition_workspace_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_definition_workspace_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceContentComposite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_definition_workspace_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceContentEmpty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_definition_workspace_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceContentGit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_definition_workspace_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_definition_workspace_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceContentSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_definition_workspace_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceContentPrebuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_definition_workspace_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_definition_workspace_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*WorkspaceContent_Empty)(nil),
		(*WorkspaceContent_Git)(nil),
		(*WorkspaceContent_Snapshot)(nil),
		(*WorkspaceContent_Prebuild)(nil),
		(*WorkspaceContent_Composite)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_definition_workspace_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_definition_workspace_proto_goTypes,
		DependencyIndexes: file_definition_workspace_proto_depIdxs,
		EnumInfos:         file_definition_workspace_proto_enumTypes,
		MessageInfos:      file_definition_workspace_proto_msgTypes,
	}.Build()
	File_definition_workspace_proto = out.File
	file_definition_workspace_proto_rawDesc = nil
	file_definition_workspace_proto_goTypes = nil
	file_definition_workspace_proto_depIdxs = nil
}
