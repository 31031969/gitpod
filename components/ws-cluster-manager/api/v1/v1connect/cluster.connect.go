// Copyright (c) 2023 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: definition/cluster.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gitpod-io/gitpod/components/ws-cluster-manager/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ClusterServiceName is the fully-qualified name of the ClusterService service.
	ClusterServiceName = "v1.ClusterService"
)

// ClusterServiceClient is a client for the v1.ClusterService service.
type ClusterServiceClient interface {
	PullSpecs(context.Context, *connect_go.Request[v1.PullSpecsRequest]) (*connect_go.Response[v1.PullSpecsResponse], error)
	Notify(context.Context, *connect_go.Request[v1.NotifyRequest]) (*connect_go.ServerStreamForClient[v1.NotifyResponse], error)
}

// NewClusterServiceClient constructs a client for the v1.ClusterService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClusterServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ClusterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &clusterServiceClient{
		pullSpecs: connect_go.NewClient[v1.PullSpecsRequest, v1.PullSpecsResponse](
			httpClient,
			baseURL+"/v1.ClusterService/PullSpecs",
			opts...,
		),
		notify: connect_go.NewClient[v1.NotifyRequest, v1.NotifyResponse](
			httpClient,
			baseURL+"/v1.ClusterService/Notify",
			opts...,
		),
	}
}

// clusterServiceClient implements ClusterServiceClient.
type clusterServiceClient struct {
	pullSpecs *connect_go.Client[v1.PullSpecsRequest, v1.PullSpecsResponse]
	notify    *connect_go.Client[v1.NotifyRequest, v1.NotifyResponse]
}

// PullSpecs calls v1.ClusterService.PullSpecs.
func (c *clusterServiceClient) PullSpecs(ctx context.Context, req *connect_go.Request[v1.PullSpecsRequest]) (*connect_go.Response[v1.PullSpecsResponse], error) {
	return c.pullSpecs.CallUnary(ctx, req)
}

// Notify calls v1.ClusterService.Notify.
func (c *clusterServiceClient) Notify(ctx context.Context, req *connect_go.Request[v1.NotifyRequest]) (*connect_go.ServerStreamForClient[v1.NotifyResponse], error) {
	return c.notify.CallServerStream(ctx, req)
}

// ClusterServiceHandler is an implementation of the v1.ClusterService service.
type ClusterServiceHandler interface {
	PullSpecs(context.Context, *connect_go.Request[v1.PullSpecsRequest]) (*connect_go.Response[v1.PullSpecsResponse], error)
	Notify(context.Context, *connect_go.Request[v1.NotifyRequest], *connect_go.ServerStream[v1.NotifyResponse]) error
}

// NewClusterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClusterServiceHandler(svc ClusterServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/v1.ClusterService/PullSpecs", connect_go.NewUnaryHandler(
		"/v1.ClusterService/PullSpecs",
		svc.PullSpecs,
		opts...,
	))
	mux.Handle("/v1.ClusterService/Notify", connect_go.NewServerStreamHandler(
		"/v1.ClusterService/Notify",
		svc.Notify,
		opts...,
	))
	return "/v1.ClusterService/", mux
}

// UnimplementedClusterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClusterServiceHandler struct{}

func (UnimplementedClusterServiceHandler) PullSpecs(context.Context, *connect_go.Request[v1.PullSpecsRequest]) (*connect_go.Response[v1.PullSpecsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.ClusterService.PullSpecs is not implemented"))
}

func (UnimplementedClusterServiceHandler) Notify(context.Context, *connect_go.Request[v1.NotifyRequest], *connect_go.ServerStream[v1.NotifyResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.ClusterService.Notify is not implemented"))
}
