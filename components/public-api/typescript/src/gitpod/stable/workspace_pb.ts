/**
 * Copyright (c) 2023 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License.AGPL.txt in the project root for license information.
 */

// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file gitpod/stable/workspace.proto (package gitpod.stable, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, protoInt64, Timestamp} from "@bufbuild/protobuf";
import {Pagination} from "./pagination_pb.js";

/**
 * Admission level describes who can access a workspace instance and its ports.
 *
 * @generated from enum gitpod.stable.AdmissionLevel
 */
export enum AdmissionLevel {
  /**
   * @generated from enum value: ADMISSION_LEVEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * ADMISSION_LEVEL_OWNER_ONLY means the workspace can only be accessed using the owner token
   *
   * @generated from enum value: ADMISSION_LEVEL_OWNER_ONLY = 1;
   */
  OWNER_ONLY = 1,

  /**
   * ADMISSION_LEVEL_EVERYONE means the workspace (including ports) can be accessed by everyone.
   *
   * @generated from enum value: ADMISSION_LEVEL_EVERYONE = 2;
   */
  EVERYONE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AdmissionLevel)
proto3.util.setEnumType(AdmissionLevel, "gitpod.stable.AdmissionLevel", [
  { no: 0, name: "ADMISSION_LEVEL_UNSPECIFIED" },
  { no: 1, name: "ADMISSION_LEVEL_OWNER_ONLY" },
  { no: 2, name: "ADMISSION_LEVEL_EVERYONE" },
]);

/**
 * +resource create workspace
 *
 * @generated from message gitpod.stable.CreateAndStartWorkspaceRequest
 */
export class CreateAndStartWorkspaceRequest extends Message<CreateAndStartWorkspaceRequest> {
  /**
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: bool pinned = 3;
   */
  pinned = false;

  /**
   * @generated from oneof gitpod.stable.CreateAndStartWorkspaceRequest.source
   */
  source: {
    /**
     * @generated from field: gitpod.stable.WorkspaceContentSourceGit git = 4;
     */
    value: WorkspaceContentSourceGit;
    case: "git";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * additional_environment_variables provide additional environment variables which
   * take precedence over environment variables provided by the project and user.
   *
   * +optional
   *
   * @generated from field: repeated gitpod.stable.WorkspaceEnvironmentVariable additional_environment_variables = 5;
   */
  additionalEnvironmentVariables: WorkspaceEnvironmentVariable[] = [];

  /**
   * region specifies the region in which the workspace will be created.
   * Obtain available regions using the ListRegions operation.
   *
   * +optional defaults to the user's default region
   *
   * @generated from field: optional string region = 6;
   */
  region?: string;

  /**
   * workspace_class specifies the workspace class with which to create the workspace.
   * Obtain available workspace classes using the ListWorkspaceClass operation.
   *
   * +optional defaults to the class configured on the project or the cluster's default class.
   *
   * @generated from field: optional string workspace_class = 7;
   */
  workspaceClass?: string;

  /**
   * editor specifies the editor that will be used with this workspace.
   * Obtain available editors using the EditorService.ListEditors operation.
   *
   * +optional defaults to the default editor of the user
   *
   * @generated from field: optional gitpod.stable.EditorReference editor = 8;
   */
  editor?: EditorReference;

  constructor(data?: PartialMessage<CreateAndStartWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.CreateAndStartWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pinned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "git", kind: "message", T: WorkspaceContentSourceGit, oneof: "source" },
    { no: 5, name: "additional_environment_variables", kind: "message", T: WorkspaceEnvironmentVariable, repeated: true },
    { no: 6, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "workspace_class", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "editor", kind: "message", T: EditorReference, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAndStartWorkspaceRequest {
    return new CreateAndStartWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAndStartWorkspaceRequest {
    return new CreateAndStartWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAndStartWorkspaceRequest {
    return new CreateAndStartWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAndStartWorkspaceRequest | PlainMessage<CreateAndStartWorkspaceRequest> | undefined, b: CreateAndStartWorkspaceRequest | PlainMessage<CreateAndStartWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(CreateAndStartWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message gitpod.stable.WorkspaceContentSourceGit
 */
export class WorkspaceContentSourceGit extends Message<WorkspaceContentSourceGit> {
  /**
   * clone_url is the repository url as you would pass it to "git clone".
   * Only HTTPS clone URLs are supported.
   *
   * @generated from field: string clone_url = 1;
   */
  cloneUrl = "";

  /**
   * ref references a Git object either by its commit hash
   * or as symbolic reference https://git-scm.com/book/en/v2/Git-Internals-Git-References.
   *
   * @generated from field: string ref = 2;
   */
  ref = "";

  /**
   * create_local_branch changes the interpretation of ref. If true, the system will create
   * a local branch named ref instead of trying to check out an existing reference.
   *
   * @generated from field: bool create_local_branch = 3;
   */
  createLocalBranch = false;

  constructor(data?: PartialMessage<WorkspaceContentSourceGit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.WorkspaceContentSourceGit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clone_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "create_local_branch", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceContentSourceGit {
    return new WorkspaceContentSourceGit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceContentSourceGit {
    return new WorkspaceContentSourceGit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceContentSourceGit {
    return new WorkspaceContentSourceGit().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceContentSourceGit | PlainMessage<WorkspaceContentSourceGit> | undefined, b: WorkspaceContentSourceGit | PlainMessage<WorkspaceContentSourceGit> | undefined): boolean {
    return proto3.util.equals(WorkspaceContentSourceGit, a, b);
  }
}

/**
 * @generated from message gitpod.stable.EditorReference
 */
export class EditorReference extends Message<EditorReference> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string version = 2;
   */
  version = "";

  constructor(data?: PartialMessage<EditorReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.EditorReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditorReference {
    return new EditorReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditorReference {
    return new EditorReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditorReference {
    return new EditorReference().fromJsonString(jsonString, options);
  }

  static equals(a: EditorReference | PlainMessage<EditorReference> | undefined, b: EditorReference | PlainMessage<EditorReference> | undefined): boolean {
    return proto3.util.equals(EditorReference, a, b);
  }
}

/**
 * @generated from message gitpod.stable.WorkspaceEnvironmentVariable
 */
export class WorkspaceEnvironmentVariable extends Message<WorkspaceEnvironmentVariable> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: optional string value = 2;
   */
  value?: string;

  constructor(data?: PartialMessage<WorkspaceEnvironmentVariable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.WorkspaceEnvironmentVariable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceEnvironmentVariable {
    return new WorkspaceEnvironmentVariable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceEnvironmentVariable {
    return new WorkspaceEnvironmentVariable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceEnvironmentVariable {
    return new WorkspaceEnvironmentVariable().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceEnvironmentVariable | PlainMessage<WorkspaceEnvironmentVariable> | undefined, b: WorkspaceEnvironmentVariable | PlainMessage<WorkspaceEnvironmentVariable> | undefined): boolean {
    return proto3.util.equals(WorkspaceEnvironmentVariable, a, b);
  }
}

/**
 * @generated from message gitpod.stable.CreateAndStartWorkspaceResponse
 */
export class CreateAndStartWorkspaceResponse extends Message<CreateAndStartWorkspaceResponse> {
  /**
   * workspace_id is the ID of the workspace that was just created
   *
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  constructor(data?: PartialMessage<CreateAndStartWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.CreateAndStartWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAndStartWorkspaceResponse {
    return new CreateAndStartWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAndStartWorkspaceResponse {
    return new CreateAndStartWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAndStartWorkspaceResponse {
    return new CreateAndStartWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAndStartWorkspaceResponse | PlainMessage<CreateAndStartWorkspaceResponse> | undefined, b: CreateAndStartWorkspaceResponse | PlainMessage<CreateAndStartWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(CreateAndStartWorkspaceResponse, a, b);
  }
}

/**
 * @generated from message gitpod.stable.GetWorkspaceRequest
 */
export class GetWorkspaceRequest extends Message<GetWorkspaceRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.GetWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceRequest {
    return new GetWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceRequest {
    return new GetWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceRequest {
    return new GetWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceRequest | PlainMessage<GetWorkspaceRequest> | undefined, b: GetWorkspaceRequest | PlainMessage<GetWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message gitpod.stable.GetWorkspaceResponse
 */
export class GetWorkspaceResponse extends Message<GetWorkspaceResponse> {
  /**
   * @generated from field: gitpod.stable.Workspace item = 1;
   */
  item?: Workspace;

  constructor(data?: PartialMessage<GetWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.GetWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: Workspace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceResponse {
    return new GetWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceResponse {
    return new GetWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceResponse {
    return new GetWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceResponse | PlainMessage<GetWorkspaceResponse> | undefined, b: GetWorkspaceResponse | PlainMessage<GetWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceResponse, a, b);
  }
}

/**
 * +resource get workspace
 *
 * @generated from message gitpod.stable.Workspace
 */
export class Workspace extends Message<Workspace> {
  /**
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: bool pinned = 3;
   */
  pinned = false;

  /**
   * @generated from field: gitpod.stable.WorkspaceStatus status = 4;
   */
  status?: WorkspaceStatus;

  /**
   * additional_environment_variables provide additional environment variables which
   * take precedence over environment variables provided by the project and user.
   *
   * +optional
   *
   * @generated from field: repeated gitpod.stable.WorkspaceEnvironmentVariable additional_environment_variables = 5;
   */
  additionalEnvironmentVariables: WorkspaceEnvironmentVariable[] = [];

  /**
   * region specifies the region in which the workspace will be created.
   * Obtain available regions using the ListRegions operation.
   *
   * +optional defaults to the user's default region
   *
   * @generated from field: optional string region = 6;
   */
  region?: string;

  /**
   * workspace_class specifies the workspace class with which to create the workspace.
   * Obtain available workspace classes using the ListWorkspaceClass operation.
   *
   * +optional defaults to the class configured on the project or the cluster's default class.
   *
   * @generated from field: optional string workspace_class = 7;
   */
  workspaceClass?: string;

  /**
   * editor specifies the editor that will be used with this workspace.
   * Obtain available editors using the EditorService.ListEditors operation.
   *
   * +optional defaults to the default editor of the user
   *
   * @generated from field: optional gitpod.stable.EditorReference editor = 8;
   */
  editor?: EditorReference;

  constructor(data?: PartialMessage<Workspace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.Workspace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pinned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "status", kind: "message", T: WorkspaceStatus },
    { no: 5, name: "additional_environment_variables", kind: "message", T: WorkspaceEnvironmentVariable, repeated: true },
    { no: 6, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "workspace_class", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "editor", kind: "message", T: EditorReference, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Workspace {
    return new Workspace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Workspace {
    return new Workspace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Workspace {
    return new Workspace().fromJsonString(jsonString, options);
  }

  static equals(a: Workspace | PlainMessage<Workspace> | undefined, b: Workspace | PlainMessage<Workspace> | undefined): boolean {
    return proto3.util.equals(Workspace, a, b);
  }
}

/**
 * @generated from message gitpod.stable.WorkspaceStatus
 */
export class WorkspaceStatus extends Message<WorkspaceStatus> {
  /**
   * Phase is a simple, high-level summary of where the workspace is in its lifecycle.
   * The phase is not intended to be a comprehensive rollup of observations of the workspace state,
   * nor is it intended to be a comprehensive state machine.
   * (based on https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase)
   *
   * @generated from field: gitpod.stable.WorkspacePhase phase = 1;
   */
  phase?: WorkspacePhase;

  /**
   * message is an optional human-readable message detailing the current phase
   *
   * @generated from field: optional string message = 2;
   */
  message?: string;

  /**
   * workspace_url is the URL of the workspace. Only present when the phase is running.
   *
   * @generated from field: string workspace_url = 3;
   */
  workspaceUrl = "";

  /**
   * git_status details the Git working copy status of the workspace.
   * Note: this is a best-effort field and more often than not will not be present. Its absence does not
   * indicate the absence of a working copy.
   *
   * @generated from field: gitpod.stable.WorkspaceGitStatus git_status = 4;
   */
  gitStatus?: WorkspaceGitStatus;

  /**
   * ports lists the network ports currently available/known of this workspace
   *
   * @generated from field: repeated gitpod.stable.WorkspacePort ports = 5;
   */
  ports: WorkspacePort[] = [];

  /**
   * Admission describes who can access a workspace instance and its ports.
   *
   * @generated from field: gitpod.stable.AdmissionLevel admission = 6;
   */
  admission = AdmissionLevel.UNSPECIFIED;

  constructor(data?: PartialMessage<WorkspaceStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.WorkspaceStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "phase", kind: "message", T: WorkspacePhase },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "workspace_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "git_status", kind: "message", T: WorkspaceGitStatus },
    { no: 5, name: "ports", kind: "message", T: WorkspacePort, repeated: true },
    { no: 6, name: "admission", kind: "enum", T: proto3.getEnumType(AdmissionLevel) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceStatus {
    return new WorkspaceStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceStatus {
    return new WorkspaceStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceStatus {
    return new WorkspaceStatus().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceStatus | PlainMessage<WorkspaceStatus> | undefined, b: WorkspaceStatus | PlainMessage<WorkspaceStatus> | undefined): boolean {
    return proto3.util.equals(WorkspaceStatus, a, b);
  }
}

/**
 * @generated from message gitpod.stable.WorkspacePort
 */
export class WorkspacePort extends Message<WorkspacePort> {
  /**
   * port number
   *
   * @generated from field: uint64 port = 1;
   */
  port = protoInt64.zero;

  /**
   * policy of this port
   *
   * @generated from field: gitpod.stable.WorkspacePort.Policy policy = 2;
   */
  policy = WorkspacePort_Policy.UNSPECIFIED;

  /**
   * url that can be used to access the port
   *
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * backend protocol of this port
   *
   * @generated from field: gitpod.stable.WorkspacePort.Protocol protocol = 4;
   */
  protocol = WorkspacePort_Protocol.UNSPECIFIED;

  constructor(data?: PartialMessage<WorkspacePort>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.WorkspacePort";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "policy", kind: "enum", T: proto3.getEnumType(WorkspacePort_Policy) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "protocol", kind: "enum", T: proto3.getEnumType(WorkspacePort_Protocol) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspacePort {
    return new WorkspacePort().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspacePort {
    return new WorkspacePort().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspacePort {
    return new WorkspacePort().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspacePort | PlainMessage<WorkspacePort> | undefined, b: WorkspacePort | PlainMessage<WorkspacePort> | undefined): boolean {
    return proto3.util.equals(WorkspacePort, a, b);
  }
}

/**
 * Policy defines the accssbility policy of a workspace port is guarded by an authentication in the proxy
 *
 * @generated from enum gitpod.stable.WorkspacePort.Policy
 */
export enum WorkspacePort_Policy {
  /**
   * @generated from enum value: POLICY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Private means the port is accessible by the workspace owner only using the workspace port URL
   *
   * @generated from enum value: POLICY_PRIVATE = 1;
   */
  PRIVATE = 1,

  /**
   * Public means the port is accessible by everybody using the workspace port URL
   *
   * @generated from enum value: POLICY_PUBLIC = 2;
   */
  PUBLIC = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(WorkspacePort_Policy)
proto3.util.setEnumType(WorkspacePort_Policy, "gitpod.stable.WorkspacePort.Policy", [
  { no: 0, name: "POLICY_UNSPECIFIED" },
  { no: 1, name: "POLICY_PRIVATE" },
  { no: 2, name: "POLICY_PUBLIC" },
]);

/**
 * Protocol defines the backend protocol of port
 *
 * @generated from enum gitpod.stable.WorkspacePort.Protocol
 */
export enum WorkspacePort_Protocol {
  /**
   * @generated from enum value: PROTOCOL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Http means the port backend is http
   *
   * @generated from enum value: PROTOCOL_HTTP = 1;
   */
  HTTP = 1,

  /**
   * Https means the port backend is https
   *
   * @generated from enum value: PROTOCOL_HTTPS = 2;
   */
  HTTPS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(WorkspacePort_Protocol)
proto3.util.setEnumType(WorkspacePort_Protocol, "gitpod.stable.WorkspacePort.Protocol", [
  { no: 0, name: "PROTOCOL_UNSPECIFIED" },
  { no: 1, name: "PROTOCOL_HTTP" },
  { no: 2, name: "PROTOCOL_HTTPS" },
]);

/**
 * @generated from message gitpod.stable.WorkspaceGitStatus
 */
export class WorkspaceGitStatus extends Message<WorkspaceGitStatus> {
  /**
   * clone_url is the repository url as you would pass it to "git clone".
   * Only HTTPS clone URLs are supported.
   *
   * @generated from field: string clone_url = 1;
   */
  cloneUrl = "";

  /**
   * branch is branch we're currently on
   *
   * @generated from field: string branch = 2;
   */
  branch = "";

  /**
   * latest_commit is the most recent commit on the current branch
   *
   * @generated from field: string latest_commit = 3;
   */
  latestCommit = "";

  /**
   * uncommited_files is an array of uncommitted files, possibly truncated
   *
   * @generated from field: repeated string uncommited_files = 4;
   */
  uncommitedFiles: string[] = [];

  /**
   * the total number of uncommited files
   *
   * @generated from field: int32 total_uncommited_files = 5;
   */
  totalUncommitedFiles = 0;

  /**
   * untracked_files is an array of untracked files in the workspace, possibly truncated
   *
   * @generated from field: repeated string untracked_files = 6;
   */
  untrackedFiles: string[] = [];

  /**
   * the total number of untracked files
   *
   * @generated from field: int32 total_untracked_files = 7;
   */
  totalUntrackedFiles = 0;

  /**
   * unpushed_commits is an array of unpushed changes in the workspace, possibly truncated
   *
   * @generated from field: repeated string unpushed_commits = 8;
   */
  unpushedCommits: string[] = [];

  /**
   * the total number of unpushed changes
   *
   * @generated from field: int32 total_unpushed_commits = 9;
   */
  totalUnpushedCommits = 0;

  constructor(data?: PartialMessage<WorkspaceGitStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.WorkspaceGitStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clone_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "latest_commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "uncommited_files", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "total_uncommited_files", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "untracked_files", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "total_untracked_files", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "unpushed_commits", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "total_unpushed_commits", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceGitStatus {
    return new WorkspaceGitStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceGitStatus {
    return new WorkspaceGitStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceGitStatus {
    return new WorkspaceGitStatus().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceGitStatus | PlainMessage<WorkspaceGitStatus> | undefined, b: WorkspaceGitStatus | PlainMessage<WorkspaceGitStatus> | undefined): boolean {
    return proto3.util.equals(WorkspaceGitStatus, a, b);
  }
}

/**
 * @generated from message gitpod.stable.WorkspacePhase
 */
export class WorkspacePhase extends Message<WorkspacePhase> {
  /**
   * @generated from field: gitpod.stable.WorkspacePhase.Phase name = 1;
   */
  name = WorkspacePhase_Phase.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.Timestamp last_transition_time = 2;
   */
  lastTransitionTime?: Timestamp;

  constructor(data?: PartialMessage<WorkspacePhase>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.WorkspacePhase";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "enum", T: proto3.getEnumType(WorkspacePhase_Phase) },
    { no: 2, name: "last_transition_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspacePhase {
    return new WorkspacePhase().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspacePhase {
    return new WorkspacePhase().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspacePhase {
    return new WorkspacePhase().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspacePhase | PlainMessage<WorkspacePhase> | undefined, b: WorkspacePhase | PlainMessage<WorkspacePhase> | undefined): boolean {
    return proto3.util.equals(WorkspacePhase, a, b);
  }
}

/**
 * @generated from enum gitpod.stable.WorkspacePhase.Phase
 */
export enum WorkspacePhase_Phase {
  /**
   * Unknown indicates an issue within the workspace manager in that it cannot determine the actual phase of
   * a workspace. This phase is usually accompanied by an error.
   *
   * @generated from enum value: PHASE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Preparing means that we haven't actually started the workspace instance just yet, but rather
   * are still preparing for launch.
   *
   * @generated from enum value: PHASE_PREPARING = 1;
   */
  PREPARING = 1,

  /**
   * ImageBuild indicates that there's an image build running for this workspace.
   *
   * @generated from enum value: PHASE_IMAGEBUILD = 2;
   */
  IMAGEBUILD = 2,

  /**
   * Pending means the workspace does not yet consume resources in the cluster, but rather is looking for
   * some space within the cluster. If for example the cluster needs to scale up to accomodate the
   * workspace, the workspace will be in Pending state until that happened.
   *
   * @generated from enum value: PHASE_PENDING = 3;
   */
  PENDING = 3,

  /**
   * Creating means the workspace is currently being created. That includes downloading the images required
   * to run the workspace over the network. The time spent in this phase varies widely and depends on the current
   * network speed, image size and cache states.
   *
   * @generated from enum value: PHASE_CREATING = 4;
   */
  CREATING = 4,

  /**
   * Initializing is the phase in which the workspace is executing the appropriate workspace initializer (e.g. Git
   * clone or backup download). After this phase one can expect the workspace to either be Running or Failed.
   *
   * @generated from enum value: PHASE_INITIALIZING = 5;
   */
  INITIALIZING = 5,

  /**
   * Running means the workspace is able to actively perform work, either by serving a user through Theia,
   * or as a headless workspace.
   *
   * @generated from enum value: PHASE_RUNNING = 6;
   */
  RUNNING = 6,

  /**
   * Interrupted is an exceptional state where the container should be running but is temporarily unavailable.
   * When in this state, we expect it to become running or stopping anytime soon.
   *
   * @generated from enum value: PHASE_INTERRUPTED = 7;
   */
  INTERRUPTED = 7,

  /**
   * Stopping means that the workspace is currently shutting down. It could go to stopped every moment.
   *
   * @generated from enum value: PHASE_STOPPING = 8;
   */
  STOPPING = 8,

  /**
   * Stopped means the workspace ended regularly because it was shut down.
   *
   * @generated from enum value: PHASE_STOPPED = 9;
   */
  STOPPED = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(WorkspacePhase_Phase)
proto3.util.setEnumType(WorkspacePhase_Phase, "gitpod.stable.WorkspacePhase.Phase", [
  { no: 0, name: "PHASE_UNSPECIFIED" },
  { no: 1, name: "PHASE_PREPARING" },
  { no: 2, name: "PHASE_IMAGEBUILD" },
  { no: 3, name: "PHASE_PENDING" },
  { no: 4, name: "PHASE_CREATING" },
  { no: 5, name: "PHASE_INITIALIZING" },
  { no: 6, name: "PHASE_RUNNING" },
  { no: 7, name: "PHASE_INTERRUPTED" },
  { no: 8, name: "PHASE_STOPPING" },
  { no: 9, name: "PHASE_STOPPED" },
]);

/**
 * @generated from message gitpod.stable.ListWorkspacesRequest
 */
export class ListWorkspacesRequest extends Message<ListWorkspacesRequest> {
  /**
   * pagination paginates through the result list.
   *
   * @generated from field: optional gitpod.stable.Pagination pagination = 1;
   */
  pagination?: Pagination;

  /**
   * @generated from field: string organization_id = 2;
   */
  organizationId = "";

  /**
   * search_string returns only workspaces which contain the search_string
   * in their name or Git status.
   *
   * @generated from field: optional string search_string = 3;
   */
  searchString?: string;

  /**
   * pinned_only returns only pinned workspaces.
   *
   * @generated from field: optional bool pinned_only = 4;
   */
  pinnedOnly?: boolean;

  /**
   * project_id reduces the result set to only workspaces within the referenced project
   *
   * @generated from field: optional string project_id = 5;
   */
  projectId?: string;

  constructor(data?: PartialMessage<ListWorkspacesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.ListWorkspacesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: Pagination, opt: true },
    { no: 2, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "search_string", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "pinned_only", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWorkspacesRequest {
    return new ListWorkspacesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWorkspacesRequest {
    return new ListWorkspacesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWorkspacesRequest {
    return new ListWorkspacesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListWorkspacesRequest | PlainMessage<ListWorkspacesRequest> | undefined, b: ListWorkspacesRequest | PlainMessage<ListWorkspacesRequest> | undefined): boolean {
    return proto3.util.equals(ListWorkspacesRequest, a, b);
  }
}

/**
 * @generated from message gitpod.stable.ListWorkspacesResponse
 */
export class ListWorkspacesResponse extends Message<ListWorkspacesResponse> {
  /**
   * @generated from field: repeated gitpod.stable.Workspace items = 1;
   */
  items: Workspace[] = [];

  constructor(data?: PartialMessage<ListWorkspacesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.ListWorkspacesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Workspace, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWorkspacesResponse {
    return new ListWorkspacesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWorkspacesResponse {
    return new ListWorkspacesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWorkspacesResponse {
    return new ListWorkspacesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListWorkspacesResponse | PlainMessage<ListWorkspacesResponse> | undefined, b: ListWorkspacesResponse | PlainMessage<ListWorkspacesResponse> | undefined): boolean {
    return proto3.util.equals(ListWorkspacesResponse, a, b);
  }
}

/**
 * @generated from message gitpod.stable.StartWorkspaceRequest
 */
export class StartWorkspaceRequest extends Message<StartWorkspaceRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<StartWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.StartWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartWorkspaceRequest {
    return new StartWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartWorkspaceRequest {
    return new StartWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartWorkspaceRequest {
    return new StartWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartWorkspaceRequest | PlainMessage<StartWorkspaceRequest> | undefined, b: StartWorkspaceRequest | PlainMessage<StartWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(StartWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message gitpod.stable.StartWorkspaceResponse
 */
export class StartWorkspaceResponse extends Message<StartWorkspaceResponse> {
  constructor(data?: PartialMessage<StartWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.StartWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartWorkspaceResponse {
    return new StartWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartWorkspaceResponse {
    return new StartWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartWorkspaceResponse {
    return new StartWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartWorkspaceResponse | PlainMessage<StartWorkspaceResponse> | undefined, b: StartWorkspaceResponse | PlainMessage<StartWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(StartWorkspaceResponse, a, b);
  }
}

/**
 * @generated from message gitpod.stable.StopWorkspaceRequest
 */
export class StopWorkspaceRequest extends Message<StopWorkspaceRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<StopWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.StopWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopWorkspaceRequest {
    return new StopWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopWorkspaceRequest {
    return new StopWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopWorkspaceRequest {
    return new StopWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopWorkspaceRequest | PlainMessage<StopWorkspaceRequest> | undefined, b: StopWorkspaceRequest | PlainMessage<StopWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(StopWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message gitpod.stable.StopWorkspaceResponse
 */
export class StopWorkspaceResponse extends Message<StopWorkspaceResponse> {
  constructor(data?: PartialMessage<StopWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.StopWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopWorkspaceResponse {
    return new StopWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopWorkspaceResponse {
    return new StopWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopWorkspaceResponse {
    return new StopWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StopWorkspaceResponse | PlainMessage<StopWorkspaceResponse> | undefined, b: StopWorkspaceResponse | PlainMessage<StopWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(StopWorkspaceResponse, a, b);
  }
}

/**
 * @generated from message gitpod.stable.UpdateWorkspacePortRequest
 */
export class UpdateWorkspacePortRequest extends Message<UpdateWorkspacePortRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: gitpod.stable.WorkspacePort port = 2;
   */
  port?: WorkspacePort;

  constructor(data?: PartialMessage<UpdateWorkspacePortRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.UpdateWorkspacePortRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "message", T: WorkspacePort },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWorkspacePortRequest {
    return new UpdateWorkspacePortRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWorkspacePortRequest {
    return new UpdateWorkspacePortRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWorkspacePortRequest {
    return new UpdateWorkspacePortRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateWorkspacePortRequest | PlainMessage<UpdateWorkspacePortRequest> | undefined, b: UpdateWorkspacePortRequest | PlainMessage<UpdateWorkspacePortRequest> | undefined): boolean {
    return proto3.util.equals(UpdateWorkspacePortRequest, a, b);
  }
}

/**
 * @generated from message gitpod.stable.UpdateWorkspacePortResponse
 */
export class UpdateWorkspacePortResponse extends Message<UpdateWorkspacePortResponse> {
  constructor(data?: PartialMessage<UpdateWorkspacePortResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.UpdateWorkspacePortResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWorkspacePortResponse {
    return new UpdateWorkspacePortResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWorkspacePortResponse {
    return new UpdateWorkspacePortResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWorkspacePortResponse {
    return new UpdateWorkspacePortResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateWorkspacePortResponse | PlainMessage<UpdateWorkspacePortResponse> | undefined, b: UpdateWorkspacePortResponse | PlainMessage<UpdateWorkspacePortResponse> | undefined): boolean {
    return proto3.util.equals(UpdateWorkspacePortResponse, a, b);
  }
}
