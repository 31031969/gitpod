/**
 * Copyright (c) 2023 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License.AGPL.txt in the project root for license information.
 */

// @generated by protoc-gen-connect-web v0.2.1 with parameter "target=ts"
// @generated from file gitpod/stable/workspace.proto (package gitpod.stable, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {CreateAndStartWorkspaceRequest, CreateAndStartWorkspaceResponse, GetWorkspaceRequest, GetWorkspaceResponse, ListWorkspacesRequest, ListWorkspacesResponse, StartWorkspaceRequest, StartWorkspaceResponse, StopWorkspaceRequest, StopWorkspaceResponse, UpdateWorkspacePortRequest, UpdateWorkspacePortResponse} from "./workspace_pb.js";
import {MethodKind} from "@bufbuild/protobuf";

/**
 * @generated from service gitpod.stable.WorkspaceService
 */
export const WorkspaceService = {
  typeName: "gitpod.stable.WorkspaceService",
  methods: {
    /**
     * CreateAndStartWorkspace creates a new workspace and starts it
     *
     * +return NOT_FOUND User cannot access the Git repository itself
     * +return NOT_FOUND The referenced gitpod.yml file doesnâ€™t exist
     * +return PERMISSION_DENIED User is not allowed to create a workspace on the repo/project
     * +return INVALID_ARGUMENT Any of the parameters/values is passed is invalid. The message details which one.
     * +return FAILED_PRECONDITION The .gitpod.yml is invalid
     * +return FAILED_PRECONDITION Configuration cannot be assembled or is invalid
     *
     * @generated from rpc gitpod.stable.WorkspaceService.CreateAndStartWorkspace
     */
    createAndStartWorkspace: {
      name: "CreateAndStartWorkspace",
      I: CreateAndStartWorkspaceRequest,
      O: CreateAndStartWorkspaceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetWorkspace returns a single workspace.
     *
     * +return NOT_FOUND User does not have access to a workspace with the given ID
     * +return NOT_FOUND Workspace does not exist
     *
     * @generated from rpc gitpod.stable.WorkspaceService.GetWorkspace
     */
    getWorkspace: {
      name: "GetWorkspace",
      I: GetWorkspaceRequest,
      O: GetWorkspaceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListWorkspaces returns all workspaces matching the provided filters.
     * The individual filters are "AND'ed", i.e. specifying an additional filter reduces the result set.
     *
     * +return OK
     *
     * @generated from rpc gitpod.stable.WorkspaceService.ListWorkspaces
     */
    listWorkspaces: {
      name: "ListWorkspaces",
      I: ListWorkspacesRequest,
      O: ListWorkspacesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * StartWorkspace starts an existing workspace.
     *
     * +return NOT_FOUND User does not have access to a workspace with the given ID
     * +return NOT_FOUND Workspace does not exist
     * +return FAILED_PRECONDITION Workspace is not in a phase where it can be started.
     *
     * @generated from rpc gitpod.stable.WorkspaceService.StartWorkspace
     */
    startWorkspace: {
      name: "StartWorkspace",
      I: StartWorkspaceRequest,
      O: StartWorkspaceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * StopWorkspace stops a running workspace (instance).
     *
     * +return NOT_FOUND  User does not have access to a workspace with the given ID
     * +return NOT_FOUND Workspace does not exist
     * +return FAILED_PRECONDITION Workspace is not in a phase where it can be started.
     *
     * @generated from rpc gitpod.stable.WorkspaceService.StopWorkspace
     */
    stopWorkspace: {
      name: "StopWorkspace",
      I: StopWorkspaceRequest,
      O: StopWorkspaceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateWorkspacePort changes the behaviour of a workspace port.
     *
     * +return NOT_FOUND  User does not have access to a workspace with the given ID
     * +return NOT_FOUND Workspace does not exist
     * +return PERMISSION_DENIED User is not allowed to update a port on this workspace
     * +return INVALID_ARGUMENT Any of the parameters/values is passed is invalid. The message details which one.
     *
     * @generated from rpc gitpod.stable.WorkspaceService.UpdateWorkspacePort
     */
    updateWorkspacePort: {
      name: "UpdateWorkspacePort",
      I: UpdateWorkspacePortRequest,
      O: UpdateWorkspacePortResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;
