/**
 * Copyright (c) 2023 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License.AGPL.txt in the project root for license information.
 */

// @generated by protoc-gen-connect-es v1.1.2 with parameter "target=ts"
// @generated from file gitpod/v1/cluster.proto (package gitpod.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { GetClusterWorkspacesRequest, GetClusterWorkspacesResponse, RegisterClusterRequest, RegisterClusterResponse, RenewClusterRegistrationRequest, RenewClusterRegistrationResponse, UpdateClusterWorkspaceStatusRequest, UpdateClusterWorkspaceStatusResponse } from "./cluster_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service gitpod.v1.ClusterService
 */
export const ClusterService = {
  typeName: "gitpod.v1.ClusterService",
  methods: {
    /**
     * RegisterCluster registers a new cluster with the server. Registrations are very
     * short-lived and must be renewed every 30 seconds. Clusters can be registered for
     * an entire organisation or a single user.
     *
     * @generated from rpc gitpod.v1.ClusterService.RegisterCluster
     */
    registerCluster: {
      name: "RegisterCluster",
      I: RegisterClusterRequest,
      O: RegisterClusterResponse,
      kind: MethodKind.Unary,
    },
    /**
     * RenewClusterRegistration renews a cluster's registration. This must be called every 30 seconds
     * to keep the cluster registered.
     *
     * @generated from rpc gitpod.v1.ClusterService.RenewClusterRegistration
     */
    renewClusterRegistration: {
      name: "RenewClusterRegistration",
      I: RenewClusterRegistrationRequest,
      O: RenewClusterRegistrationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetClusterWorkspaces returns the workspaces running on a cluster.
     *
     * @generated from rpc gitpod.v1.ClusterService.GetClusterWorkspaces
     */
    getClusterWorkspaces: {
      name: "GetClusterWorkspaces",
      I: GetClusterWorkspacesRequest,
      O: GetClusterWorkspacesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateClusterWorkspaceStatus updates the status of a workspace running on a cluster.
     *
     * @generated from rpc gitpod.v1.ClusterService.UpdateClusterWorkspaceStatus
     */
    updateClusterWorkspaceStatus: {
      name: "UpdateClusterWorkspaceStatus",
      I: UpdateClusterWorkspaceStatusRequest,
      O: UpdateClusterWorkspaceStatusResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;
