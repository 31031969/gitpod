/**
 * Copyright (c) 2023 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License.AGPL.txt in the project root for license information.
 */

// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file gitpod/v1/workspace_runner.proto (package gitpod.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { PaginationRequest, PaginationResponse } from "./pagination_pb.js";
import { Workspace, WorkspaceMetadata, WorkspacePhase_Phase, WorkspaceSpec, WorkspaceStatus } from "./workspace_pb.js";

/**
 * @generated from message gitpod.v1.RegisterRunnerRequest
 */
export class RegisterRunnerRequest extends Message<RegisterRunnerRequest> {
  /**
   * The cluster's scope
   *
   * @generated from oneof gitpod.v1.RegisterRunnerRequest.scope
   */
  scope: {
    /**
     * @generated from field: string organization_id = 1;
     */
    value: string;
    case: "organizationId";
  } | {
    /**
     * @generated from field: string user_id = 2;
     */
    value: string;
    case: "userId";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * The cluster's type
   *
   * @generated from field: gitpod.v1.RegisterRunnerRequest.RunnerType type = 3;
   */
  type = RegisterRunnerRequest_RunnerType.UNSPECIFIED;

  /**
   * The cluster's name which is shown to users
   *
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * The workspace classes this cluster has to offer
   *
   * @generated from field: repeated gitpod.v1.RegisterRunnerRequest.WorkspaceClass workspace_classes = 5;
   */
  workspaceClasses: RegisterRunnerRequest_WorkspaceClass[] = [];

  constructor(data?: PartialMessage<RegisterRunnerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.RegisterRunnerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "scope" },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "scope" },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(RegisterRunnerRequest_RunnerType) },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "workspace_classes", kind: "message", T: RegisterRunnerRequest_WorkspaceClass, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterRunnerRequest {
    return new RegisterRunnerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterRunnerRequest {
    return new RegisterRunnerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterRunnerRequest {
    return new RegisterRunnerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterRunnerRequest | PlainMessage<RegisterRunnerRequest> | undefined, b: RegisterRunnerRequest | PlainMessage<RegisterRunnerRequest> | undefined): boolean {
    return proto3.util.equals(RegisterRunnerRequest, a, b);
  }
}

/**
 * @generated from enum gitpod.v1.RegisterRunnerRequest.RunnerType
 */
export enum RegisterRunnerRequest_RunnerType {
  /**
   * Runner type is not set
   *
   * @generated from enum value: RUNNER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The cluster is a local workspace runner running on a user's machine. It
   * can only run workspaces of a single tenant (the user themselves) at a time.
   *
   * @generated from enum value: RUNNER_TYPE_LOCAL = 1;
   */
  LOCAL = 1,

  /**
   * The cluster is a Cloud workspace cluster which is managed by Gitpod
   * and can run multiple tenants.
   *
   * @generated from enum value: RUNNER_TYPE_MULTI_TENANT = 2;
   */
  MULTI_TENANT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(RegisterRunnerRequest_RunnerType)
proto3.util.setEnumType(RegisterRunnerRequest_RunnerType, "gitpod.v1.RegisterRunnerRequest.RunnerType", [
  { no: 0, name: "RUNNER_TYPE_UNSPECIFIED" },
  { no: 1, name: "RUNNER_TYPE_LOCAL" },
  { no: 2, name: "RUNNER_TYPE_MULTI_TENANT" },
]);

/**
 * @generated from message gitpod.v1.RegisterRunnerRequest.WorkspaceClass
 */
export class RegisterRunnerRequest_WorkspaceClass extends Message<RegisterRunnerRequest_WorkspaceClass> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<RegisterRunnerRequest_WorkspaceClass>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.RegisterRunnerRequest.WorkspaceClass";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterRunnerRequest_WorkspaceClass {
    return new RegisterRunnerRequest_WorkspaceClass().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterRunnerRequest_WorkspaceClass {
    return new RegisterRunnerRequest_WorkspaceClass().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterRunnerRequest_WorkspaceClass {
    return new RegisterRunnerRequest_WorkspaceClass().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterRunnerRequest_WorkspaceClass | PlainMessage<RegisterRunnerRequest_WorkspaceClass> | undefined, b: RegisterRunnerRequest_WorkspaceClass | PlainMessage<RegisterRunnerRequest_WorkspaceClass> | undefined): boolean {
    return proto3.util.equals(RegisterRunnerRequest_WorkspaceClass, a, b);
  }
}

/**
 * @generated from message gitpod.v1.RegisterRunnerResponse
 */
export class RegisterRunnerResponse extends Message<RegisterRunnerResponse> {
  /**
   * The cluster's ID which identifies the cluster and must be used
   * in all subsequent requests.
   *
   * @generated from field: string cluster_id = 1;
   */
  clusterId = "";

  constructor(data?: PartialMessage<RegisterRunnerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.RegisterRunnerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterRunnerResponse {
    return new RegisterRunnerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterRunnerResponse {
    return new RegisterRunnerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterRunnerResponse {
    return new RegisterRunnerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterRunnerResponse | PlainMessage<RegisterRunnerResponse> | undefined, b: RegisterRunnerResponse | PlainMessage<RegisterRunnerResponse> | undefined): boolean {
    return proto3.util.equals(RegisterRunnerResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.RenewRunnerRegistrationRequest
 */
export class RenewRunnerRegistrationRequest extends Message<RenewRunnerRegistrationRequest> {
  /**
   * The cluster's identity
   *
   * @generated from field: string cluster_id = 1;
   */
  clusterId = "";

  constructor(data?: PartialMessage<RenewRunnerRegistrationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.RenewRunnerRegistrationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenewRunnerRegistrationRequest {
    return new RenewRunnerRegistrationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenewRunnerRegistrationRequest {
    return new RenewRunnerRegistrationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenewRunnerRegistrationRequest {
    return new RenewRunnerRegistrationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenewRunnerRegistrationRequest | PlainMessage<RenewRunnerRegistrationRequest> | undefined, b: RenewRunnerRegistrationRequest | PlainMessage<RenewRunnerRegistrationRequest> | undefined): boolean {
    return proto3.util.equals(RenewRunnerRegistrationRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.RenewRunnerRegistrationResponse
 */
export class RenewRunnerRegistrationResponse extends Message<RenewRunnerRegistrationResponse> {
  constructor(data?: PartialMessage<RenewRunnerRegistrationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.RenewRunnerRegistrationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenewRunnerRegistrationResponse {
    return new RenewRunnerRegistrationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenewRunnerRegistrationResponse {
    return new RenewRunnerRegistrationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenewRunnerRegistrationResponse {
    return new RenewRunnerRegistrationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RenewRunnerRegistrationResponse | PlainMessage<RenewRunnerRegistrationResponse> | undefined, b: RenewRunnerRegistrationResponse | PlainMessage<RenewRunnerRegistrationResponse> | undefined): boolean {
    return proto3.util.equals(RenewRunnerRegistrationResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.ListRunnerWorkspacesRequest
 */
export class ListRunnerWorkspacesRequest extends Message<ListRunnerWorkspacesRequest> {
  /**
   * pagination contains the pagination options for listing workspaces
   *
   * @generated from field: gitpod.v1.PaginationRequest pagination = 1;
   */
  pagination?: PaginationRequest;

  /**
   * The cluster's identity
   *
   * @generated from field: string cluster_id = 2;
   */
  clusterId = "";

  /**
   * An optional list of workspace IDs to fetch. If this list is empty/not provided
   * all workspaces that ought to run on the cluster are returned.
   *
   * @generated from field: repeated string workspace_ids = 3;
   */
  workspaceIds: string[] = [];

  constructor(data?: PartialMessage<ListRunnerWorkspacesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.ListRunnerWorkspacesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PaginationRequest },
    { no: 2, name: "cluster_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "workspace_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRunnerWorkspacesRequest {
    return new ListRunnerWorkspacesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRunnerWorkspacesRequest {
    return new ListRunnerWorkspacesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRunnerWorkspacesRequest {
    return new ListRunnerWorkspacesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRunnerWorkspacesRequest | PlainMessage<ListRunnerWorkspacesRequest> | undefined, b: ListRunnerWorkspacesRequest | PlainMessage<ListRunnerWorkspacesRequest> | undefined): boolean {
    return proto3.util.equals(ListRunnerWorkspacesRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.RunnerWorkspace
 */
export class RunnerWorkspace extends Message<RunnerWorkspace> {
  /**
   * ID is a unique identifier of this workspace. No other workspace with the same name must be managed by this workspace manager
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Metadata is data associated with this workspace that's required for other parts of Gitpod to function
   *
   * @generated from field: gitpod.v1.WorkspaceMetadata metadata = 2;
   */
  metadata?: WorkspaceMetadata;

  /**
   * Spec is the configuration of the workspace that's required for the ws-manager to start the workspace
   *
   * @generated from field: gitpod.v1.WorkspaceSpec spec = 3;
   */
  spec?: WorkspaceSpec;

  /**
   * Phase is the desired phase of the workspace
   *
   * @generated from field: gitpod.v1.WorkspacePhase.Phase desired_phase = 5;
   */
  desiredPhase = WorkspacePhase_Phase.UNSPECIFIED;

  constructor(data?: PartialMessage<RunnerWorkspace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.RunnerWorkspace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: WorkspaceMetadata },
    { no: 3, name: "spec", kind: "message", T: WorkspaceSpec },
    { no: 5, name: "desired_phase", kind: "enum", T: proto3.getEnumType(WorkspacePhase_Phase) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunnerWorkspace {
    return new RunnerWorkspace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunnerWorkspace {
    return new RunnerWorkspace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunnerWorkspace {
    return new RunnerWorkspace().fromJsonString(jsonString, options);
  }

  static equals(a: RunnerWorkspace | PlainMessage<RunnerWorkspace> | undefined, b: RunnerWorkspace | PlainMessage<RunnerWorkspace> | undefined): boolean {
    return proto3.util.equals(RunnerWorkspace, a, b);
  }
}

/**
 * @generated from message gitpod.v1.ListRunnerWorkspacesResponse
 */
export class ListRunnerWorkspacesResponse extends Message<ListRunnerWorkspacesResponse> {
  /**
   * pagination contains the pagination options for listing workspaces
   *
   * @generated from field: gitpod.v1.PaginationResponse pagination = 1;
   */
  pagination?: PaginationResponse;

  /**
   * The workspaces running on the cluster
   *
   * @generated from field: repeated gitpod.v1.RunnerWorkspace workspaces = 2;
   */
  workspaces: RunnerWorkspace[] = [];

  constructor(data?: PartialMessage<ListRunnerWorkspacesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.ListRunnerWorkspacesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PaginationResponse },
    { no: 2, name: "workspaces", kind: "message", T: RunnerWorkspace, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRunnerWorkspacesResponse {
    return new ListRunnerWorkspacesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRunnerWorkspacesResponse {
    return new ListRunnerWorkspacesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRunnerWorkspacesResponse {
    return new ListRunnerWorkspacesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListRunnerWorkspacesResponse | PlainMessage<ListRunnerWorkspacesResponse> | undefined, b: ListRunnerWorkspacesResponse | PlainMessage<ListRunnerWorkspacesResponse> | undefined): boolean {
    return proto3.util.equals(ListRunnerWorkspacesResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.WatchRunnerWorkspacesRequest
 */
export class WatchRunnerWorkspacesRequest extends Message<WatchRunnerWorkspacesRequest> {
  /**
   * The cluster's identity
   *
   * @generated from field: string cluster_id = 1;
   */
  clusterId = "";

  constructor(data?: PartialMessage<WatchRunnerWorkspacesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WatchRunnerWorkspacesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchRunnerWorkspacesRequest {
    return new WatchRunnerWorkspacesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchRunnerWorkspacesRequest {
    return new WatchRunnerWorkspacesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchRunnerWorkspacesRequest {
    return new WatchRunnerWorkspacesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WatchRunnerWorkspacesRequest | PlainMessage<WatchRunnerWorkspacesRequest> | undefined, b: WatchRunnerWorkspacesRequest | PlainMessage<WatchRunnerWorkspacesRequest> | undefined): boolean {
    return proto3.util.equals(WatchRunnerWorkspacesRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.WatchRunnerWorkspacesResponse
 */
export class WatchRunnerWorkspacesResponse extends Message<WatchRunnerWorkspacesResponse> {
  /**
   * The cluster's identity
   *
   * @generated from field: string cluster_id = 1;
   */
  clusterId = "";

  /**
   * The workspace's ID
   *
   * @generated from field: gitpod.v1.Workspace workspace = 2;
   */
  workspace?: Workspace;

  constructor(data?: PartialMessage<WatchRunnerWorkspacesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WatchRunnerWorkspacesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workspace", kind: "message", T: Workspace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchRunnerWorkspacesResponse {
    return new WatchRunnerWorkspacesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchRunnerWorkspacesResponse {
    return new WatchRunnerWorkspacesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchRunnerWorkspacesResponse {
    return new WatchRunnerWorkspacesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WatchRunnerWorkspacesResponse | PlainMessage<WatchRunnerWorkspacesResponse> | undefined, b: WatchRunnerWorkspacesResponse | PlainMessage<WatchRunnerWorkspacesResponse> | undefined): boolean {
    return proto3.util.equals(WatchRunnerWorkspacesResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.UpdateRunnerWorkspaceStatusRequest
 */
export class UpdateRunnerWorkspaceStatusRequest extends Message<UpdateRunnerWorkspaceStatusRequest> {
  /**
   * The cluster's identity
   *
   * @generated from field: string cluster_id = 1;
   */
  clusterId = "";

  /**
   * The workspace's ID
   *
   * @generated from field: string workspace_id = 2;
   */
  workspaceId = "";

  /**
   * @generated from oneof gitpod.v1.UpdateRunnerWorkspaceStatusRequest.update
   */
  update: {
    /**
     * The workspace's status
     *
     * @generated from field: gitpod.v1.WorkspaceStatus status = 3;
     */
    value: WorkspaceStatus;
    case: "status";
  } | {
    /**
     * The workspace's status
     *
     * @generated from field: gitpod.v1.UpdateRunnerWorkspaceStatusRequest.WorkspaceACK ack = 4;
     */
    value: UpdateRunnerWorkspaceStatusRequest_WorkspaceACK;
    case: "ack";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<UpdateRunnerWorkspaceStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.UpdateRunnerWorkspaceStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "status", kind: "message", T: WorkspaceStatus, oneof: "update" },
    { no: 4, name: "ack", kind: "message", T: UpdateRunnerWorkspaceStatusRequest_WorkspaceACK, oneof: "update" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRunnerWorkspaceStatusRequest {
    return new UpdateRunnerWorkspaceStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRunnerWorkspaceStatusRequest {
    return new UpdateRunnerWorkspaceStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRunnerWorkspaceStatusRequest {
    return new UpdateRunnerWorkspaceStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRunnerWorkspaceStatusRequest | PlainMessage<UpdateRunnerWorkspaceStatusRequest> | undefined, b: UpdateRunnerWorkspaceStatusRequest | PlainMessage<UpdateRunnerWorkspaceStatusRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRunnerWorkspaceStatusRequest, a, b);
  }
}

/**
 * WorkspaceACK is a simple acknowledgement of a workspace status update
 *
 * @generated from message gitpod.v1.UpdateRunnerWorkspaceStatusRequest.WorkspaceACK
 */
export class UpdateRunnerWorkspaceStatusRequest_WorkspaceACK extends Message<UpdateRunnerWorkspaceStatusRequest_WorkspaceACK> {
  /**
   * @generated from field: gitpod.v1.UpdateRunnerWorkspaceStatusRequest.WorkspaceACK.StatusCode status_code = 1;
   */
  statusCode = UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode.UNSPECIFIED;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<UpdateRunnerWorkspaceStatusRequest_WorkspaceACK>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.UpdateRunnerWorkspaceStatusRequest.WorkspaceACK";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status_code", kind: "enum", T: proto3.getEnumType(UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode) },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRunnerWorkspaceStatusRequest_WorkspaceACK {
    return new UpdateRunnerWorkspaceStatusRequest_WorkspaceACK().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRunnerWorkspaceStatusRequest_WorkspaceACK {
    return new UpdateRunnerWorkspaceStatusRequest_WorkspaceACK().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRunnerWorkspaceStatusRequest_WorkspaceACK {
    return new UpdateRunnerWorkspaceStatusRequest_WorkspaceACK().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRunnerWorkspaceStatusRequest_WorkspaceACK | PlainMessage<UpdateRunnerWorkspaceStatusRequest_WorkspaceACK> | undefined, b: UpdateRunnerWorkspaceStatusRequest_WorkspaceACK | PlainMessage<UpdateRunnerWorkspaceStatusRequest_WorkspaceACK> | undefined): boolean {
    return proto3.util.equals(UpdateRunnerWorkspaceStatusRequest_WorkspaceACK, a, b);
  }
}

/**
 * @generated from enum gitpod.v1.UpdateRunnerWorkspaceStatusRequest.WorkspaceACK.StatusCode
 */
export enum UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode {
  /**
   * @generated from enum value: STATUS_CODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STATUS_CODE_UNKNOWN = 1;
   */
  UNKNOWN = 1,

  /**
   * @generated from enum value: STATUS_CODE_OK = 2;
   */
  OK = 2,

  /**
   * @generated from enum value: STATUS_CODE_INVALID_RESOURCE = 3;
   */
  INVALID_RESOURCE = 3,

  /**
   * @generated from enum value: STATUS_CODE_FAILED_PRECONDITION = 4;
   */
  FAILED_PRECONDITION = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode)
proto3.util.setEnumType(UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode, "gitpod.v1.UpdateRunnerWorkspaceStatusRequest.WorkspaceACK.StatusCode", [
  { no: 0, name: "STATUS_CODE_UNSPECIFIED" },
  { no: 1, name: "STATUS_CODE_UNKNOWN" },
  { no: 2, name: "STATUS_CODE_OK" },
  { no: 3, name: "STATUS_CODE_INVALID_RESOURCE" },
  { no: 4, name: "STATUS_CODE_FAILED_PRECONDITION" },
]);

/**
 * @generated from message gitpod.v1.UpdateRunnerWorkspaceStatusResponse
 */
export class UpdateRunnerWorkspaceStatusResponse extends Message<UpdateRunnerWorkspaceStatusResponse> {
  constructor(data?: PartialMessage<UpdateRunnerWorkspaceStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.UpdateRunnerWorkspaceStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRunnerWorkspaceStatusResponse {
    return new UpdateRunnerWorkspaceStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRunnerWorkspaceStatusResponse {
    return new UpdateRunnerWorkspaceStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRunnerWorkspaceStatusResponse {
    return new UpdateRunnerWorkspaceStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRunnerWorkspaceStatusResponse | PlainMessage<UpdateRunnerWorkspaceStatusResponse> | undefined, b: UpdateRunnerWorkspaceStatusResponse | PlainMessage<UpdateRunnerWorkspaceStatusResponse> | undefined): boolean {
    return proto3.util.equals(UpdateRunnerWorkspaceStatusResponse, a, b);
  }
}
