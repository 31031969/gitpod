/**
 * Copyright (c) 2023 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License.AGPL.txt in the project root for license information.
 */

// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file gitpod/v1/cluster.proto (package gitpod.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { PaginationRequest, PaginationResponse } from "./pagination_pb.js";
import { AdmissionLevel, WorkspaceGitStatus, WorkspacePhase_Phase, WorkspacePort } from "./workspace_pb.js";

/**
 * @generated from message gitpod.v1.RegisterClusterRequest
 */
export class RegisterClusterRequest extends Message<RegisterClusterRequest> {
  /**
   * The cluster's ID - must be unique within the scope
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The cluster's scope
   *
   * @generated from field: gitpod.v1.RegisterClusterRequest.Scope scope = 2;
   */
  scope = RegisterClusterRequest_Scope.UNSPECIFIED;

  /**
   * The cluster's type
   *
   * @generated from field: gitpod.v1.RegisterClusterRequest.ClusterType type = 3;
   */
  type = RegisterClusterRequest_ClusterType.UNSPECIFIED;

  /**
   * The cluster's name which is shown to users
   *
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * The workspace classes this cluster has to offer
   *
   * @generated from field: repeated gitpod.v1.RegisterClusterRequest.WorkspaceClass workspace_classes = 5;
   */
  workspaceClasses: RegisterClusterRequest_WorkspaceClass[] = [];

  constructor(data?: PartialMessage<RegisterClusterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.RegisterClusterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "scope", kind: "enum", T: proto3.getEnumType(RegisterClusterRequest_Scope) },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(RegisterClusterRequest_ClusterType) },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "workspace_classes", kind: "message", T: RegisterClusterRequest_WorkspaceClass, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterClusterRequest {
    return new RegisterClusterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterClusterRequest {
    return new RegisterClusterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterClusterRequest {
    return new RegisterClusterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterClusterRequest | PlainMessage<RegisterClusterRequest> | undefined, b: RegisterClusterRequest | PlainMessage<RegisterClusterRequest> | undefined): boolean {
    return proto3.util.equals(RegisterClusterRequest, a, b);
  }
}

/**
 * @generated from enum gitpod.v1.RegisterClusterRequest.Scope
 */
export enum RegisterClusterRequest_Scope {
  /**
   * Scope is not set
   *
   * @generated from enum value: SCOPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The cluster is registered for an entire organisation
   *
   * @generated from enum value: SCOPE_ORGANIZATION = 1;
   */
  ORGANIZATION = 1,

  /**
   * The cluster is registered for a single user
   *
   * @generated from enum value: SCOPE_USER = 2;
   */
  USER = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(RegisterClusterRequest_Scope)
proto3.util.setEnumType(RegisterClusterRequest_Scope, "gitpod.v1.RegisterClusterRequest.Scope", [
  { no: 0, name: "SCOPE_UNSPECIFIED" },
  { no: 1, name: "SCOPE_ORGANIZATION" },
  { no: 2, name: "SCOPE_USER" },
]);

/**
 * @generated from enum gitpod.v1.RegisterClusterRequest.ClusterType
 */
export enum RegisterClusterRequest_ClusterType {
  /**
   * Cluster type is not set
   *
   * @generated from enum value: CLUSTER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The cluster is a local workspace runner running on a user's machine. It
   * can only run workspaces of a single tenant (the user themselves) at a time.
   *
   * @generated from enum value: CLUSTER_TYPE_LOCAL = 1;
   */
  LOCAL = 1,

  /**
   * The cluster is a Cloud workspace cluster which is managed by Gitpod
   * and can run multiple tenants.
   *
   * @generated from enum value: CLUSTER_TYPE_MULTI_TENANT = 2;
   */
  MULTI_TENANT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(RegisterClusterRequest_ClusterType)
proto3.util.setEnumType(RegisterClusterRequest_ClusterType, "gitpod.v1.RegisterClusterRequest.ClusterType", [
  { no: 0, name: "CLUSTER_TYPE_UNSPECIFIED" },
  { no: 1, name: "CLUSTER_TYPE_LOCAL" },
  { no: 2, name: "CLUSTER_TYPE_MULTI_TENANT" },
]);

/**
 * @generated from message gitpod.v1.RegisterClusterRequest.WorkspaceClass
 */
export class RegisterClusterRequest_WorkspaceClass extends Message<RegisterClusterRequest_WorkspaceClass> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<RegisterClusterRequest_WorkspaceClass>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.RegisterClusterRequest.WorkspaceClass";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterClusterRequest_WorkspaceClass {
    return new RegisterClusterRequest_WorkspaceClass().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterClusterRequest_WorkspaceClass {
    return new RegisterClusterRequest_WorkspaceClass().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterClusterRequest_WorkspaceClass {
    return new RegisterClusterRequest_WorkspaceClass().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterClusterRequest_WorkspaceClass | PlainMessage<RegisterClusterRequest_WorkspaceClass> | undefined, b: RegisterClusterRequest_WorkspaceClass | PlainMessage<RegisterClusterRequest_WorkspaceClass> | undefined): boolean {
    return proto3.util.equals(RegisterClusterRequest_WorkspaceClass, a, b);
  }
}

/**
 * @generated from message gitpod.v1.RegisterClusterResponse
 */
export class RegisterClusterResponse extends Message<RegisterClusterResponse> {
  /**
   * The cluster's registration token. This token identifies the cluster and must be used
   * in all subsequent requests.
   *
   * @generated from field: string registration_token = 1;
   */
  registrationToken = "";

  constructor(data?: PartialMessage<RegisterClusterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.RegisterClusterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "registration_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterClusterResponse {
    return new RegisterClusterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterClusterResponse {
    return new RegisterClusterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterClusterResponse {
    return new RegisterClusterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterClusterResponse | PlainMessage<RegisterClusterResponse> | undefined, b: RegisterClusterResponse | PlainMessage<RegisterClusterResponse> | undefined): boolean {
    return proto3.util.equals(RegisterClusterResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.RenewClusterRegistrationRequest
 */
export class RenewClusterRegistrationRequest extends Message<RenewClusterRegistrationRequest> {
  /**
   * The cluster's registration token
   *
   * @generated from field: string registration_token = 1;
   */
  registrationToken = "";

  constructor(data?: PartialMessage<RenewClusterRegistrationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.RenewClusterRegistrationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "registration_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenewClusterRegistrationRequest {
    return new RenewClusterRegistrationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenewClusterRegistrationRequest {
    return new RenewClusterRegistrationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenewClusterRegistrationRequest {
    return new RenewClusterRegistrationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenewClusterRegistrationRequest | PlainMessage<RenewClusterRegistrationRequest> | undefined, b: RenewClusterRegistrationRequest | PlainMessage<RenewClusterRegistrationRequest> | undefined): boolean {
    return proto3.util.equals(RenewClusterRegistrationRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.RenewClusterRegistrationResponse
 */
export class RenewClusterRegistrationResponse extends Message<RenewClusterRegistrationResponse> {
  /**
   * The cluster's registration token. This token identifies the cluster and must be used
   * in all subsequent requests.
   *
   * @generated from field: string registration_token = 1;
   */
  registrationToken = "";

  constructor(data?: PartialMessage<RenewClusterRegistrationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.RenewClusterRegistrationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "registration_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenewClusterRegistrationResponse {
    return new RenewClusterRegistrationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenewClusterRegistrationResponse {
    return new RenewClusterRegistrationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenewClusterRegistrationResponse {
    return new RenewClusterRegistrationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RenewClusterRegistrationResponse | PlainMessage<RenewClusterRegistrationResponse> | undefined, b: RenewClusterRegistrationResponse | PlainMessage<RenewClusterRegistrationResponse> | undefined): boolean {
    return proto3.util.equals(RenewClusterRegistrationResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.GetClusterWorkspacesRequest
 */
export class GetClusterWorkspacesRequest extends Message<GetClusterWorkspacesRequest> {
  /**
   * pagination contains the pagination options for listing workspaces
   *
   * @generated from field: gitpod.v1.PaginationRequest pagination = 1;
   */
  pagination?: PaginationRequest;

  /**
   * The cluster's registration token
   *
   * @generated from field: string registration_token = 2;
   */
  registrationToken = "";

  constructor(data?: PartialMessage<GetClusterWorkspacesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GetClusterWorkspacesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PaginationRequest },
    { no: 2, name: "registration_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterWorkspacesRequest {
    return new GetClusterWorkspacesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterWorkspacesRequest {
    return new GetClusterWorkspacesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterWorkspacesRequest {
    return new GetClusterWorkspacesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterWorkspacesRequest | PlainMessage<GetClusterWorkspacesRequest> | undefined, b: GetClusterWorkspacesRequest | PlainMessage<GetClusterWorkspacesRequest> | undefined): boolean {
    return proto3.util.equals(GetClusterWorkspacesRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.GetClusterWorkspacesResponse
 */
export class GetClusterWorkspacesResponse extends Message<GetClusterWorkspacesResponse> {
  /**
   * pagination contains the pagination options for listing workspaces
   *
   * @generated from field: gitpod.v1.PaginationResponse pagination = 1;
   */
  pagination?: PaginationResponse;

  /**
   * The workspaces running on the cluster
   *
   * @generated from field: repeated gitpod.v1.GetClusterWorkspacesResponse.Workspace workspaces = 2;
   */
  workspaces: GetClusterWorkspacesResponse_Workspace[] = [];

  constructor(data?: PartialMessage<GetClusterWorkspacesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GetClusterWorkspacesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PaginationResponse },
    { no: 2, name: "workspaces", kind: "message", T: GetClusterWorkspacesResponse_Workspace, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterWorkspacesResponse {
    return new GetClusterWorkspacesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterWorkspacesResponse {
    return new GetClusterWorkspacesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterWorkspacesResponse {
    return new GetClusterWorkspacesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterWorkspacesResponse | PlainMessage<GetClusterWorkspacesResponse> | undefined, b: GetClusterWorkspacesResponse | PlainMessage<GetClusterWorkspacesResponse> | undefined): boolean {
    return proto3.util.equals(GetClusterWorkspacesResponse, a, b);
  }
}

/**
 * WorkspaceType specifies the purpose/use of a workspace. Different workspace types are handled differently by all parts of the system.
 *
 * @generated from enum gitpod.v1.GetClusterWorkspacesResponse.WorkspaceType
 */
export enum GetClusterWorkspacesResponse_WorkspaceType {
  /**
   * @generated from enum value: WORKSPACE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Regular workspaces are your off-the-mill workspaces intended for users. They are directly user-facing and hence are most important.
   *
   * @generated from enum value: WORKSPACE_TYPE_REGULAR = 1;
   */
  REGULAR = 1,

  /**
   * Prebuild workspaces are workspaces used to pre-build the content of other workspaces. They run headless and have no direct user-interaction.
   *
   * @generated from enum value: WORKSPACE_TYPE_PREBUILD = 2;
   */
  PREBUILD = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(GetClusterWorkspacesResponse_WorkspaceType)
proto3.util.setEnumType(GetClusterWorkspacesResponse_WorkspaceType, "gitpod.v1.GetClusterWorkspacesResponse.WorkspaceType", [
  { no: 0, name: "WORKSPACE_TYPE_UNSPECIFIED" },
  { no: 1, name: "WORKSPACE_TYPE_REGULAR" },
  { no: 2, name: "WORKSPACE_TYPE_PREBUILD" },
]);

/**
 * Timeout configures the workspace timeout
 *
 * @generated from message gitpod.v1.GetClusterWorkspacesResponse.Timeout
 */
export class GetClusterWorkspacesResponse_Timeout extends Message<GetClusterWorkspacesResponse_Timeout> {
  /**
   * timeout optionally sets a custom workspace timeout
   *
   * @generated from field: string default = 1;
   */
  default = "";

  /**
   * timeout optionally sets a custom closed timeout
   *
   * @generated from field: string closed = 2;
   */
  closed = "";

  /**
   * maximum lifetime of the workspace
   *
   * @generated from field: string maximum_lifetime = 3;
   */
  maximumLifetime = "";

  constructor(data?: PartialMessage<GetClusterWorkspacesResponse_Timeout>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GetClusterWorkspacesResponse.Timeout";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "default", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "closed", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "maximum_lifetime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterWorkspacesResponse_Timeout {
    return new GetClusterWorkspacesResponse_Timeout().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterWorkspacesResponse_Timeout {
    return new GetClusterWorkspacesResponse_Timeout().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterWorkspacesResponse_Timeout {
    return new GetClusterWorkspacesResponse_Timeout().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterWorkspacesResponse_Timeout | PlainMessage<GetClusterWorkspacesResponse_Timeout> | undefined, b: GetClusterWorkspacesResponse_Timeout | PlainMessage<GetClusterWorkspacesResponse_Timeout> | undefined): boolean {
    return proto3.util.equals(GetClusterWorkspacesResponse_Timeout, a, b);
  }
}

/**
 * GitSpec configures the Git available within the workspace
 *
 * @generated from message gitpod.v1.GetClusterWorkspacesResponse.GitSpec
 */
export class GetClusterWorkspacesResponse_GitSpec extends Message<GetClusterWorkspacesResponse_GitSpec> {
  /**
   * The Git username
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * The Git email address
   *
   * @generated from field: string email = 2;
   */
  email = "";

  constructor(data?: PartialMessage<GetClusterWorkspacesResponse_GitSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GetClusterWorkspacesResponse.GitSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterWorkspacesResponse_GitSpec {
    return new GetClusterWorkspacesResponse_GitSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterWorkspacesResponse_GitSpec {
    return new GetClusterWorkspacesResponse_GitSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterWorkspacesResponse_GitSpec {
    return new GetClusterWorkspacesResponse_GitSpec().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterWorkspacesResponse_GitSpec | PlainMessage<GetClusterWorkspacesResponse_GitSpec> | undefined, b: GetClusterWorkspacesResponse_GitSpec | PlainMessage<GetClusterWorkspacesResponse_GitSpec> | undefined): boolean {
    return proto3.util.equals(GetClusterWorkspacesResponse_GitSpec, a, b);
  }
}

/**
 * EnvironmentVariable defines a single environment variable
 *
 * @generated from message gitpod.v1.GetClusterWorkspacesResponse.EnvironmentVariable
 */
export class GetClusterWorkspacesResponse_EnvironmentVariable extends Message<GetClusterWorkspacesResponse_EnvironmentVariable> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<GetClusterWorkspacesResponse_EnvironmentVariable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GetClusterWorkspacesResponse.EnvironmentVariable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterWorkspacesResponse_EnvironmentVariable {
    return new GetClusterWorkspacesResponse_EnvironmentVariable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterWorkspacesResponse_EnvironmentVariable {
    return new GetClusterWorkspacesResponse_EnvironmentVariable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterWorkspacesResponse_EnvironmentVariable {
    return new GetClusterWorkspacesResponse_EnvironmentVariable().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterWorkspacesResponse_EnvironmentVariable | PlainMessage<GetClusterWorkspacesResponse_EnvironmentVariable> | undefined, b: GetClusterWorkspacesResponse_EnvironmentVariable | PlainMessage<GetClusterWorkspacesResponse_EnvironmentVariable> | undefined): boolean {
    return proto3.util.equals(GetClusterWorkspacesResponse_EnvironmentVariable, a, b);
  }
}

/**
 * WorkspaceSpec specifies the configuration of a workspace for a workspace start
 *
 * @generated from message gitpod.v1.GetClusterWorkspacesResponse.WorkspaceSpec
 */
export class GetClusterWorkspacesResponse_WorkspaceSpec extends Message<GetClusterWorkspacesResponse_WorkspaceSpec> {
  /**
   * initializer configures how the workspace is to be initialized
   *
   * @generated from field: bytes initializer = 4;
   */
  initializer = new Uint8Array(0);

  /**
   * ports is the set of ports which ought to be exposed to the internet
   *
   * @generated from field: repeated gitpod.v1.WorkspacePort ports = 5;
   */
  ports: WorkspacePort[] = [];

  /**
   * envvars are user-defined environment variables which ought to be available in the workspace
   *
   * @generated from field: repeated gitpod.v1.GetClusterWorkspacesResponse.EnvironmentVariable envvars = 6;
   */
  envvars: GetClusterWorkspacesResponse_EnvironmentVariable[] = [];

  /**
   * Git configures the Git user in the workspace
   *
   * @generated from field: gitpod.v1.GetClusterWorkspacesResponse.GitSpec git = 9;
   */
  git?: GetClusterWorkspacesResponse_GitSpec;

  /**
   * @generated from field: gitpod.v1.GetClusterWorkspacesResponse.Timeout timeout = 10;
   */
  timeout?: GetClusterWorkspacesResponse_Timeout;

  /**
   * admission controlls who can access the workspace and its ports.
   *
   * @generated from field: gitpod.v1.AdmissionLevel admission = 11;
   */
  admission = AdmissionLevel.UNSPECIFIED;

  /**
   * Class denotes the class of the workspace we ought to start
   *
   * @generated from field: string class = 13;
   */
  class = "";

  /**
   * ssh_public_keys is user's uploaded ssh public keys
   *
   * @generated from field: repeated string ssh_public_keys = 15;
   */
  sshPublicKeys: string[] = [];

  /**
   * ide_image_layers are contains the images needed for the ide to run,
   * including ide-desktop, desktop-plugin and so on
   *
   * @generated from field: repeated string ide_image_layers = 17;
   */
  ideImageLayers: string[] = [];

  constructor(data?: PartialMessage<GetClusterWorkspacesResponse_WorkspaceSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GetClusterWorkspacesResponse.WorkspaceSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "initializer", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "ports", kind: "message", T: WorkspacePort, repeated: true },
    { no: 6, name: "envvars", kind: "message", T: GetClusterWorkspacesResponse_EnvironmentVariable, repeated: true },
    { no: 9, name: "git", kind: "message", T: GetClusterWorkspacesResponse_GitSpec },
    { no: 10, name: "timeout", kind: "message", T: GetClusterWorkspacesResponse_Timeout },
    { no: 11, name: "admission", kind: "enum", T: proto3.getEnumType(AdmissionLevel) },
    { no: 13, name: "class", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "ssh_public_keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 17, name: "ide_image_layers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterWorkspacesResponse_WorkspaceSpec {
    return new GetClusterWorkspacesResponse_WorkspaceSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterWorkspacesResponse_WorkspaceSpec {
    return new GetClusterWorkspacesResponse_WorkspaceSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterWorkspacesResponse_WorkspaceSpec {
    return new GetClusterWorkspacesResponse_WorkspaceSpec().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterWorkspacesResponse_WorkspaceSpec | PlainMessage<GetClusterWorkspacesResponse_WorkspaceSpec> | undefined, b: GetClusterWorkspacesResponse_WorkspaceSpec | PlainMessage<GetClusterWorkspacesResponse_WorkspaceSpec> | undefined): boolean {
    return proto3.util.equals(GetClusterWorkspacesResponse_WorkspaceSpec, a, b);
  }
}

/**
 * WorkspaceMetadata is data associated with a workspace that's required for other parts of the system to function
 *
 * @generated from message gitpod.v1.GetClusterWorkspacesResponse.WorkspaceMetadata
 */
export class GetClusterWorkspacesResponse_WorkspaceMetadata extends Message<GetClusterWorkspacesResponse_WorkspaceMetadata> {
  /**
   * owner is the ID of the Gitpod user to whom we'll bill this workspace and who we consider responsible for its content
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * meta_id is the workspace ID of this currently running workspace instance on the "meta pool" side
   *
   * @generated from field: string meta_id = 2;
   */
  metaId = "";

  /**
   * started_at is the time when this workspace was started. Consider this field read-only, i.e. setting in a request will have no effect.
   *
   * @generated from field: google.protobuf.Timestamp started_at = 3;
   */
  startedAt?: Timestamp;

  /**
   * Annotations are key/value pairs that gets attached to the workspace.
   * This is primarily intended for annotating headless workspace loads.
   *
   * @generated from field: map<string, string> annotations = 4;
   */
  annotations: { [key: string]: string } = {};

  /**
   * team the workspace belongs to, if the workspace is not associated with a team, this property will be empty
   *
   * @generated from field: optional string team = 5;
   */
  team?: string;

  /**
   * project the workspace belongs to, if the workspace is not associated with a project, this property will be empty
   *
   * @generated from field: optional string project = 6;
   */
  project?: string;

  constructor(data?: PartialMessage<GetClusterWorkspacesResponse_WorkspaceMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GetClusterWorkspacesResponse.WorkspaceMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "meta_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "started_at", kind: "message", T: Timestamp },
    { no: 4, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "team", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterWorkspacesResponse_WorkspaceMetadata {
    return new GetClusterWorkspacesResponse_WorkspaceMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterWorkspacesResponse_WorkspaceMetadata {
    return new GetClusterWorkspacesResponse_WorkspaceMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterWorkspacesResponse_WorkspaceMetadata {
    return new GetClusterWorkspacesResponse_WorkspaceMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterWorkspacesResponse_WorkspaceMetadata | PlainMessage<GetClusterWorkspacesResponse_WorkspaceMetadata> | undefined, b: GetClusterWorkspacesResponse_WorkspaceMetadata | PlainMessage<GetClusterWorkspacesResponse_WorkspaceMetadata> | undefined): boolean {
    return proto3.util.equals(GetClusterWorkspacesResponse_WorkspaceMetadata, a, b);
  }
}

/**
 * @generated from message gitpod.v1.GetClusterWorkspacesResponse.Workspace
 */
export class GetClusterWorkspacesResponse_Workspace extends Message<GetClusterWorkspacesResponse_Workspace> {
  /**
   * ID is a unique identifier of this workspace. No other workspace with the same name must be managed by this workspace manager
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Metadata is data associated with this workspace that's required for other parts of Gitpod to function
   *
   * @generated from field: gitpod.v1.GetClusterWorkspacesResponse.WorkspaceMetadata metadata = 2;
   */
  metadata?: GetClusterWorkspacesResponse_WorkspaceMetadata;

  /**
   * Spec is the configuration of the workspace that's required for the ws-manager to start the workspace
   *
   * @generated from field: gitpod.v1.GetClusterWorkspacesResponse.WorkspaceSpec spec = 3;
   */
  spec?: GetClusterWorkspacesResponse_WorkspaceSpec;

  /**
   * Type denots the kind of workspace we ought to start
   *
   * @generated from field: gitpod.v1.GetClusterWorkspacesResponse.WorkspaceType type = 4;
   */
  type = GetClusterWorkspacesResponse_WorkspaceType.UNSPECIFIED;

  constructor(data?: PartialMessage<GetClusterWorkspacesResponse_Workspace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GetClusterWorkspacesResponse.Workspace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: GetClusterWorkspacesResponse_WorkspaceMetadata },
    { no: 3, name: "spec", kind: "message", T: GetClusterWorkspacesResponse_WorkspaceSpec },
    { no: 4, name: "type", kind: "enum", T: proto3.getEnumType(GetClusterWorkspacesResponse_WorkspaceType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterWorkspacesResponse_Workspace {
    return new GetClusterWorkspacesResponse_Workspace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterWorkspacesResponse_Workspace {
    return new GetClusterWorkspacesResponse_Workspace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterWorkspacesResponse_Workspace {
    return new GetClusterWorkspacesResponse_Workspace().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterWorkspacesResponse_Workspace | PlainMessage<GetClusterWorkspacesResponse_Workspace> | undefined, b: GetClusterWorkspacesResponse_Workspace | PlainMessage<GetClusterWorkspacesResponse_Workspace> | undefined): boolean {
    return proto3.util.equals(GetClusterWorkspacesResponse_Workspace, a, b);
  }
}

/**
 * @generated from message gitpod.v1.UpdateClusterWorkspaceStatusRequest
 */
export class UpdateClusterWorkspaceStatusRequest extends Message<UpdateClusterWorkspaceStatusRequest> {
  /**
   * The cluster's registration token
   *
   * @generated from field: string registration_token = 1;
   */
  registrationToken = "";

  /**
   * The workspace's ID
   *
   * @generated from field: string workspace_id = 2;
   */
  workspaceId = "";

  /**
   * @generated from field: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceACK ack = 3;
   */
  ack?: UpdateClusterWorkspaceStatusRequest_WorkspaceACK;

  /**
   * The workspace's status
   *
   * @generated from field: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceStatus status = 4;
   */
  status?: UpdateClusterWorkspaceStatusRequest_WorkspaceStatus;

  constructor(data?: PartialMessage<UpdateClusterWorkspaceStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.UpdateClusterWorkspaceStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "registration_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ack", kind: "message", T: UpdateClusterWorkspaceStatusRequest_WorkspaceACK },
    { no: 4, name: "status", kind: "message", T: UpdateClusterWorkspaceStatusRequest_WorkspaceStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateClusterWorkspaceStatusRequest {
    return new UpdateClusterWorkspaceStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateClusterWorkspaceStatusRequest {
    return new UpdateClusterWorkspaceStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateClusterWorkspaceStatusRequest {
    return new UpdateClusterWorkspaceStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateClusterWorkspaceStatusRequest | PlainMessage<UpdateClusterWorkspaceStatusRequest> | undefined, b: UpdateClusterWorkspaceStatusRequest | PlainMessage<UpdateClusterWorkspaceStatusRequest> | undefined): boolean {
    return proto3.util.equals(UpdateClusterWorkspaceStatusRequest, a, b);
  }
}

/**
 * WorkspaceConditionBool is a trinary bool: true/false/empty
 *
 * @generated from enum gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditionBool
 */
export enum UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool {
  /**
   * @generated from enum value: WORKSPACE_CONDITION_BOOL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: WORKSPACE_CONDITION_BOOL_TRUE = 1;
   */
  TRUE = 1,

  /**
   * @generated from enum value: WORKSPACE_CONDITION_BOOL_FALSE = 2;
   */
  FALSE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool)
proto3.util.setEnumType(UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool, "gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditionBool", [
  { no: 0, name: "WORKSPACE_CONDITION_BOOL_UNSPECIFIED" },
  { no: 1, name: "WORKSPACE_CONDITION_BOOL_TRUE" },
  { no: 2, name: "WORKSPACE_CONDITION_BOOL_FALSE" },
]);

/**
 * WorkspaceCondition gives more detailed information as to the state of the workspace. Which condition actually
 * has a value depends on the phase the workspace is in.
 *
 * @generated from message gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditions
 */
export class UpdateClusterWorkspaceStatusRequest_WorkspaceConditions extends Message<UpdateClusterWorkspaceStatusRequest_WorkspaceConditions> {
  /**
   * failed contains the reason the workspace failed to operate. If this field is empty, the workspace has not failed.
   *
   * @generated from field: string failed = 1;
   */
  failed = "";

  /**
   * timeout contains the reason the workspace has timed out. If this field is empty, the workspace has not timed out.
   *
   * @generated from field: string timeout = 2;
   */
  timeout = "";

  /**
   * pulling_images marks if the workspace is currently pulling its images. This condition can only be set during PhaseCreating
   *
   * @generated from field: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditionBool pulling_images = 3;
   */
  pullingImages = UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool.UNSPECIFIED;

  /**
   * snapshot contains a snapshot URL if a snapshot was produced prior to shutting the workspace down. This condition is only used for headless workspaces.
   *
   * @generated from field: string snapshot = 5;
   */
  snapshot = "";

  /**
   * final_backup_complete determines if the last state of the workspace has been backed up to remote storage.
   * Once this is true, a new workspace with the same ID will be able to use this backup.
   *
   * @generated from field: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditionBool final_backup_complete = 6;
   */
  finalBackupComplete = UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool.UNSPECIFIED;

  /**
   * deployed indicates if a workspace container is currently deployed. If this condition is false, there is no means for the user to alter the workspace content.
   *
   * @generated from field: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditionBool deployed = 7;
   */
  deployed = UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool.UNSPECIFIED;

  /**
   * network_not_ready indicates if a workspace container is currently experiencing a network problem.
   *
   * @generated from field: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditionBool network_not_ready = 8;
   */
  networkNotReady = UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool.UNSPECIFIED;

  /**
   * first_user_activity is the time when MarkActive was first called on the workspace
   *
   * @generated from field: google.protobuf.Timestamp first_user_activity = 9;
   */
  firstUserActivity?: Timestamp;

  /**
   * headless_task_failed indicates that a headless workspace task failed
   *
   * @generated from field: string headless_task_failed = 10;
   */
  headlessTaskFailed = "";

  /**
   * stopped_by_request is true if the workspace was stopped using a StopWorkspace call
   *
   * @generated from field: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditionBool stopped_by_request = 11;
   */
  stoppedByRequest = UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool.UNSPECIFIED;

  /**
   * volume_snapshot contains info about volume snapshot that was used to save persistent volume
   *
   * @generated from field: string volume_snapshot = 12;
   */
  volumeSnapshot = "";

  /**
   * aborted is true if StopWorkspace was called with StopWorkspacePolicy set to ABORT
   *
   * @generated from field: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditionBool aborted = 13;
   */
  aborted = UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool.UNSPECIFIED;

  constructor(data?: PartialMessage<UpdateClusterWorkspaceStatusRequest_WorkspaceConditions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "failed", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timeout", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pulling_images", kind: "enum", T: proto3.getEnumType(UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool) },
    { no: 5, name: "snapshot", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "final_backup_complete", kind: "enum", T: proto3.getEnumType(UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool) },
    { no: 7, name: "deployed", kind: "enum", T: proto3.getEnumType(UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool) },
    { no: 8, name: "network_not_ready", kind: "enum", T: proto3.getEnumType(UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool) },
    { no: 9, name: "first_user_activity", kind: "message", T: Timestamp },
    { no: 10, name: "headless_task_failed", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "stopped_by_request", kind: "enum", T: proto3.getEnumType(UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool) },
    { no: 12, name: "volume_snapshot", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "aborted", kind: "enum", T: proto3.getEnumType(UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateClusterWorkspaceStatusRequest_WorkspaceConditions {
    return new UpdateClusterWorkspaceStatusRequest_WorkspaceConditions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateClusterWorkspaceStatusRequest_WorkspaceConditions {
    return new UpdateClusterWorkspaceStatusRequest_WorkspaceConditions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateClusterWorkspaceStatusRequest_WorkspaceConditions {
    return new UpdateClusterWorkspaceStatusRequest_WorkspaceConditions().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateClusterWorkspaceStatusRequest_WorkspaceConditions | PlainMessage<UpdateClusterWorkspaceStatusRequest_WorkspaceConditions> | undefined, b: UpdateClusterWorkspaceStatusRequest_WorkspaceConditions | PlainMessage<UpdateClusterWorkspaceStatusRequest_WorkspaceConditions> | undefined): boolean {
    return proto3.util.equals(UpdateClusterWorkspaceStatusRequest_WorkspaceConditions, a, b);
  }
}

/**
 * WorkspaceACK is a simple acknowledgement of a workspace status update
 *
 * @generated from message gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceACK
 */
export class UpdateClusterWorkspaceStatusRequest_WorkspaceACK extends Message<UpdateClusterWorkspaceStatusRequest_WorkspaceACK> {
  /**
   * @generated from field: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceACK.StatusCode status_code = 1;
   */
  statusCode = UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode.UNSPECIFIED;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<UpdateClusterWorkspaceStatusRequest_WorkspaceACK>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceACK";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status_code", kind: "enum", T: proto3.getEnumType(UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode) },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateClusterWorkspaceStatusRequest_WorkspaceACK {
    return new UpdateClusterWorkspaceStatusRequest_WorkspaceACK().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateClusterWorkspaceStatusRequest_WorkspaceACK {
    return new UpdateClusterWorkspaceStatusRequest_WorkspaceACK().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateClusterWorkspaceStatusRequest_WorkspaceACK {
    return new UpdateClusterWorkspaceStatusRequest_WorkspaceACK().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateClusterWorkspaceStatusRequest_WorkspaceACK | PlainMessage<UpdateClusterWorkspaceStatusRequest_WorkspaceACK> | undefined, b: UpdateClusterWorkspaceStatusRequest_WorkspaceACK | PlainMessage<UpdateClusterWorkspaceStatusRequest_WorkspaceACK> | undefined): boolean {
    return proto3.util.equals(UpdateClusterWorkspaceStatusRequest_WorkspaceACK, a, b);
  }
}

/**
 * @generated from enum gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceACK.StatusCode
 */
export enum UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode {
  /**
   * @generated from enum value: STATUS_CODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STATUS_CODE_UNKNOWN = 1;
   */
  UNKNOWN = 1,

  /**
   * @generated from enum value: STATUS_CODE_OK = 2;
   */
  OK = 2,

  /**
   * @generated from enum value: STATUS_CODE_INVALID_RESOURCE = 3;
   */
  INVALID_RESOURCE = 3,

  /**
   * @generated from enum value: STATUS_CODE_FAILED_PRECONDITION = 4;
   */
  FAILED_PRECONDITION = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode)
proto3.util.setEnumType(UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode, "gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceACK.StatusCode", [
  { no: 0, name: "STATUS_CODE_UNSPECIFIED" },
  { no: 1, name: "STATUS_CODE_UNKNOWN" },
  { no: 2, name: "STATUS_CODE_OK" },
  { no: 3, name: "STATUS_CODE_INVALID_RESOURCE" },
  { no: 4, name: "STATUS_CODE_FAILED_PRECONDITION" },
]);

/**
 * WorkspaceStatus describes a workspace status
 *
 * @generated from message gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceStatus
 */
export class UpdateClusterWorkspaceStatusRequest_WorkspaceStatus extends Message<UpdateClusterWorkspaceStatusRequest_WorkspaceStatus> {
  /**
   * ID is the unique identifier of the workspace
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * version of the status update. Workspace instances themselves are unversioned,
   * but their statuus has different versions.
   * The value of this field has no semantic meaning (e.g. don't interpret it as
   * as a timestemp), but it can be used to impose a partial order.
   * If a.status_version < b.status_version then a was the status before b.
   *
   * @generated from field: uint64 status_version = 10;
   */
  statusVersion = protoInt64.zero;

  /**
   * the phase of a workspace is a simple, high-level summary of where the workspace is in its lifecycle
   *
   * @generated from field: gitpod.v1.WorkspacePhase.Phase phase = 4;
   */
  phase = WorkspacePhase_Phase.UNSPECIFIED;

  /**
   * conditions detail the current state of the workspace
   *
   * @generated from field: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditions conditions = 5;
   */
  conditions?: UpdateClusterWorkspaceStatusRequest_WorkspaceConditions;

  /**
   * message is an optional human-readable message detailing the current phase
   *
   * @generated from field: string message = 6;
   */
  message = "";

  /**
   * repo details the Git working copy status of the workspace.
   * Note: this is a best-effort field and more often than not will not be present. Its absence does not
   * indicate the absence of a working copy.
   *
   * @generated from field: gitpod.v1.WorkspaceGitStatus repo = 7;
   */
  repo?: WorkspaceGitStatus;

  /**
   * auth provides authentication information about the workspace. This info is primarily used by ws-proxy.
   *
   * @generated from field: string owner_token = 9;
   */
  ownerToken = "";

  constructor(data?: PartialMessage<UpdateClusterWorkspaceStatusRequest_WorkspaceStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status_version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "phase", kind: "enum", T: proto3.getEnumType(WorkspacePhase_Phase) },
    { no: 5, name: "conditions", kind: "message", T: UpdateClusterWorkspaceStatusRequest_WorkspaceConditions },
    { no: 6, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "repo", kind: "message", T: WorkspaceGitStatus },
    { no: 9, name: "owner_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateClusterWorkspaceStatusRequest_WorkspaceStatus {
    return new UpdateClusterWorkspaceStatusRequest_WorkspaceStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateClusterWorkspaceStatusRequest_WorkspaceStatus {
    return new UpdateClusterWorkspaceStatusRequest_WorkspaceStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateClusterWorkspaceStatusRequest_WorkspaceStatus {
    return new UpdateClusterWorkspaceStatusRequest_WorkspaceStatus().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateClusterWorkspaceStatusRequest_WorkspaceStatus | PlainMessage<UpdateClusterWorkspaceStatusRequest_WorkspaceStatus> | undefined, b: UpdateClusterWorkspaceStatusRequest_WorkspaceStatus | PlainMessage<UpdateClusterWorkspaceStatusRequest_WorkspaceStatus> | undefined): boolean {
    return proto3.util.equals(UpdateClusterWorkspaceStatusRequest_WorkspaceStatus, a, b);
  }
}

/**
 * @generated from message gitpod.v1.UpdateClusterWorkspaceStatusResponse
 */
export class UpdateClusterWorkspaceStatusResponse extends Message<UpdateClusterWorkspaceStatusResponse> {
  constructor(data?: PartialMessage<UpdateClusterWorkspaceStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.UpdateClusterWorkspaceStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateClusterWorkspaceStatusResponse {
    return new UpdateClusterWorkspaceStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateClusterWorkspaceStatusResponse {
    return new UpdateClusterWorkspaceStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateClusterWorkspaceStatusResponse {
    return new UpdateClusterWorkspaceStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateClusterWorkspaceStatusResponse | PlainMessage<UpdateClusterWorkspaceStatusResponse> | undefined, b: UpdateClusterWorkspaceStatusResponse | PlainMessage<UpdateClusterWorkspaceStatusResponse> | undefined): boolean {
    return proto3.util.equals(UpdateClusterWorkspaceStatusResponse, a, b);
  }
}
