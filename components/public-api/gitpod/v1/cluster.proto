syntax = "proto3";

package gitpod.v1;

import "gitpod/v1/pagination.proto";
import "gitpod/v1/workspace.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/gitpod-io/gitpod/components/public-api/go/v1";

service ClusterService {
  // RegisterCluster registers a new cluster with the server. Registrations are very
  // short-lived and must be renewed every 30 seconds. Clusters can be registered for
  // an entire organisation or a single user.
  rpc RegisterCluster(RegisterClusterRequest) returns (RegisterClusterResponse) {}

  // RenewClusterRegistration renews a cluster's registration. This must be called every 30 seconds
  // to keep the cluster registered.
  rpc RenewClusterRegistration(RenewClusterRegistrationRequest) returns (RenewClusterRegistrationResponse) {}

  // GetClusterWorkspaces returns the workspaces running on a cluster.
  rpc GetClusterWorkspaces(GetClusterWorkspacesRequest) returns (GetClusterWorkspacesResponse) {}

  // UpdateClusterWorkspaceStatus updates the status of a workspace running on a cluster.
  rpc UpdateClusterWorkspaceStatus(UpdateClusterWorkspaceStatusRequest) returns (UpdateClusterWorkspaceStatusResponse) {}
}

message RegisterClusterRequest {
  enum Scope {
    // Scope is not set
    SCOPE_UNSPECIFIED = 0;
    // The cluster is registered for an entire organisation
    SCOPE_ORGANIZATION = 1;
    // The cluster is registered for a single user
    SCOPE_USER = 2;
  }
  message WorkspaceClass {
    string id = 1;
    string display_name = 2;
    string description = 3;
  }
  enum ClusterType {
    // Cluster type is not set
    CLUSTER_TYPE_UNSPECIFIED = 0;
    // The cluster is a local workspace runner running on a user's machine. It
    // can only run workspaces of a single tenant (the user themselves) at a time.
    CLUSTER_TYPE_LOCAL = 1;
    // The cluster is a Cloud workspace cluster which is managed by Gitpod
    // and can run multiple tenants.
    CLUSTER_TYPE_MULTI_TENANT = 2;
  }

  // The cluster's ID - must be unique within the scope
  string id = 1;

  // The cluster's scope
  Scope scope = 2;

  // The cluster's type
  ClusterType type = 3;

  // The cluster's name which is shown to users
  string name = 4;

  // The workspace classes this cluster has to offer
  repeated WorkspaceClass workspace_classes = 5;
}

message RegisterClusterResponse {
  // The cluster's registration token. This token identifies the cluster and must be used
  // in all subsequent requests.
  string registration_token = 1;
}

message RenewClusterRegistrationRequest {
  // The cluster's registration token
  string registration_token = 1;
}

message RenewClusterRegistrationResponse {
  // The cluster's registration token. This token identifies the cluster and must be used
  // in all subsequent requests.
  string registration_token = 1;
}

message GetClusterWorkspacesRequest {
  // pagination contains the pagination options for listing workspaces
  PaginationRequest pagination = 1;

  // The cluster's registration token
  string registration_token = 2;
}

message GetClusterWorkspacesResponse {
  // Timeout configures the workspace timeout
  message Timeout {
    // timeout optionally sets a custom workspace timeout
    string default = 1;
    // timeout optionally sets a custom closed timeout
    string closed = 2;
    // maximum lifetime of the workspace
    string maximum_lifetime = 3;
  }

  // GitSpec configures the Git available within the workspace
  message GitSpec {
    // The Git username
    string username = 1;

    // The Git email address
    string email = 2;
  }

  // EnvironmentVariable defines a single environment variable
  message EnvironmentVariable {
    string name = 1;
    string value = 2;
  }

  // WorkspaceType specifies the purpose/use of a workspace. Different workspace types are handled differently by all parts of the system.
  enum WorkspaceType {
    WORKSPACE_TYPE_UNSPECIFIED = 0;

    // Regular workspaces are your off-the-mill workspaces intended for users. They are directly user-facing and hence are most important.
    WORKSPACE_TYPE_REGULAR = 1;

    // Prebuild workspaces are workspaces used to pre-build the content of other workspaces. They run headless and have no direct user-interaction.
    WORKSPACE_TYPE_PREBUILD = 2;
  }

  // WorkspaceSpec specifies the configuration of a workspace for a workspace start
  message WorkspaceSpec {
    // initializer configures how the workspace is to be initialized
    bytes initializer = 4;

    // ports is the set of ports which ought to be exposed to the internet
    repeated WorkspacePort ports = 5;

    // envvars are user-defined environment variables which ought to be available in the workspace
    repeated EnvironmentVariable envvars = 6;

    // Git configures the Git user in the workspace
    GitSpec git = 9;

    Timeout timeout = 10;

    // admission controlls who can access the workspace and its ports.
    AdmissionLevel admission = 11;

    // Class denotes the class of the workspace we ought to start
    string class = 13;

    // ssh_public_keys is user's uploaded ssh public keys
    repeated string ssh_public_keys = 15;

    // ide_image_layers are contains the images needed for the ide to run,
    // including ide-desktop, desktop-plugin and so on
    repeated string ide_image_layers = 17;
  }

  // WorkspaceMetadata is data associated with a workspace that's required for other parts of the system to function
  message WorkspaceMetadata {
    // owner is the ID of the Gitpod user to whom we'll bill this workspace and who we consider responsible for its content
    string owner = 1;

    // meta_id is the workspace ID of this currently running workspace instance on the "meta pool" side
    string meta_id = 2;

    // started_at is the time when this workspace was started. Consider this field read-only, i.e. setting in a request will have no effect.
    google.protobuf.Timestamp started_at = 3;

    // Annotations are key/value pairs that gets attached to the workspace.
    // This is primarily intended for annotating headless workspace loads.
    map<string, string> annotations = 4;

    // team the workspace belongs to, if the workspace is not associated with a team, this property will be empty
    optional string team = 5;

    // project the workspace belongs to, if the workspace is not associated with a project, this property will be empty
    optional string project = 6;
  }

  message Workspace {
    // ID is a unique identifier of this workspace. No other workspace with the same name must be managed by this workspace manager
    string id = 1;

    // Metadata is data associated with this workspace that's required for other parts of Gitpod to function
    WorkspaceMetadata metadata = 2;

    // Spec is the configuration of the workspace that's required for the ws-manager to start the workspace
    WorkspaceSpec spec = 3;

    // Type denots the kind of workspace we ought to start
    WorkspaceType type = 4;
  }

  // pagination contains the pagination options for listing workspaces
  PaginationResponse pagination = 1;

  // The workspaces running on the cluster
  repeated Workspace workspaces = 2;
}

message UpdateClusterWorkspaceStatusRequest {
  // WorkspaceConditionBool is a trinary bool: true/false/empty
  enum WorkspaceConditionBool {
    WORKSPACE_CONDITION_BOOL_UNSPECIFIED = 0;
    WORKSPACE_CONDITION_BOOL_TRUE = 1;
    WORKSPACE_CONDITION_BOOL_FALSE = 2;
  }

  // WorkspaceCondition gives more detailed information as to the state of the workspace. Which condition actually
  // has a value depends on the phase the workspace is in.
  message WorkspaceConditions {
    // failed contains the reason the workspace failed to operate. If this field is empty, the workspace has not failed.
    string failed = 1;

    // timeout contains the reason the workspace has timed out. If this field is empty, the workspace has not timed out.
    string timeout = 2;

    // pulling_images marks if the workspace is currently pulling its images. This condition can only be set during PhaseCreating
    WorkspaceConditionBool pulling_images = 3;

    // snapshot contains a snapshot URL if a snapshot was produced prior to shutting the workspace down. This condition is only used for headless workspaces.
    string snapshot = 5;

    // final_backup_complete determines if the last state of the workspace has been backed up to remote storage.
    // Once this is true, a new workspace with the same ID will be able to use this backup.
    WorkspaceConditionBool final_backup_complete = 6;

    // deployed indicates if a workspace container is currently deployed. If this condition is false, there is no means for the user to alter the workspace content.
    WorkspaceConditionBool deployed = 7;

    // network_not_ready indicates if a workspace container is currently experiencing a network problem.
    WorkspaceConditionBool network_not_ready = 8;

    // first_user_activity is the time when MarkActive was first called on the workspace
    google.protobuf.Timestamp first_user_activity = 9;

    // headless_task_failed indicates that a headless workspace task failed
    string headless_task_failed = 10;

    // stopped_by_request is true if the workspace was stopped using a StopWorkspace call
    WorkspaceConditionBool stopped_by_request = 11;

    // volume_snapshot contains info about volume snapshot that was used to save persistent volume
    string volume_snapshot = 12;

    // aborted is true if StopWorkspace was called with StopWorkspacePolicy set to ABORT
    WorkspaceConditionBool aborted = 13;
  }

  // WorkspaceACK is a simple acknowledgement of a workspace status update
  message WorkspaceACK {
    enum StatusCode {
      STATUS_CODE_UNSPECIFIED = 0;
      STATUS_CODE_UNKNOWN = 1;
      STATUS_CODE_OK = 2;
      STATUS_CODE_INVALID_RESOURCE = 3;
      STATUS_CODE_FAILED_PRECONDITION = 4;
    }
    StatusCode status_code = 1;
    string message = 2;
  }

  // WorkspaceStatus describes a workspace status
  message WorkspaceStatus {
    // ID is the unique identifier of the workspace
    string id = 1;

    // version of the status update. Workspace instances themselves are unversioned,
    // but their statuus has different versions.
    // The value of this field has no semantic meaning (e.g. don't interpret it as
    // as a timestemp), but it can be used to impose a partial order.
    // If a.status_version < b.status_version then a was the status before b.
    uint64 status_version = 10;

    // the phase of a workspace is a simple, high-level summary of where the workspace is in its lifecycle
    WorkspacePhase.Phase phase = 4;

    // conditions detail the current state of the workspace
    WorkspaceConditions conditions = 5;

    // message is an optional human-readable message detailing the current phase
    string message = 6;

    // repo details the Git working copy status of the workspace.
    // Note: this is a best-effort field and more often than not will not be present. Its absence does not
    // indicate the absence of a working copy.
    WorkspaceGitStatus repo = 7;

    // auth provides authentication information about the workspace. This info is primarily used by ws-proxy.
    string owner_token = 9;
  }

  // The cluster's registration token
  string registration_token = 1;

  // The workspace's ID
  string workspace_id = 2;

  WorkspaceACK ack = 3;

  // The workspace's status
  WorkspaceStatus status = 4;
}

message UpdateClusterWorkspaceStatusResponse {}
