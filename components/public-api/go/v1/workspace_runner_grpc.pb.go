// Copyright (c) 2023 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: gitpod/v1/workspace_runner.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkspaceRunnerServiceClient is the client API for WorkspaceRunnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspaceRunnerServiceClient interface {
	// RegisterRunner registers a new cluster with the server. Registrations are very
	// short-lived and must be renewed every 30 seconds. Runners can be registered for
	// an entire organisation or a single user.
	RegisterRunner(ctx context.Context, in *RegisterRunnerRequest, opts ...grpc.CallOption) (*RegisterRunnerResponse, error)
	// RenewRunnerRegistration renews a cluster's registration. This must be called every 30 seconds
	// to keep the cluster registered.
	RenewRunnerRegistration(ctx context.Context, in *RenewRunnerRegistrationRequest, opts ...grpc.CallOption) (*RenewRunnerRegistrationResponse, error)
	// ListRunnerWorkspaces returns the workspaces running on a cluster.
	ListRunnerWorkspaces(ctx context.Context, in *ListRunnerWorkspacesRequest, opts ...grpc.CallOption) (*ListRunnerWorkspacesResponse, error)
	// WatchRunnerWorkspaces returns a stream of workspaces that ought to run on a cluster.
	WatchRunnerWorkspaces(ctx context.Context, in *WatchRunnerWorkspacesRequest, opts ...grpc.CallOption) (WorkspaceRunnerService_WatchRunnerWorkspacesClient, error)
	// UpdateRunnerWorkspaceStatus updates the status of a workspace running on a cluster.
	UpdateRunnerWorkspaceStatus(ctx context.Context, in *UpdateRunnerWorkspaceStatusRequest, opts ...grpc.CallOption) (*UpdateRunnerWorkspaceStatusResponse, error)
}

type workspaceRunnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceRunnerServiceClient(cc grpc.ClientConnInterface) WorkspaceRunnerServiceClient {
	return &workspaceRunnerServiceClient{cc}
}

func (c *workspaceRunnerServiceClient) RegisterRunner(ctx context.Context, in *RegisterRunnerRequest, opts ...grpc.CallOption) (*RegisterRunnerResponse, error) {
	out := new(RegisterRunnerResponse)
	err := c.cc.Invoke(ctx, "/gitpod.v1.WorkspaceRunnerService/RegisterRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceRunnerServiceClient) RenewRunnerRegistration(ctx context.Context, in *RenewRunnerRegistrationRequest, opts ...grpc.CallOption) (*RenewRunnerRegistrationResponse, error) {
	out := new(RenewRunnerRegistrationResponse)
	err := c.cc.Invoke(ctx, "/gitpod.v1.WorkspaceRunnerService/RenewRunnerRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceRunnerServiceClient) ListRunnerWorkspaces(ctx context.Context, in *ListRunnerWorkspacesRequest, opts ...grpc.CallOption) (*ListRunnerWorkspacesResponse, error) {
	out := new(ListRunnerWorkspacesResponse)
	err := c.cc.Invoke(ctx, "/gitpod.v1.WorkspaceRunnerService/ListRunnerWorkspaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceRunnerServiceClient) WatchRunnerWorkspaces(ctx context.Context, in *WatchRunnerWorkspacesRequest, opts ...grpc.CallOption) (WorkspaceRunnerService_WatchRunnerWorkspacesClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkspaceRunnerService_ServiceDesc.Streams[0], "/gitpod.v1.WorkspaceRunnerService/WatchRunnerWorkspaces", opts...)
	if err != nil {
		return nil, err
	}
	x := &workspaceRunnerServiceWatchRunnerWorkspacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkspaceRunnerService_WatchRunnerWorkspacesClient interface {
	Recv() (*WatchRunnerWorkspacesResponse, error)
	grpc.ClientStream
}

type workspaceRunnerServiceWatchRunnerWorkspacesClient struct {
	grpc.ClientStream
}

func (x *workspaceRunnerServiceWatchRunnerWorkspacesClient) Recv() (*WatchRunnerWorkspacesResponse, error) {
	m := new(WatchRunnerWorkspacesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workspaceRunnerServiceClient) UpdateRunnerWorkspaceStatus(ctx context.Context, in *UpdateRunnerWorkspaceStatusRequest, opts ...grpc.CallOption) (*UpdateRunnerWorkspaceStatusResponse, error) {
	out := new(UpdateRunnerWorkspaceStatusResponse)
	err := c.cc.Invoke(ctx, "/gitpod.v1.WorkspaceRunnerService/UpdateRunnerWorkspaceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspaceRunnerServiceServer is the server API for WorkspaceRunnerService service.
// All implementations must embed UnimplementedWorkspaceRunnerServiceServer
// for forward compatibility
type WorkspaceRunnerServiceServer interface {
	// RegisterRunner registers a new cluster with the server. Registrations are very
	// short-lived and must be renewed every 30 seconds. Runners can be registered for
	// an entire organisation or a single user.
	RegisterRunner(context.Context, *RegisterRunnerRequest) (*RegisterRunnerResponse, error)
	// RenewRunnerRegistration renews a cluster's registration. This must be called every 30 seconds
	// to keep the cluster registered.
	RenewRunnerRegistration(context.Context, *RenewRunnerRegistrationRequest) (*RenewRunnerRegistrationResponse, error)
	// ListRunnerWorkspaces returns the workspaces running on a cluster.
	ListRunnerWorkspaces(context.Context, *ListRunnerWorkspacesRequest) (*ListRunnerWorkspacesResponse, error)
	// WatchRunnerWorkspaces returns a stream of workspaces that ought to run on a cluster.
	WatchRunnerWorkspaces(*WatchRunnerWorkspacesRequest, WorkspaceRunnerService_WatchRunnerWorkspacesServer) error
	// UpdateRunnerWorkspaceStatus updates the status of a workspace running on a cluster.
	UpdateRunnerWorkspaceStatus(context.Context, *UpdateRunnerWorkspaceStatusRequest) (*UpdateRunnerWorkspaceStatusResponse, error)
	mustEmbedUnimplementedWorkspaceRunnerServiceServer()
}

// UnimplementedWorkspaceRunnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkspaceRunnerServiceServer struct {
}

func (UnimplementedWorkspaceRunnerServiceServer) RegisterRunner(context.Context, *RegisterRunnerRequest) (*RegisterRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRunner not implemented")
}
func (UnimplementedWorkspaceRunnerServiceServer) RenewRunnerRegistration(context.Context, *RenewRunnerRegistrationRequest) (*RenewRunnerRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewRunnerRegistration not implemented")
}
func (UnimplementedWorkspaceRunnerServiceServer) ListRunnerWorkspaces(context.Context, *ListRunnerWorkspacesRequest) (*ListRunnerWorkspacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunnerWorkspaces not implemented")
}
func (UnimplementedWorkspaceRunnerServiceServer) WatchRunnerWorkspaces(*WatchRunnerWorkspacesRequest, WorkspaceRunnerService_WatchRunnerWorkspacesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchRunnerWorkspaces not implemented")
}
func (UnimplementedWorkspaceRunnerServiceServer) UpdateRunnerWorkspaceStatus(context.Context, *UpdateRunnerWorkspaceStatusRequest) (*UpdateRunnerWorkspaceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRunnerWorkspaceStatus not implemented")
}
func (UnimplementedWorkspaceRunnerServiceServer) mustEmbedUnimplementedWorkspaceRunnerServiceServer() {
}

// UnsafeWorkspaceRunnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspaceRunnerServiceServer will
// result in compilation errors.
type UnsafeWorkspaceRunnerServiceServer interface {
	mustEmbedUnimplementedWorkspaceRunnerServiceServer()
}

func RegisterWorkspaceRunnerServiceServer(s grpc.ServiceRegistrar, srv WorkspaceRunnerServiceServer) {
	s.RegisterService(&WorkspaceRunnerService_ServiceDesc, srv)
}

func _WorkspaceRunnerService_RegisterRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceRunnerServiceServer).RegisterRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitpod.v1.WorkspaceRunnerService/RegisterRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceRunnerServiceServer).RegisterRunner(ctx, req.(*RegisterRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceRunnerService_RenewRunnerRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewRunnerRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceRunnerServiceServer).RenewRunnerRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitpod.v1.WorkspaceRunnerService/RenewRunnerRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceRunnerServiceServer).RenewRunnerRegistration(ctx, req.(*RenewRunnerRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceRunnerService_ListRunnerWorkspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunnerWorkspacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceRunnerServiceServer).ListRunnerWorkspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitpod.v1.WorkspaceRunnerService/ListRunnerWorkspaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceRunnerServiceServer).ListRunnerWorkspaces(ctx, req.(*ListRunnerWorkspacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceRunnerService_WatchRunnerWorkspaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRunnerWorkspacesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkspaceRunnerServiceServer).WatchRunnerWorkspaces(m, &workspaceRunnerServiceWatchRunnerWorkspacesServer{stream})
}

type WorkspaceRunnerService_WatchRunnerWorkspacesServer interface {
	Send(*WatchRunnerWorkspacesResponse) error
	grpc.ServerStream
}

type workspaceRunnerServiceWatchRunnerWorkspacesServer struct {
	grpc.ServerStream
}

func (x *workspaceRunnerServiceWatchRunnerWorkspacesServer) Send(m *WatchRunnerWorkspacesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkspaceRunnerService_UpdateRunnerWorkspaceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRunnerWorkspaceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceRunnerServiceServer).UpdateRunnerWorkspaceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitpod.v1.WorkspaceRunnerService/UpdateRunnerWorkspaceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceRunnerServiceServer).UpdateRunnerWorkspaceStatus(ctx, req.(*UpdateRunnerWorkspaceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkspaceRunnerService_ServiceDesc is the grpc.ServiceDesc for WorkspaceRunnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkspaceRunnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitpod.v1.WorkspaceRunnerService",
	HandlerType: (*WorkspaceRunnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterRunner",
			Handler:    _WorkspaceRunnerService_RegisterRunner_Handler,
		},
		{
			MethodName: "RenewRunnerRegistration",
			Handler:    _WorkspaceRunnerService_RenewRunnerRegistration_Handler,
		},
		{
			MethodName: "ListRunnerWorkspaces",
			Handler:    _WorkspaceRunnerService_ListRunnerWorkspaces_Handler,
		},
		{
			MethodName: "UpdateRunnerWorkspaceStatus",
			Handler:    _WorkspaceRunnerService_UpdateRunnerWorkspaceStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchRunnerWorkspaces",
			Handler:       _WorkspaceRunnerService_WatchRunnerWorkspaces_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gitpod/v1/workspace_runner.proto",
}
