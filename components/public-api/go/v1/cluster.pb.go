// Copyright (c) 2023 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: gitpod/v1/cluster.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterClusterRequest_Scope int32

const (
	// Scope is not set
	RegisterClusterRequest_SCOPE_UNSPECIFIED RegisterClusterRequest_Scope = 0
	// The cluster is registered for an entire organisation
	RegisterClusterRequest_SCOPE_ORGANIZATION RegisterClusterRequest_Scope = 1
	// The cluster is registered for a single user
	RegisterClusterRequest_SCOPE_USER RegisterClusterRequest_Scope = 2
)

// Enum value maps for RegisterClusterRequest_Scope.
var (
	RegisterClusterRequest_Scope_name = map[int32]string{
		0: "SCOPE_UNSPECIFIED",
		1: "SCOPE_ORGANIZATION",
		2: "SCOPE_USER",
	}
	RegisterClusterRequest_Scope_value = map[string]int32{
		"SCOPE_UNSPECIFIED":  0,
		"SCOPE_ORGANIZATION": 1,
		"SCOPE_USER":         2,
	}
)

func (x RegisterClusterRequest_Scope) Enum() *RegisterClusterRequest_Scope {
	p := new(RegisterClusterRequest_Scope)
	*p = x
	return p
}

func (x RegisterClusterRequest_Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterClusterRequest_Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_cluster_proto_enumTypes[0].Descriptor()
}

func (RegisterClusterRequest_Scope) Type() protoreflect.EnumType {
	return &file_gitpod_v1_cluster_proto_enumTypes[0]
}

func (x RegisterClusterRequest_Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterClusterRequest_Scope.Descriptor instead.
func (RegisterClusterRequest_Scope) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{0, 0}
}

type RegisterClusterRequest_ClusterType int32

const (
	// Cluster type is not set
	RegisterClusterRequest_CLUSTER_TYPE_UNSPECIFIED RegisterClusterRequest_ClusterType = 0
	// The cluster is a local workspace runner running on a user's machine. It
	// can only run workspaces of a single tenant (the user themselves) at a time.
	RegisterClusterRequest_CLUSTER_TYPE_LOCAL RegisterClusterRequest_ClusterType = 1
	// The cluster is a Cloud workspace cluster which is managed by Gitpod
	// and can run multiple tenants.
	RegisterClusterRequest_CLUSTER_TYPE_MULTI_TENANT RegisterClusterRequest_ClusterType = 2
)

// Enum value maps for RegisterClusterRequest_ClusterType.
var (
	RegisterClusterRequest_ClusterType_name = map[int32]string{
		0: "CLUSTER_TYPE_UNSPECIFIED",
		1: "CLUSTER_TYPE_LOCAL",
		2: "CLUSTER_TYPE_MULTI_TENANT",
	}
	RegisterClusterRequest_ClusterType_value = map[string]int32{
		"CLUSTER_TYPE_UNSPECIFIED":  0,
		"CLUSTER_TYPE_LOCAL":        1,
		"CLUSTER_TYPE_MULTI_TENANT": 2,
	}
)

func (x RegisterClusterRequest_ClusterType) Enum() *RegisterClusterRequest_ClusterType {
	p := new(RegisterClusterRequest_ClusterType)
	*p = x
	return p
}

func (x RegisterClusterRequest_ClusterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterClusterRequest_ClusterType) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_cluster_proto_enumTypes[1].Descriptor()
}

func (RegisterClusterRequest_ClusterType) Type() protoreflect.EnumType {
	return &file_gitpod_v1_cluster_proto_enumTypes[1]
}

func (x RegisterClusterRequest_ClusterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterClusterRequest_ClusterType.Descriptor instead.
func (RegisterClusterRequest_ClusterType) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{0, 1}
}

// WorkspaceType specifies the purpose/use of a workspace. Different workspace types are handled differently by all parts of the system.
type GetClusterWorkspacesResponse_WorkspaceType int32

const (
	GetClusterWorkspacesResponse_WORKSPACE_TYPE_UNSPECIFIED GetClusterWorkspacesResponse_WorkspaceType = 0
	// Regular workspaces are your off-the-mill workspaces intended for users. They are directly user-facing and hence are most important.
	GetClusterWorkspacesResponse_WORKSPACE_TYPE_REGULAR GetClusterWorkspacesResponse_WorkspaceType = 1
	// Prebuild workspaces are workspaces used to pre-build the content of other workspaces. They run headless and have no direct user-interaction.
	GetClusterWorkspacesResponse_WORKSPACE_TYPE_PREBUILD GetClusterWorkspacesResponse_WorkspaceType = 2
)

// Enum value maps for GetClusterWorkspacesResponse_WorkspaceType.
var (
	GetClusterWorkspacesResponse_WorkspaceType_name = map[int32]string{
		0: "WORKSPACE_TYPE_UNSPECIFIED",
		1: "WORKSPACE_TYPE_REGULAR",
		2: "WORKSPACE_TYPE_PREBUILD",
	}
	GetClusterWorkspacesResponse_WorkspaceType_value = map[string]int32{
		"WORKSPACE_TYPE_UNSPECIFIED": 0,
		"WORKSPACE_TYPE_REGULAR":     1,
		"WORKSPACE_TYPE_PREBUILD":    2,
	}
)

func (x GetClusterWorkspacesResponse_WorkspaceType) Enum() *GetClusterWorkspacesResponse_WorkspaceType {
	p := new(GetClusterWorkspacesResponse_WorkspaceType)
	*p = x
	return p
}

func (x GetClusterWorkspacesResponse_WorkspaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetClusterWorkspacesResponse_WorkspaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_cluster_proto_enumTypes[2].Descriptor()
}

func (GetClusterWorkspacesResponse_WorkspaceType) Type() protoreflect.EnumType {
	return &file_gitpod_v1_cluster_proto_enumTypes[2]
}

func (x GetClusterWorkspacesResponse_WorkspaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetClusterWorkspacesResponse_WorkspaceType.Descriptor instead.
func (GetClusterWorkspacesResponse_WorkspaceType) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{5, 0}
}

// WorkspaceConditionBool is a trinary bool: true/false/empty
type UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool int32

const (
	UpdateClusterWorkspaceStatusRequest_WORKSPACE_CONDITION_BOOL_UNSPECIFIED UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool = 0
	UpdateClusterWorkspaceStatusRequest_WORKSPACE_CONDITION_BOOL_TRUE        UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool = 1
	UpdateClusterWorkspaceStatusRequest_WORKSPACE_CONDITION_BOOL_FALSE       UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool = 2
)

// Enum value maps for UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool.
var (
	UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool_name = map[int32]string{
		0: "WORKSPACE_CONDITION_BOOL_UNSPECIFIED",
		1: "WORKSPACE_CONDITION_BOOL_TRUE",
		2: "WORKSPACE_CONDITION_BOOL_FALSE",
	}
	UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool_value = map[string]int32{
		"WORKSPACE_CONDITION_BOOL_UNSPECIFIED": 0,
		"WORKSPACE_CONDITION_BOOL_TRUE":        1,
		"WORKSPACE_CONDITION_BOOL_FALSE":       2,
	}
)

func (x UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool) Enum() *UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool {
	p := new(UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool)
	*p = x
	return p
}

func (x UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_cluster_proto_enumTypes[3].Descriptor()
}

func (UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool) Type() protoreflect.EnumType {
	return &file_gitpod_v1_cluster_proto_enumTypes[3]
}

func (x UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool.Descriptor instead.
func (UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{6, 0}
}

type UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode int32

const (
	UpdateClusterWorkspaceStatusRequest_WorkspaceACK_STATUS_CODE_UNSPECIFIED         UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode = 0
	UpdateClusterWorkspaceStatusRequest_WorkspaceACK_STATUS_CODE_UNKNOWN             UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode = 1
	UpdateClusterWorkspaceStatusRequest_WorkspaceACK_STATUS_CODE_OK                  UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode = 2
	UpdateClusterWorkspaceStatusRequest_WorkspaceACK_STATUS_CODE_INVALID_RESOURCE    UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode = 3
	UpdateClusterWorkspaceStatusRequest_WorkspaceACK_STATUS_CODE_FAILED_PRECONDITION UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode = 4
)

// Enum value maps for UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode.
var (
	UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode_name = map[int32]string{
		0: "STATUS_CODE_UNSPECIFIED",
		1: "STATUS_CODE_UNKNOWN",
		2: "STATUS_CODE_OK",
		3: "STATUS_CODE_INVALID_RESOURCE",
		4: "STATUS_CODE_FAILED_PRECONDITION",
	}
	UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode_value = map[string]int32{
		"STATUS_CODE_UNSPECIFIED":         0,
		"STATUS_CODE_UNKNOWN":             1,
		"STATUS_CODE_OK":                  2,
		"STATUS_CODE_INVALID_RESOURCE":    3,
		"STATUS_CODE_FAILED_PRECONDITION": 4,
	}
)

func (x UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode) Enum() *UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode {
	p := new(UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode)
	*p = x
	return p
}

func (x UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_cluster_proto_enumTypes[4].Descriptor()
}

func (UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode) Type() protoreflect.EnumType {
	return &file_gitpod_v1_cluster_proto_enumTypes[4]
}

func (x UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode.Descriptor instead.
func (UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{6, 1, 0}
}

type RegisterClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cluster's ID - must be unique within the scope
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The cluster's scope
	Scope RegisterClusterRequest_Scope `protobuf:"varint,2,opt,name=scope,proto3,enum=gitpod.v1.RegisterClusterRequest_Scope" json:"scope,omitempty"`
	// The cluster's type
	Type RegisterClusterRequest_ClusterType `protobuf:"varint,3,opt,name=type,proto3,enum=gitpod.v1.RegisterClusterRequest_ClusterType" json:"type,omitempty"`
	// The cluster's name which is shown to users
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// The workspace classes this cluster has to offer
	WorkspaceClasses []*RegisterClusterRequest_WorkspaceClass `protobuf:"bytes,5,rep,name=workspace_classes,json=workspaceClasses,proto3" json:"workspace_classes,omitempty"`
}

func (x *RegisterClusterRequest) Reset() {
	*x = RegisterClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterClusterRequest) ProtoMessage() {}

func (x *RegisterClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterClusterRequest.ProtoReflect.Descriptor instead.
func (*RegisterClusterRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterClusterRequest) GetScope() RegisterClusterRequest_Scope {
	if x != nil {
		return x.Scope
	}
	return RegisterClusterRequest_SCOPE_UNSPECIFIED
}

func (x *RegisterClusterRequest) GetType() RegisterClusterRequest_ClusterType {
	if x != nil {
		return x.Type
	}
	return RegisterClusterRequest_CLUSTER_TYPE_UNSPECIFIED
}

func (x *RegisterClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterClusterRequest) GetWorkspaceClasses() []*RegisterClusterRequest_WorkspaceClass {
	if x != nil {
		return x.WorkspaceClasses
	}
	return nil
}

type RegisterClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cluster's registration token. This token identifies the cluster and must be used
	// in all subsequent requests.
	RegistrationToken string `protobuf:"bytes,1,opt,name=registration_token,json=registrationToken,proto3" json:"registration_token,omitempty"`
}

func (x *RegisterClusterResponse) Reset() {
	*x = RegisterClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterClusterResponse) ProtoMessage() {}

func (x *RegisterClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterClusterResponse.ProtoReflect.Descriptor instead.
func (*RegisterClusterResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterClusterResponse) GetRegistrationToken() string {
	if x != nil {
		return x.RegistrationToken
	}
	return ""
}

type RenewClusterRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cluster's registration token
	RegistrationToken string `protobuf:"bytes,1,opt,name=registration_token,json=registrationToken,proto3" json:"registration_token,omitempty"`
}

func (x *RenewClusterRegistrationRequest) Reset() {
	*x = RenewClusterRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_cluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewClusterRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewClusterRegistrationRequest) ProtoMessage() {}

func (x *RenewClusterRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_cluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewClusterRegistrationRequest.ProtoReflect.Descriptor instead.
func (*RenewClusterRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *RenewClusterRegistrationRequest) GetRegistrationToken() string {
	if x != nil {
		return x.RegistrationToken
	}
	return ""
}

type RenewClusterRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cluster's registration token. This token identifies the cluster and must be used
	// in all subsequent requests.
	RegistrationToken string `protobuf:"bytes,1,opt,name=registration_token,json=registrationToken,proto3" json:"registration_token,omitempty"`
}

func (x *RenewClusterRegistrationResponse) Reset() {
	*x = RenewClusterRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_cluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewClusterRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewClusterRegistrationResponse) ProtoMessage() {}

func (x *RenewClusterRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_cluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewClusterRegistrationResponse.ProtoReflect.Descriptor instead.
func (*RenewClusterRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *RenewClusterRegistrationResponse) GetRegistrationToken() string {
	if x != nil {
		return x.RegistrationToken
	}
	return ""
}

type GetClusterWorkspacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing workspaces
	Pagination *PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// The cluster's registration token
	RegistrationToken string `protobuf:"bytes,2,opt,name=registration_token,json=registrationToken,proto3" json:"registration_token,omitempty"`
}

func (x *GetClusterWorkspacesRequest) Reset() {
	*x = GetClusterWorkspacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_cluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterWorkspacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterWorkspacesRequest) ProtoMessage() {}

func (x *GetClusterWorkspacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_cluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterWorkspacesRequest.ProtoReflect.Descriptor instead.
func (*GetClusterWorkspacesRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *GetClusterWorkspacesRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetClusterWorkspacesRequest) GetRegistrationToken() string {
	if x != nil {
		return x.RegistrationToken
	}
	return ""
}

type GetClusterWorkspacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing workspaces
	Pagination *PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// The workspaces running on the cluster
	Workspaces []*GetClusterWorkspacesResponse_Workspace `protobuf:"bytes,2,rep,name=workspaces,proto3" json:"workspaces,omitempty"`
}

func (x *GetClusterWorkspacesResponse) Reset() {
	*x = GetClusterWorkspacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_cluster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterWorkspacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterWorkspacesResponse) ProtoMessage() {}

func (x *GetClusterWorkspacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_cluster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterWorkspacesResponse.ProtoReflect.Descriptor instead.
func (*GetClusterWorkspacesResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *GetClusterWorkspacesResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetClusterWorkspacesResponse) GetWorkspaces() []*GetClusterWorkspacesResponse_Workspace {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

type UpdateClusterWorkspaceStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cluster's registration token
	RegistrationToken string `protobuf:"bytes,1,opt,name=registration_token,json=registrationToken,proto3" json:"registration_token,omitempty"`
	// The workspace's ID
	WorkspaceId string                                            `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	Ack         *UpdateClusterWorkspaceStatusRequest_WorkspaceACK `protobuf:"bytes,3,opt,name=ack,proto3" json:"ack,omitempty"`
	// The workspace's status
	Status *UpdateClusterWorkspaceStatusRequest_WorkspaceStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateClusterWorkspaceStatusRequest) Reset() {
	*x = UpdateClusterWorkspaceStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_cluster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterWorkspaceStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterWorkspaceStatusRequest) ProtoMessage() {}

func (x *UpdateClusterWorkspaceStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_cluster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterWorkspaceStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterWorkspaceStatusRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateClusterWorkspaceStatusRequest) GetRegistrationToken() string {
	if x != nil {
		return x.RegistrationToken
	}
	return ""
}

func (x *UpdateClusterWorkspaceStatusRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *UpdateClusterWorkspaceStatusRequest) GetAck() *UpdateClusterWorkspaceStatusRequest_WorkspaceACK {
	if x != nil {
		return x.Ack
	}
	return nil
}

func (x *UpdateClusterWorkspaceStatusRequest) GetStatus() *UpdateClusterWorkspaceStatusRequest_WorkspaceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type UpdateClusterWorkspaceStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateClusterWorkspaceStatusResponse) Reset() {
	*x = UpdateClusterWorkspaceStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_cluster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterWorkspaceStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterWorkspaceStatusResponse) ProtoMessage() {}

func (x *UpdateClusterWorkspaceStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_cluster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterWorkspaceStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateClusterWorkspaceStatusResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{7}
}

type RegisterClusterRequest_WorkspaceClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *RegisterClusterRequest_WorkspaceClass) Reset() {
	*x = RegisterClusterRequest_WorkspaceClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_cluster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterClusterRequest_WorkspaceClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterClusterRequest_WorkspaceClass) ProtoMessage() {}

func (x *RegisterClusterRequest_WorkspaceClass) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_cluster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterClusterRequest_WorkspaceClass.ProtoReflect.Descriptor instead.
func (*RegisterClusterRequest_WorkspaceClass) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RegisterClusterRequest_WorkspaceClass) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterClusterRequest_WorkspaceClass) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *RegisterClusterRequest_WorkspaceClass) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Timeout configures the workspace timeout
type GetClusterWorkspacesResponse_Timeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timeout optionally sets a custom workspace timeout
	Default string `protobuf:"bytes,1,opt,name=default,proto3" json:"default,omitempty"`
	// timeout optionally sets a custom closed timeout
	Closed string `protobuf:"bytes,2,opt,name=closed,proto3" json:"closed,omitempty"`
	// maximum lifetime of the workspace
	MaximumLifetime string `protobuf:"bytes,3,opt,name=maximum_lifetime,json=maximumLifetime,proto3" json:"maximum_lifetime,omitempty"`
}

func (x *GetClusterWorkspacesResponse_Timeout) Reset() {
	*x = GetClusterWorkspacesResponse_Timeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_cluster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterWorkspacesResponse_Timeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterWorkspacesResponse_Timeout) ProtoMessage() {}

func (x *GetClusterWorkspacesResponse_Timeout) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_cluster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterWorkspacesResponse_Timeout.ProtoReflect.Descriptor instead.
func (*GetClusterWorkspacesResponse_Timeout) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetClusterWorkspacesResponse_Timeout) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *GetClusterWorkspacesResponse_Timeout) GetClosed() string {
	if x != nil {
		return x.Closed
	}
	return ""
}

func (x *GetClusterWorkspacesResponse_Timeout) GetMaximumLifetime() string {
	if x != nil {
		return x.MaximumLifetime
	}
	return ""
}

// GitSpec configures the Git available within the workspace
type GetClusterWorkspacesResponse_GitSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Git username
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// The Git email address
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *GetClusterWorkspacesResponse_GitSpec) Reset() {
	*x = GetClusterWorkspacesResponse_GitSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_cluster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterWorkspacesResponse_GitSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterWorkspacesResponse_GitSpec) ProtoMessage() {}

func (x *GetClusterWorkspacesResponse_GitSpec) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_cluster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterWorkspacesResponse_GitSpec.ProtoReflect.Descriptor instead.
func (*GetClusterWorkspacesResponse_GitSpec) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{5, 1}
}

func (x *GetClusterWorkspacesResponse_GitSpec) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetClusterWorkspacesResponse_GitSpec) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// EnvironmentVariable defines a single environment variable
type GetClusterWorkspacesResponse_EnvironmentVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetClusterWorkspacesResponse_EnvironmentVariable) Reset() {
	*x = GetClusterWorkspacesResponse_EnvironmentVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_cluster_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterWorkspacesResponse_EnvironmentVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterWorkspacesResponse_EnvironmentVariable) ProtoMessage() {}

func (x *GetClusterWorkspacesResponse_EnvironmentVariable) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_cluster_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterWorkspacesResponse_EnvironmentVariable.ProtoReflect.Descriptor instead.
func (*GetClusterWorkspacesResponse_EnvironmentVariable) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{5, 2}
}

func (x *GetClusterWorkspacesResponse_EnvironmentVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetClusterWorkspacesResponse_EnvironmentVariable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// WorkspaceSpec specifies the configuration of a workspace for a workspace start
type GetClusterWorkspacesResponse_WorkspaceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// initializer configures how the workspace is to be initialized
	Initializer []byte `protobuf:"bytes,4,opt,name=initializer,proto3" json:"initializer,omitempty"`
	// ports is the set of ports which ought to be exposed to the internet
	Ports []*WorkspacePort `protobuf:"bytes,5,rep,name=ports,proto3" json:"ports,omitempty"`
	// envvars are user-defined environment variables which ought to be available in the workspace
	Envvars []*GetClusterWorkspacesResponse_EnvironmentVariable `protobuf:"bytes,6,rep,name=envvars,proto3" json:"envvars,omitempty"`
	// Git configures the Git user in the workspace
	Git     *GetClusterWorkspacesResponse_GitSpec `protobuf:"bytes,9,opt,name=git,proto3" json:"git,omitempty"`
	Timeout *GetClusterWorkspacesResponse_Timeout `protobuf:"bytes,10,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// admission controlls who can access the workspace and its ports.
	Admission AdmissionLevel `protobuf:"varint,11,opt,name=admission,proto3,enum=gitpod.v1.AdmissionLevel" json:"admission,omitempty"`
	// Class denotes the class of the workspace we ought to start
	Class string `protobuf:"bytes,13,opt,name=class,proto3" json:"class,omitempty"`
	// ssh_public_keys is user's uploaded ssh public keys
	SshPublicKeys []string `protobuf:"bytes,15,rep,name=ssh_public_keys,json=sshPublicKeys,proto3" json:"ssh_public_keys,omitempty"`
	// ide_image_layers are contains the images needed for the ide to run,
	// including ide-desktop, desktop-plugin and so on
	IdeImageLayers []string `protobuf:"bytes,17,rep,name=ide_image_layers,json=ideImageLayers,proto3" json:"ide_image_layers,omitempty"`
}

func (x *GetClusterWorkspacesResponse_WorkspaceSpec) Reset() {
	*x = GetClusterWorkspacesResponse_WorkspaceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_cluster_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterWorkspacesResponse_WorkspaceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterWorkspacesResponse_WorkspaceSpec) ProtoMessage() {}

func (x *GetClusterWorkspacesResponse_WorkspaceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_cluster_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterWorkspacesResponse_WorkspaceSpec.ProtoReflect.Descriptor instead.
func (*GetClusterWorkspacesResponse_WorkspaceSpec) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{5, 3}
}

func (x *GetClusterWorkspacesResponse_WorkspaceSpec) GetInitializer() []byte {
	if x != nil {
		return x.Initializer
	}
	return nil
}

func (x *GetClusterWorkspacesResponse_WorkspaceSpec) GetPorts() []*WorkspacePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *GetClusterWorkspacesResponse_WorkspaceSpec) GetEnvvars() []*GetClusterWorkspacesResponse_EnvironmentVariable {
	if x != nil {
		return x.Envvars
	}
	return nil
}

func (x *GetClusterWorkspacesResponse_WorkspaceSpec) GetGit() *GetClusterWorkspacesResponse_GitSpec {
	if x != nil {
		return x.Git
	}
	return nil
}

func (x *GetClusterWorkspacesResponse_WorkspaceSpec) GetTimeout() *GetClusterWorkspacesResponse_Timeout {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *GetClusterWorkspacesResponse_WorkspaceSpec) GetAdmission() AdmissionLevel {
	if x != nil {
		return x.Admission
	}
	return AdmissionLevel_ADMISSION_LEVEL_UNSPECIFIED
}

func (x *GetClusterWorkspacesResponse_WorkspaceSpec) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *GetClusterWorkspacesResponse_WorkspaceSpec) GetSshPublicKeys() []string {
	if x != nil {
		return x.SshPublicKeys
	}
	return nil
}

func (x *GetClusterWorkspacesResponse_WorkspaceSpec) GetIdeImageLayers() []string {
	if x != nil {
		return x.IdeImageLayers
	}
	return nil
}

// WorkspaceMetadata is data associated with a workspace that's required for other parts of the system to function
type GetClusterWorkspacesResponse_WorkspaceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// owner is the ID of the Gitpod user to whom we'll bill this workspace and who we consider responsible for its content
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// meta_id is the workspace ID of this currently running workspace instance on the "meta pool" side
	MetaId string `protobuf:"bytes,2,opt,name=meta_id,json=metaId,proto3" json:"meta_id,omitempty"`
	// started_at is the time when this workspace was started. Consider this field read-only, i.e. setting in a request will have no effect.
	StartedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// Annotations are key/value pairs that gets attached to the workspace.
	// This is primarily intended for annotating headless workspace loads.
	Annotations map[string]string `protobuf:"bytes,4,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// team the workspace belongs to, if the workspace is not associated with a team, this property will be empty
	Team *string `protobuf:"bytes,5,opt,name=team,proto3,oneof" json:"team,omitempty"`
	// project the workspace belongs to, if the workspace is not associated with a project, this property will be empty
	Project *string `protobuf:"bytes,6,opt,name=project,proto3,oneof" json:"project,omitempty"`
}

func (x *GetClusterWorkspacesResponse_WorkspaceMetadata) Reset() {
	*x = GetClusterWorkspacesResponse_WorkspaceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_cluster_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterWorkspacesResponse_WorkspaceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterWorkspacesResponse_WorkspaceMetadata) ProtoMessage() {}

func (x *GetClusterWorkspacesResponse_WorkspaceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_cluster_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterWorkspacesResponse_WorkspaceMetadata.ProtoReflect.Descriptor instead.
func (*GetClusterWorkspacesResponse_WorkspaceMetadata) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{5, 4}
}

func (x *GetClusterWorkspacesResponse_WorkspaceMetadata) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GetClusterWorkspacesResponse_WorkspaceMetadata) GetMetaId() string {
	if x != nil {
		return x.MetaId
	}
	return ""
}

func (x *GetClusterWorkspacesResponse_WorkspaceMetadata) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *GetClusterWorkspacesResponse_WorkspaceMetadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *GetClusterWorkspacesResponse_WorkspaceMetadata) GetTeam() string {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return ""
}

func (x *GetClusterWorkspacesResponse_WorkspaceMetadata) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

type GetClusterWorkspacesResponse_Workspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is a unique identifier of this workspace. No other workspace with the same name must be managed by this workspace manager
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata is data associated with this workspace that's required for other parts of Gitpod to function
	Metadata *GetClusterWorkspacesResponse_WorkspaceMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec is the configuration of the workspace that's required for the ws-manager to start the workspace
	Spec *GetClusterWorkspacesResponse_WorkspaceSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// Type denots the kind of workspace we ought to start
	Type GetClusterWorkspacesResponse_WorkspaceType `protobuf:"varint,4,opt,name=type,proto3,enum=gitpod.v1.GetClusterWorkspacesResponse_WorkspaceType" json:"type,omitempty"`
}

func (x *GetClusterWorkspacesResponse_Workspace) Reset() {
	*x = GetClusterWorkspacesResponse_Workspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_cluster_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterWorkspacesResponse_Workspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterWorkspacesResponse_Workspace) ProtoMessage() {}

func (x *GetClusterWorkspacesResponse_Workspace) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_cluster_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterWorkspacesResponse_Workspace.ProtoReflect.Descriptor instead.
func (*GetClusterWorkspacesResponse_Workspace) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{5, 5}
}

func (x *GetClusterWorkspacesResponse_Workspace) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetClusterWorkspacesResponse_Workspace) GetMetadata() *GetClusterWorkspacesResponse_WorkspaceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetClusterWorkspacesResponse_Workspace) GetSpec() *GetClusterWorkspacesResponse_WorkspaceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *GetClusterWorkspacesResponse_Workspace) GetType() GetClusterWorkspacesResponse_WorkspaceType {
	if x != nil {
		return x.Type
	}
	return GetClusterWorkspacesResponse_WORKSPACE_TYPE_UNSPECIFIED
}

// WorkspaceCondition gives more detailed information as to the state of the workspace. Which condition actually
// has a value depends on the phase the workspace is in.
type UpdateClusterWorkspaceStatusRequest_WorkspaceConditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// failed contains the reason the workspace failed to operate. If this field is empty, the workspace has not failed.
	Failed string `protobuf:"bytes,1,opt,name=failed,proto3" json:"failed,omitempty"`
	// timeout contains the reason the workspace has timed out. If this field is empty, the workspace has not timed out.
	Timeout string `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// pulling_images marks if the workspace is currently pulling its images. This condition can only be set during PhaseCreating
	PullingImages UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool `protobuf:"varint,3,opt,name=pulling_images,json=pullingImages,proto3,enum=gitpod.v1.UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool" json:"pulling_images,omitempty"`
	// snapshot contains a snapshot URL if a snapshot was produced prior to shutting the workspace down. This condition is only used for headless workspaces.
	Snapshot string `protobuf:"bytes,5,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	// final_backup_complete determines if the last state of the workspace has been backed up to remote storage.
	// Once this is true, a new workspace with the same ID will be able to use this backup.
	FinalBackupComplete UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool `protobuf:"varint,6,opt,name=final_backup_complete,json=finalBackupComplete,proto3,enum=gitpod.v1.UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool" json:"final_backup_complete,omitempty"`
	// deployed indicates if a workspace container is currently deployed. If this condition is false, there is no means for the user to alter the workspace content.
	Deployed UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool `protobuf:"varint,7,opt,name=deployed,proto3,enum=gitpod.v1.UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool" json:"deployed,omitempty"`
	// network_not_ready indicates if a workspace container is currently experiencing a network problem.
	NetworkNotReady UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool `protobuf:"varint,8,opt,name=network_not_ready,json=networkNotReady,proto3,enum=gitpod.v1.UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool" json:"network_not_ready,omitempty"`
	// first_user_activity is the time when MarkActive was first called on the workspace
	FirstUserActivity *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=first_user_activity,json=firstUserActivity,proto3" json:"first_user_activity,omitempty"`
	// headless_task_failed indicates that a headless workspace task failed
	HeadlessTaskFailed string `protobuf:"bytes,10,opt,name=headless_task_failed,json=headlessTaskFailed,proto3" json:"headless_task_failed,omitempty"`
	// stopped_by_request is true if the workspace was stopped using a StopWorkspace call
	StoppedByRequest UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool `protobuf:"varint,11,opt,name=stopped_by_request,json=stoppedByRequest,proto3,enum=gitpod.v1.UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool" json:"stopped_by_request,omitempty"`
	// volume_snapshot contains info about volume snapshot that was used to save persistent volume
	VolumeSnapshot string `protobuf:"bytes,12,opt,name=volume_snapshot,json=volumeSnapshot,proto3" json:"volume_snapshot,omitempty"`
	// aborted is true if StopWorkspace was called with StopWorkspacePolicy set to ABORT
	Aborted UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool `protobuf:"varint,13,opt,name=aborted,proto3,enum=gitpod.v1.UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool" json:"aborted,omitempty"`
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceConditions) Reset() {
	*x = UpdateClusterWorkspaceStatusRequest_WorkspaceConditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_cluster_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterWorkspaceStatusRequest_WorkspaceConditions) ProtoMessage() {}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceConditions) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_cluster_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterWorkspaceStatusRequest_WorkspaceConditions.ProtoReflect.Descriptor instead.
func (*UpdateClusterWorkspaceStatusRequest_WorkspaceConditions) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{6, 0}
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceConditions) GetFailed() string {
	if x != nil {
		return x.Failed
	}
	return ""
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceConditions) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceConditions) GetPullingImages() UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool {
	if x != nil {
		return x.PullingImages
	}
	return UpdateClusterWorkspaceStatusRequest_WORKSPACE_CONDITION_BOOL_UNSPECIFIED
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceConditions) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceConditions) GetFinalBackupComplete() UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool {
	if x != nil {
		return x.FinalBackupComplete
	}
	return UpdateClusterWorkspaceStatusRequest_WORKSPACE_CONDITION_BOOL_UNSPECIFIED
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceConditions) GetDeployed() UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool {
	if x != nil {
		return x.Deployed
	}
	return UpdateClusterWorkspaceStatusRequest_WORKSPACE_CONDITION_BOOL_UNSPECIFIED
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceConditions) GetNetworkNotReady() UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool {
	if x != nil {
		return x.NetworkNotReady
	}
	return UpdateClusterWorkspaceStatusRequest_WORKSPACE_CONDITION_BOOL_UNSPECIFIED
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceConditions) GetFirstUserActivity() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstUserActivity
	}
	return nil
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceConditions) GetHeadlessTaskFailed() string {
	if x != nil {
		return x.HeadlessTaskFailed
	}
	return ""
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceConditions) GetStoppedByRequest() UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool {
	if x != nil {
		return x.StoppedByRequest
	}
	return UpdateClusterWorkspaceStatusRequest_WORKSPACE_CONDITION_BOOL_UNSPECIFIED
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceConditions) GetVolumeSnapshot() string {
	if x != nil {
		return x.VolumeSnapshot
	}
	return ""
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceConditions) GetAborted() UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool {
	if x != nil {
		return x.Aborted
	}
	return UpdateClusterWorkspaceStatusRequest_WORKSPACE_CONDITION_BOOL_UNSPECIFIED
}

// WorkspaceACK is a simple acknowledgement of a workspace status update
type UpdateClusterWorkspaceStatusRequest_WorkspaceACK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3,enum=gitpod.v1.UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode" json:"status_code,omitempty"`
	Message    string                                                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceACK) Reset() {
	*x = UpdateClusterWorkspaceStatusRequest_WorkspaceACK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_cluster_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceACK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterWorkspaceStatusRequest_WorkspaceACK) ProtoMessage() {}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceACK) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_cluster_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterWorkspaceStatusRequest_WorkspaceACK.ProtoReflect.Descriptor instead.
func (*UpdateClusterWorkspaceStatusRequest_WorkspaceACK) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{6, 1}
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceACK) GetStatusCode() UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return UpdateClusterWorkspaceStatusRequest_WorkspaceACK_STATUS_CODE_UNSPECIFIED
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceACK) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// WorkspaceStatus describes a workspace status
type UpdateClusterWorkspaceStatusRequest_WorkspaceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of the workspace
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// version of the status update. Workspace instances themselves are unversioned,
	// but their statuus has different versions.
	// The value of this field has no semantic meaning (e.g. don't interpret it as
	// as a timestemp), but it can be used to impose a partial order.
	// If a.status_version < b.status_version then a was the status before b.
	StatusVersion uint64 `protobuf:"varint,10,opt,name=status_version,json=statusVersion,proto3" json:"status_version,omitempty"`
	// the phase of a workspace is a simple, high-level summary of where the workspace is in its lifecycle
	Phase WorkspacePhase_Phase `protobuf:"varint,4,opt,name=phase,proto3,enum=gitpod.v1.WorkspacePhase_Phase" json:"phase,omitempty"`
	// conditions detail the current state of the workspace
	Conditions *UpdateClusterWorkspaceStatusRequest_WorkspaceConditions `protobuf:"bytes,5,opt,name=conditions,proto3" json:"conditions,omitempty"`
	// message is an optional human-readable message detailing the current phase
	Message string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	// repo details the Git working copy status of the workspace.
	// Note: this is a best-effort field and more often than not will not be present. Its absence does not
	// indicate the absence of a working copy.
	Repo *WorkspaceGitStatus `protobuf:"bytes,7,opt,name=repo,proto3" json:"repo,omitempty"`
	// auth provides authentication information about the workspace. This info is primarily used by ws-proxy.
	OwnerToken string `protobuf:"bytes,9,opt,name=owner_token,json=ownerToken,proto3" json:"owner_token,omitempty"`
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceStatus) Reset() {
	*x = UpdateClusterWorkspaceStatusRequest_WorkspaceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_cluster_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterWorkspaceStatusRequest_WorkspaceStatus) ProtoMessage() {}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_cluster_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterWorkspaceStatusRequest_WorkspaceStatus.ProtoReflect.Descriptor instead.
func (*UpdateClusterWorkspaceStatusRequest_WorkspaceStatus) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_cluster_proto_rawDescGZIP(), []int{6, 2}
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceStatus) GetStatusVersion() uint64 {
	if x != nil {
		return x.StatusVersion
	}
	return 0
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceStatus) GetPhase() WorkspacePhase_Phase {
	if x != nil {
		return x.Phase
	}
	return WorkspacePhase_PHASE_UNSPECIFIED
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceStatus) GetConditions() *UpdateClusterWorkspaceStatusRequest_WorkspaceConditions {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceStatus) GetRepo() *WorkspaceGitStatus {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *UpdateClusterWorkspaceStatusRequest_WorkspaceStatus) GetOwnerToken() string {
	if x != nil {
		return x.OwnerToken
	}
	return ""
}

var File_gitpod_v1_cluster_proto protoreflect.FileDescriptor

var file_gitpod_v1_cluster_proto_rawDesc = []byte{
	0x0a, 0x17, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1a, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x04, 0x0a,
	0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a,
	0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x65, 0x0a, 0x0e,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x47,
	0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x02, 0x22, 0x62, 0x0a, 0x0b, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c,
	0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4c, 0x55, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x22,
	0x48, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x50, 0x0a, 0x1f, 0x52, 0x65, 0x6e,
	0x65, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x51, 0x0a, 0x20, 0x52,
	0x65, 0x6e, 0x65, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8a,
	0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xf0, 0x0c, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x66,
	0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x3b, 0x0a, 0x07, 0x47, 0x69, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x1a, 0x3f, 0x0a, 0x13, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0xe7, 0x03, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x76,
	0x61, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x76, 0x61, 0x72, 0x73, 0x12,
	0x41, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x03, 0x67,
	0x69, 0x74, 0x12, 0x49, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x37, 0x0a,
	0x09, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x09, 0x61, 0x64, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x73, 0x68, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x64, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0xf8,
	0x02, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x61, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x6c,
	0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65,
	0x61, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x88, 0x02, 0x0a, 0x09, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x49,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x68, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x02, 0x22, 0xd4,
	0x0f, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41,
	0x43, 0x4b, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a,
	0x9f, 0x07, 0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x6c, 0x0a, 0x0e, 0x70, 0x75, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x45, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0d, 0x70, 0x75, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x79, 0x0a, 0x15, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x45, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x61,
	0x0a, 0x08, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x45, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x08, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x64, 0x12, 0x71, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x12, 0x4a, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x30, 0x0a, 0x14, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x73, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x42, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x5f, 0x0a, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x45, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x1a, 0xb1, 0x02, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41,
	0x43, 0x4b, 0x12, 0x67, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x41, 0x43, 0x4b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x4b, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x03,
	0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x04, 0x1a, 0xd1, 0x02, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x47, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x16, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x24, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x4f, 0x4c,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21,
	0x0a, 0x1d, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x5f, 0x46, 0x41,
	0x4c, 0x53, 0x45, 0x10, 0x02, 0x22, 0x26, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd2, 0x03,
	0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x5a, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x18,
	0x52, 0x65, 0x6e, 0x65, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81,
	0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitpod_v1_cluster_proto_rawDescOnce sync.Once
	file_gitpod_v1_cluster_proto_rawDescData = file_gitpod_v1_cluster_proto_rawDesc
)

func file_gitpod_v1_cluster_proto_rawDescGZIP() []byte {
	file_gitpod_v1_cluster_proto_rawDescOnce.Do(func() {
		file_gitpod_v1_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitpod_v1_cluster_proto_rawDescData)
	})
	return file_gitpod_v1_cluster_proto_rawDescData
}

var file_gitpod_v1_cluster_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_gitpod_v1_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_gitpod_v1_cluster_proto_goTypes = []interface{}{
	(RegisterClusterRequest_Scope)(0),                                // 0: gitpod.v1.RegisterClusterRequest.Scope
	(RegisterClusterRequest_ClusterType)(0),                          // 1: gitpod.v1.RegisterClusterRequest.ClusterType
	(GetClusterWorkspacesResponse_WorkspaceType)(0),                  // 2: gitpod.v1.GetClusterWorkspacesResponse.WorkspaceType
	(UpdateClusterWorkspaceStatusRequest_WorkspaceConditionBool)(0),  // 3: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditionBool
	(UpdateClusterWorkspaceStatusRequest_WorkspaceACK_StatusCode)(0), // 4: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceACK.StatusCode
	(*RegisterClusterRequest)(nil),                                   // 5: gitpod.v1.RegisterClusterRequest
	(*RegisterClusterResponse)(nil),                                  // 6: gitpod.v1.RegisterClusterResponse
	(*RenewClusterRegistrationRequest)(nil),                          // 7: gitpod.v1.RenewClusterRegistrationRequest
	(*RenewClusterRegistrationResponse)(nil),                         // 8: gitpod.v1.RenewClusterRegistrationResponse
	(*GetClusterWorkspacesRequest)(nil),                              // 9: gitpod.v1.GetClusterWorkspacesRequest
	(*GetClusterWorkspacesResponse)(nil),                             // 10: gitpod.v1.GetClusterWorkspacesResponse
	(*UpdateClusterWorkspaceStatusRequest)(nil),                      // 11: gitpod.v1.UpdateClusterWorkspaceStatusRequest
	(*UpdateClusterWorkspaceStatusResponse)(nil),                     // 12: gitpod.v1.UpdateClusterWorkspaceStatusResponse
	(*RegisterClusterRequest_WorkspaceClass)(nil),                    // 13: gitpod.v1.RegisterClusterRequest.WorkspaceClass
	(*GetClusterWorkspacesResponse_Timeout)(nil),                     // 14: gitpod.v1.GetClusterWorkspacesResponse.Timeout
	(*GetClusterWorkspacesResponse_GitSpec)(nil),                     // 15: gitpod.v1.GetClusterWorkspacesResponse.GitSpec
	(*GetClusterWorkspacesResponse_EnvironmentVariable)(nil),         // 16: gitpod.v1.GetClusterWorkspacesResponse.EnvironmentVariable
	(*GetClusterWorkspacesResponse_WorkspaceSpec)(nil),               // 17: gitpod.v1.GetClusterWorkspacesResponse.WorkspaceSpec
	(*GetClusterWorkspacesResponse_WorkspaceMetadata)(nil),           // 18: gitpod.v1.GetClusterWorkspacesResponse.WorkspaceMetadata
	(*GetClusterWorkspacesResponse_Workspace)(nil),                   // 19: gitpod.v1.GetClusterWorkspacesResponse.Workspace
	nil, // 20: gitpod.v1.GetClusterWorkspacesResponse.WorkspaceMetadata.AnnotationsEntry
	(*UpdateClusterWorkspaceStatusRequest_WorkspaceConditions)(nil), // 21: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditions
	(*UpdateClusterWorkspaceStatusRequest_WorkspaceACK)(nil),        // 22: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceACK
	(*UpdateClusterWorkspaceStatusRequest_WorkspaceStatus)(nil),     // 23: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceStatus
	(*PaginationRequest)(nil),                                       // 24: gitpod.v1.PaginationRequest
	(*PaginationResponse)(nil),                                      // 25: gitpod.v1.PaginationResponse
	(*WorkspacePort)(nil),                                           // 26: gitpod.v1.WorkspacePort
	(AdmissionLevel)(0),                                             // 27: gitpod.v1.AdmissionLevel
	(*timestamppb.Timestamp)(nil),                                   // 28: google.protobuf.Timestamp
	(WorkspacePhase_Phase)(0),                                       // 29: gitpod.v1.WorkspacePhase.Phase
	(*WorkspaceGitStatus)(nil),                                      // 30: gitpod.v1.WorkspaceGitStatus
}
var file_gitpod_v1_cluster_proto_depIdxs = []int32{
	0,  // 0: gitpod.v1.RegisterClusterRequest.scope:type_name -> gitpod.v1.RegisterClusterRequest.Scope
	1,  // 1: gitpod.v1.RegisterClusterRequest.type:type_name -> gitpod.v1.RegisterClusterRequest.ClusterType
	13, // 2: gitpod.v1.RegisterClusterRequest.workspace_classes:type_name -> gitpod.v1.RegisterClusterRequest.WorkspaceClass
	24, // 3: gitpod.v1.GetClusterWorkspacesRequest.pagination:type_name -> gitpod.v1.PaginationRequest
	25, // 4: gitpod.v1.GetClusterWorkspacesResponse.pagination:type_name -> gitpod.v1.PaginationResponse
	19, // 5: gitpod.v1.GetClusterWorkspacesResponse.workspaces:type_name -> gitpod.v1.GetClusterWorkspacesResponse.Workspace
	22, // 6: gitpod.v1.UpdateClusterWorkspaceStatusRequest.ack:type_name -> gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceACK
	23, // 7: gitpod.v1.UpdateClusterWorkspaceStatusRequest.status:type_name -> gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceStatus
	26, // 8: gitpod.v1.GetClusterWorkspacesResponse.WorkspaceSpec.ports:type_name -> gitpod.v1.WorkspacePort
	16, // 9: gitpod.v1.GetClusterWorkspacesResponse.WorkspaceSpec.envvars:type_name -> gitpod.v1.GetClusterWorkspacesResponse.EnvironmentVariable
	15, // 10: gitpod.v1.GetClusterWorkspacesResponse.WorkspaceSpec.git:type_name -> gitpod.v1.GetClusterWorkspacesResponse.GitSpec
	14, // 11: gitpod.v1.GetClusterWorkspacesResponse.WorkspaceSpec.timeout:type_name -> gitpod.v1.GetClusterWorkspacesResponse.Timeout
	27, // 12: gitpod.v1.GetClusterWorkspacesResponse.WorkspaceSpec.admission:type_name -> gitpod.v1.AdmissionLevel
	28, // 13: gitpod.v1.GetClusterWorkspacesResponse.WorkspaceMetadata.started_at:type_name -> google.protobuf.Timestamp
	20, // 14: gitpod.v1.GetClusterWorkspacesResponse.WorkspaceMetadata.annotations:type_name -> gitpod.v1.GetClusterWorkspacesResponse.WorkspaceMetadata.AnnotationsEntry
	18, // 15: gitpod.v1.GetClusterWorkspacesResponse.Workspace.metadata:type_name -> gitpod.v1.GetClusterWorkspacesResponse.WorkspaceMetadata
	17, // 16: gitpod.v1.GetClusterWorkspacesResponse.Workspace.spec:type_name -> gitpod.v1.GetClusterWorkspacesResponse.WorkspaceSpec
	2,  // 17: gitpod.v1.GetClusterWorkspacesResponse.Workspace.type:type_name -> gitpod.v1.GetClusterWorkspacesResponse.WorkspaceType
	3,  // 18: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditions.pulling_images:type_name -> gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditionBool
	3,  // 19: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditions.final_backup_complete:type_name -> gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditionBool
	3,  // 20: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditions.deployed:type_name -> gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditionBool
	3,  // 21: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditions.network_not_ready:type_name -> gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditionBool
	28, // 22: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditions.first_user_activity:type_name -> google.protobuf.Timestamp
	3,  // 23: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditions.stopped_by_request:type_name -> gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditionBool
	3,  // 24: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditions.aborted:type_name -> gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditionBool
	4,  // 25: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceACK.status_code:type_name -> gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceACK.StatusCode
	29, // 26: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceStatus.phase:type_name -> gitpod.v1.WorkspacePhase.Phase
	21, // 27: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceStatus.conditions:type_name -> gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceConditions
	30, // 28: gitpod.v1.UpdateClusterWorkspaceStatusRequest.WorkspaceStatus.repo:type_name -> gitpod.v1.WorkspaceGitStatus
	5,  // 29: gitpod.v1.ClusterService.RegisterCluster:input_type -> gitpod.v1.RegisterClusterRequest
	7,  // 30: gitpod.v1.ClusterService.RenewClusterRegistration:input_type -> gitpod.v1.RenewClusterRegistrationRequest
	9,  // 31: gitpod.v1.ClusterService.GetClusterWorkspaces:input_type -> gitpod.v1.GetClusterWorkspacesRequest
	11, // 32: gitpod.v1.ClusterService.UpdateClusterWorkspaceStatus:input_type -> gitpod.v1.UpdateClusterWorkspaceStatusRequest
	6,  // 33: gitpod.v1.ClusterService.RegisterCluster:output_type -> gitpod.v1.RegisterClusterResponse
	8,  // 34: gitpod.v1.ClusterService.RenewClusterRegistration:output_type -> gitpod.v1.RenewClusterRegistrationResponse
	10, // 35: gitpod.v1.ClusterService.GetClusterWorkspaces:output_type -> gitpod.v1.GetClusterWorkspacesResponse
	12, // 36: gitpod.v1.ClusterService.UpdateClusterWorkspaceStatus:output_type -> gitpod.v1.UpdateClusterWorkspaceStatusResponse
	33, // [33:37] is the sub-list for method output_type
	29, // [29:33] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_gitpod_v1_cluster_proto_init() }
func file_gitpod_v1_cluster_proto_init() {
	if File_gitpod_v1_cluster_proto != nil {
		return
	}
	file_gitpod_v1_pagination_proto_init()
	file_gitpod_v1_workspace_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gitpod_v1_cluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_cluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_cluster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewClusterRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_cluster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewClusterRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_cluster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterWorkspacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_cluster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterWorkspacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_cluster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterWorkspaceStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_cluster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterWorkspaceStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_cluster_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterClusterRequest_WorkspaceClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_cluster_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterWorkspacesResponse_Timeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_cluster_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterWorkspacesResponse_GitSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_cluster_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterWorkspacesResponse_EnvironmentVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_cluster_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterWorkspacesResponse_WorkspaceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_cluster_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterWorkspacesResponse_WorkspaceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_cluster_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterWorkspacesResponse_Workspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_cluster_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterWorkspaceStatusRequest_WorkspaceConditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_cluster_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterWorkspaceStatusRequest_WorkspaceACK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_cluster_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterWorkspaceStatusRequest_WorkspaceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_gitpod_v1_cluster_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitpod_v1_cluster_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gitpod_v1_cluster_proto_goTypes,
		DependencyIndexes: file_gitpod_v1_cluster_proto_depIdxs,
		EnumInfos:         file_gitpod_v1_cluster_proto_enumTypes,
		MessageInfos:      file_gitpod_v1_cluster_proto_msgTypes,
	}.Build()
	File_gitpod_v1_cluster_proto = out.File
	file_gitpod_v1_cluster_proto_rawDesc = nil
	file_gitpod_v1_cluster_proto_goTypes = nil
	file_gitpod_v1_cluster_proto_depIdxs = nil
}
