// Copyright (c) 2023 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/v1/workspace_runner.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gitpod-io/gitpod/components/public-api/go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// WorkspaceRunnerServiceName is the fully-qualified name of the WorkspaceRunnerService service.
	WorkspaceRunnerServiceName = "gitpod.v1.WorkspaceRunnerService"
)

// WorkspaceRunnerServiceClient is a client for the gitpod.v1.WorkspaceRunnerService service.
type WorkspaceRunnerServiceClient interface {
	// RegisterRunner registers a new cluster with the server. Registrations are very
	// short-lived and must be renewed every 30 seconds. Runners can be registered for
	// an entire organisation or a single user.
	RegisterRunner(context.Context, *connect_go.Request[v1.RegisterRunnerRequest]) (*connect_go.Response[v1.RegisterRunnerResponse], error)
	// RenewRunnerRegistration renews a cluster's registration. This must be called every 30 seconds
	// to keep the cluster registered.
	RenewRunnerRegistration(context.Context, *connect_go.Request[v1.RenewRunnerRegistrationRequest]) (*connect_go.Response[v1.RenewRunnerRegistrationResponse], error)
	// ListRunnerWorkspaces returns the workspaces running on a cluster.
	ListRunnerWorkspaces(context.Context, *connect_go.Request[v1.ListRunnerWorkspacesRequest]) (*connect_go.Response[v1.ListRunnerWorkspacesResponse], error)
	// WatchRunnerWorkspaces returns a stream of workspaces that ought to run on a cluster.
	WatchRunnerWorkspaces(context.Context, *connect_go.Request[v1.WatchRunnerWorkspacesRequest]) (*connect_go.ServerStreamForClient[v1.WatchRunnerWorkspacesResponse], error)
	// UpdateRunnerWorkspaceStatus updates the status of a workspace running on a cluster.
	UpdateRunnerWorkspaceStatus(context.Context, *connect_go.Request[v1.UpdateRunnerWorkspaceStatusRequest]) (*connect_go.Response[v1.UpdateRunnerWorkspaceStatusResponse], error)
}

// NewWorkspaceRunnerServiceClient constructs a client for the gitpod.v1.WorkspaceRunnerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkspaceRunnerServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) WorkspaceRunnerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &workspaceRunnerServiceClient{
		registerRunner: connect_go.NewClient[v1.RegisterRunnerRequest, v1.RegisterRunnerResponse](
			httpClient,
			baseURL+"/gitpod.v1.WorkspaceRunnerService/RegisterRunner",
			opts...,
		),
		renewRunnerRegistration: connect_go.NewClient[v1.RenewRunnerRegistrationRequest, v1.RenewRunnerRegistrationResponse](
			httpClient,
			baseURL+"/gitpod.v1.WorkspaceRunnerService/RenewRunnerRegistration",
			opts...,
		),
		listRunnerWorkspaces: connect_go.NewClient[v1.ListRunnerWorkspacesRequest, v1.ListRunnerWorkspacesResponse](
			httpClient,
			baseURL+"/gitpod.v1.WorkspaceRunnerService/ListRunnerWorkspaces",
			opts...,
		),
		watchRunnerWorkspaces: connect_go.NewClient[v1.WatchRunnerWorkspacesRequest, v1.WatchRunnerWorkspacesResponse](
			httpClient,
			baseURL+"/gitpod.v1.WorkspaceRunnerService/WatchRunnerWorkspaces",
			opts...,
		),
		updateRunnerWorkspaceStatus: connect_go.NewClient[v1.UpdateRunnerWorkspaceStatusRequest, v1.UpdateRunnerWorkspaceStatusResponse](
			httpClient,
			baseURL+"/gitpod.v1.WorkspaceRunnerService/UpdateRunnerWorkspaceStatus",
			opts...,
		),
	}
}

// workspaceRunnerServiceClient implements WorkspaceRunnerServiceClient.
type workspaceRunnerServiceClient struct {
	registerRunner              *connect_go.Client[v1.RegisterRunnerRequest, v1.RegisterRunnerResponse]
	renewRunnerRegistration     *connect_go.Client[v1.RenewRunnerRegistrationRequest, v1.RenewRunnerRegistrationResponse]
	listRunnerWorkspaces        *connect_go.Client[v1.ListRunnerWorkspacesRequest, v1.ListRunnerWorkspacesResponse]
	watchRunnerWorkspaces       *connect_go.Client[v1.WatchRunnerWorkspacesRequest, v1.WatchRunnerWorkspacesResponse]
	updateRunnerWorkspaceStatus *connect_go.Client[v1.UpdateRunnerWorkspaceStatusRequest, v1.UpdateRunnerWorkspaceStatusResponse]
}

// RegisterRunner calls gitpod.v1.WorkspaceRunnerService.RegisterRunner.
func (c *workspaceRunnerServiceClient) RegisterRunner(ctx context.Context, req *connect_go.Request[v1.RegisterRunnerRequest]) (*connect_go.Response[v1.RegisterRunnerResponse], error) {
	return c.registerRunner.CallUnary(ctx, req)
}

// RenewRunnerRegistration calls gitpod.v1.WorkspaceRunnerService.RenewRunnerRegistration.
func (c *workspaceRunnerServiceClient) RenewRunnerRegistration(ctx context.Context, req *connect_go.Request[v1.RenewRunnerRegistrationRequest]) (*connect_go.Response[v1.RenewRunnerRegistrationResponse], error) {
	return c.renewRunnerRegistration.CallUnary(ctx, req)
}

// ListRunnerWorkspaces calls gitpod.v1.WorkspaceRunnerService.ListRunnerWorkspaces.
func (c *workspaceRunnerServiceClient) ListRunnerWorkspaces(ctx context.Context, req *connect_go.Request[v1.ListRunnerWorkspacesRequest]) (*connect_go.Response[v1.ListRunnerWorkspacesResponse], error) {
	return c.listRunnerWorkspaces.CallUnary(ctx, req)
}

// WatchRunnerWorkspaces calls gitpod.v1.WorkspaceRunnerService.WatchRunnerWorkspaces.
func (c *workspaceRunnerServiceClient) WatchRunnerWorkspaces(ctx context.Context, req *connect_go.Request[v1.WatchRunnerWorkspacesRequest]) (*connect_go.ServerStreamForClient[v1.WatchRunnerWorkspacesResponse], error) {
	return c.watchRunnerWorkspaces.CallServerStream(ctx, req)
}

// UpdateRunnerWorkspaceStatus calls gitpod.v1.WorkspaceRunnerService.UpdateRunnerWorkspaceStatus.
func (c *workspaceRunnerServiceClient) UpdateRunnerWorkspaceStatus(ctx context.Context, req *connect_go.Request[v1.UpdateRunnerWorkspaceStatusRequest]) (*connect_go.Response[v1.UpdateRunnerWorkspaceStatusResponse], error) {
	return c.updateRunnerWorkspaceStatus.CallUnary(ctx, req)
}

// WorkspaceRunnerServiceHandler is an implementation of the gitpod.v1.WorkspaceRunnerService
// service.
type WorkspaceRunnerServiceHandler interface {
	// RegisterRunner registers a new cluster with the server. Registrations are very
	// short-lived and must be renewed every 30 seconds. Runners can be registered for
	// an entire organisation or a single user.
	RegisterRunner(context.Context, *connect_go.Request[v1.RegisterRunnerRequest]) (*connect_go.Response[v1.RegisterRunnerResponse], error)
	// RenewRunnerRegistration renews a cluster's registration. This must be called every 30 seconds
	// to keep the cluster registered.
	RenewRunnerRegistration(context.Context, *connect_go.Request[v1.RenewRunnerRegistrationRequest]) (*connect_go.Response[v1.RenewRunnerRegistrationResponse], error)
	// ListRunnerWorkspaces returns the workspaces running on a cluster.
	ListRunnerWorkspaces(context.Context, *connect_go.Request[v1.ListRunnerWorkspacesRequest]) (*connect_go.Response[v1.ListRunnerWorkspacesResponse], error)
	// WatchRunnerWorkspaces returns a stream of workspaces that ought to run on a cluster.
	WatchRunnerWorkspaces(context.Context, *connect_go.Request[v1.WatchRunnerWorkspacesRequest], *connect_go.ServerStream[v1.WatchRunnerWorkspacesResponse]) error
	// UpdateRunnerWorkspaceStatus updates the status of a workspace running on a cluster.
	UpdateRunnerWorkspaceStatus(context.Context, *connect_go.Request[v1.UpdateRunnerWorkspaceStatusRequest]) (*connect_go.Response[v1.UpdateRunnerWorkspaceStatusResponse], error)
}

// NewWorkspaceRunnerServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkspaceRunnerServiceHandler(svc WorkspaceRunnerServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/gitpod.v1.WorkspaceRunnerService/RegisterRunner", connect_go.NewUnaryHandler(
		"/gitpod.v1.WorkspaceRunnerService/RegisterRunner",
		svc.RegisterRunner,
		opts...,
	))
	mux.Handle("/gitpod.v1.WorkspaceRunnerService/RenewRunnerRegistration", connect_go.NewUnaryHandler(
		"/gitpod.v1.WorkspaceRunnerService/RenewRunnerRegistration",
		svc.RenewRunnerRegistration,
		opts...,
	))
	mux.Handle("/gitpod.v1.WorkspaceRunnerService/ListRunnerWorkspaces", connect_go.NewUnaryHandler(
		"/gitpod.v1.WorkspaceRunnerService/ListRunnerWorkspaces",
		svc.ListRunnerWorkspaces,
		opts...,
	))
	mux.Handle("/gitpod.v1.WorkspaceRunnerService/WatchRunnerWorkspaces", connect_go.NewServerStreamHandler(
		"/gitpod.v1.WorkspaceRunnerService/WatchRunnerWorkspaces",
		svc.WatchRunnerWorkspaces,
		opts...,
	))
	mux.Handle("/gitpod.v1.WorkspaceRunnerService/UpdateRunnerWorkspaceStatus", connect_go.NewUnaryHandler(
		"/gitpod.v1.WorkspaceRunnerService/UpdateRunnerWorkspaceStatus",
		svc.UpdateRunnerWorkspaceStatus,
		opts...,
	))
	return "/gitpod.v1.WorkspaceRunnerService/", mux
}

// UnimplementedWorkspaceRunnerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkspaceRunnerServiceHandler struct{}

func (UnimplementedWorkspaceRunnerServiceHandler) RegisterRunner(context.Context, *connect_go.Request[v1.RegisterRunnerRequest]) (*connect_go.Response[v1.RegisterRunnerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.WorkspaceRunnerService.RegisterRunner is not implemented"))
}

func (UnimplementedWorkspaceRunnerServiceHandler) RenewRunnerRegistration(context.Context, *connect_go.Request[v1.RenewRunnerRegistrationRequest]) (*connect_go.Response[v1.RenewRunnerRegistrationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.WorkspaceRunnerService.RenewRunnerRegistration is not implemented"))
}

func (UnimplementedWorkspaceRunnerServiceHandler) ListRunnerWorkspaces(context.Context, *connect_go.Request[v1.ListRunnerWorkspacesRequest]) (*connect_go.Response[v1.ListRunnerWorkspacesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.WorkspaceRunnerService.ListRunnerWorkspaces is not implemented"))
}

func (UnimplementedWorkspaceRunnerServiceHandler) WatchRunnerWorkspaces(context.Context, *connect_go.Request[v1.WatchRunnerWorkspacesRequest], *connect_go.ServerStream[v1.WatchRunnerWorkspacesResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.WorkspaceRunnerService.WatchRunnerWorkspaces is not implemented"))
}

func (UnimplementedWorkspaceRunnerServiceHandler) UpdateRunnerWorkspaceStatus(context.Context, *connect_go.Request[v1.UpdateRunnerWorkspaceStatusRequest]) (*connect_go.Response[v1.UpdateRunnerWorkspaceStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.WorkspaceRunnerService.UpdateRunnerWorkspaceStatus is not implemented"))
}
