// Copyright (c) 2023 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: gitpod/v1/workspace_runner.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterRunnerRequest_RunnerType int32

const (
	// Runner type is not set
	RegisterRunnerRequest_RUNNER_TYPE_UNSPECIFIED RegisterRunnerRequest_RunnerType = 0
	// The cluster is a local workspace runner running on a user's machine. It
	// can only run workspaces of a single tenant (the user themselves) at a time.
	RegisterRunnerRequest_RUNNER_TYPE_LOCAL RegisterRunnerRequest_RunnerType = 1
	// The cluster is a Cloud workspace cluster which is managed by Gitpod
	// and can run multiple tenants.
	RegisterRunnerRequest_RUNNER_TYPE_MULTI_TENANT RegisterRunnerRequest_RunnerType = 2
)

// Enum value maps for RegisterRunnerRequest_RunnerType.
var (
	RegisterRunnerRequest_RunnerType_name = map[int32]string{
		0: "RUNNER_TYPE_UNSPECIFIED",
		1: "RUNNER_TYPE_LOCAL",
		2: "RUNNER_TYPE_MULTI_TENANT",
	}
	RegisterRunnerRequest_RunnerType_value = map[string]int32{
		"RUNNER_TYPE_UNSPECIFIED":  0,
		"RUNNER_TYPE_LOCAL":        1,
		"RUNNER_TYPE_MULTI_TENANT": 2,
	}
)

func (x RegisterRunnerRequest_RunnerType) Enum() *RegisterRunnerRequest_RunnerType {
	p := new(RegisterRunnerRequest_RunnerType)
	*p = x
	return p
}

func (x RegisterRunnerRequest_RunnerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterRunnerRequest_RunnerType) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_workspace_runner_proto_enumTypes[0].Descriptor()
}

func (RegisterRunnerRequest_RunnerType) Type() protoreflect.EnumType {
	return &file_gitpod_v1_workspace_runner_proto_enumTypes[0]
}

func (x RegisterRunnerRequest_RunnerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterRunnerRequest_RunnerType.Descriptor instead.
func (RegisterRunnerRequest_RunnerType) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_workspace_runner_proto_rawDescGZIP(), []int{0, 0}
}

type UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode int32

const (
	UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_STATUS_CODE_UNSPECIFIED         UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode = 0
	UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_STATUS_CODE_UNKNOWN             UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode = 1
	UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_STATUS_CODE_OK                  UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode = 2
	UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_STATUS_CODE_INVALID_RESOURCE    UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode = 3
	UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_STATUS_CODE_FAILED_PRECONDITION UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode = 4
)

// Enum value maps for UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode.
var (
	UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode_name = map[int32]string{
		0: "STATUS_CODE_UNSPECIFIED",
		1: "STATUS_CODE_UNKNOWN",
		2: "STATUS_CODE_OK",
		3: "STATUS_CODE_INVALID_RESOURCE",
		4: "STATUS_CODE_FAILED_PRECONDITION",
	}
	UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode_value = map[string]int32{
		"STATUS_CODE_UNSPECIFIED":         0,
		"STATUS_CODE_UNKNOWN":             1,
		"STATUS_CODE_OK":                  2,
		"STATUS_CODE_INVALID_RESOURCE":    3,
		"STATUS_CODE_FAILED_PRECONDITION": 4,
	}
)

func (x UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode) Enum() *UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode {
	p := new(UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode)
	*p = x
	return p
}

func (x UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_workspace_runner_proto_enumTypes[1].Descriptor()
}

func (UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode) Type() protoreflect.EnumType {
	return &file_gitpod_v1_workspace_runner_proto_enumTypes[1]
}

func (x UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode.Descriptor instead.
func (UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_workspace_runner_proto_rawDescGZIP(), []int{9, 0, 0}
}

type RegisterRunnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cluster's scope
	//
	// Types that are assignable to Scope:
	//
	//	*RegisterRunnerRequest_OrganizationId
	//	*RegisterRunnerRequest_UserId
	Scope isRegisterRunnerRequest_Scope `protobuf_oneof:"scope"`
	// The cluster's type
	Type RegisterRunnerRequest_RunnerType `protobuf:"varint,3,opt,name=type,proto3,enum=gitpod.v1.RegisterRunnerRequest_RunnerType" json:"type,omitempty"`
	// The cluster's name which is shown to users
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// The workspace classes this cluster has to offer
	WorkspaceClasses []*RegisterRunnerRequest_WorkspaceClass `protobuf:"bytes,5,rep,name=workspace_classes,json=workspaceClasses,proto3" json:"workspace_classes,omitempty"`
}

func (x *RegisterRunnerRequest) Reset() {
	*x = RegisterRunnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRunnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRunnerRequest) ProtoMessage() {}

func (x *RegisterRunnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRunnerRequest.ProtoReflect.Descriptor instead.
func (*RegisterRunnerRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_workspace_runner_proto_rawDescGZIP(), []int{0}
}

func (m *RegisterRunnerRequest) GetScope() isRegisterRunnerRequest_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (x *RegisterRunnerRequest) GetOrganizationId() string {
	if x, ok := x.GetScope().(*RegisterRunnerRequest_OrganizationId); ok {
		return x.OrganizationId
	}
	return ""
}

func (x *RegisterRunnerRequest) GetUserId() string {
	if x, ok := x.GetScope().(*RegisterRunnerRequest_UserId); ok {
		return x.UserId
	}
	return ""
}

func (x *RegisterRunnerRequest) GetType() RegisterRunnerRequest_RunnerType {
	if x != nil {
		return x.Type
	}
	return RegisterRunnerRequest_RUNNER_TYPE_UNSPECIFIED
}

func (x *RegisterRunnerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterRunnerRequest) GetWorkspaceClasses() []*RegisterRunnerRequest_WorkspaceClass {
	if x != nil {
		return x.WorkspaceClasses
	}
	return nil
}

type isRegisterRunnerRequest_Scope interface {
	isRegisterRunnerRequest_Scope()
}

type RegisterRunnerRequest_OrganizationId struct {
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3,oneof"`
}

type RegisterRunnerRequest_UserId struct {
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3,oneof"`
}

func (*RegisterRunnerRequest_OrganizationId) isRegisterRunnerRequest_Scope() {}

func (*RegisterRunnerRequest_UserId) isRegisterRunnerRequest_Scope() {}

type RegisterRunnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cluster's ID which identifies the cluster and must be used
	// in all subsequent requests.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *RegisterRunnerResponse) Reset() {
	*x = RegisterRunnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRunnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRunnerResponse) ProtoMessage() {}

func (x *RegisterRunnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRunnerResponse.ProtoReflect.Descriptor instead.
func (*RegisterRunnerResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_workspace_runner_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterRunnerResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type RenewRunnerRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cluster's identity
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *RenewRunnerRegistrationRequest) Reset() {
	*x = RenewRunnerRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewRunnerRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewRunnerRegistrationRequest) ProtoMessage() {}

func (x *RenewRunnerRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewRunnerRegistrationRequest.ProtoReflect.Descriptor instead.
func (*RenewRunnerRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_workspace_runner_proto_rawDescGZIP(), []int{2}
}

func (x *RenewRunnerRegistrationRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type RenewRunnerRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RenewRunnerRegistrationResponse) Reset() {
	*x = RenewRunnerRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewRunnerRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewRunnerRegistrationResponse) ProtoMessage() {}

func (x *RenewRunnerRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewRunnerRegistrationResponse.ProtoReflect.Descriptor instead.
func (*RenewRunnerRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_workspace_runner_proto_rawDescGZIP(), []int{3}
}

type ListRunnerWorkspacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing workspaces
	Pagination *PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// The cluster's identity
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// An optional list of workspace IDs to fetch. If this list is empty/not provided
	// all workspaces that ought to run on the cluster are returned.
	WorkspaceIds []string `protobuf:"bytes,3,rep,name=workspace_ids,json=workspaceIds,proto3" json:"workspace_ids,omitempty"`
}

func (x *ListRunnerWorkspacesRequest) Reset() {
	*x = ListRunnerWorkspacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRunnerWorkspacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunnerWorkspacesRequest) ProtoMessage() {}

func (x *ListRunnerWorkspacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunnerWorkspacesRequest.ProtoReflect.Descriptor instead.
func (*ListRunnerWorkspacesRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_workspace_runner_proto_rawDescGZIP(), []int{4}
}

func (x *ListRunnerWorkspacesRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListRunnerWorkspacesRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListRunnerWorkspacesRequest) GetWorkspaceIds() []string {
	if x != nil {
		return x.WorkspaceIds
	}
	return nil
}

type RunnerWorkspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is a unique identifier of this workspace. No other workspace with the same name must be managed by this workspace manager
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata is data associated with this workspace that's required for other parts of Gitpod to function
	Metadata *WorkspaceMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec is the configuration of the workspace that's required for the ws-manager to start the workspace
	Spec *WorkspaceSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// Phase is the desired phase of the workspace
	DesiredPhase WorkspacePhase_Phase `protobuf:"varint,5,opt,name=desired_phase,json=desiredPhase,proto3,enum=gitpod.v1.WorkspacePhase_Phase" json:"desired_phase,omitempty"`
}

func (x *RunnerWorkspace) Reset() {
	*x = RunnerWorkspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerWorkspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerWorkspace) ProtoMessage() {}

func (x *RunnerWorkspace) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerWorkspace.ProtoReflect.Descriptor instead.
func (*RunnerWorkspace) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_workspace_runner_proto_rawDescGZIP(), []int{5}
}

func (x *RunnerWorkspace) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RunnerWorkspace) GetMetadata() *WorkspaceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RunnerWorkspace) GetSpec() *WorkspaceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *RunnerWorkspace) GetDesiredPhase() WorkspacePhase_Phase {
	if x != nil {
		return x.DesiredPhase
	}
	return WorkspacePhase_PHASE_UNSPECIFIED
}

type ListRunnerWorkspacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing workspaces
	Pagination *PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// The workspaces running on the cluster
	Workspaces []*RunnerWorkspace `protobuf:"bytes,2,rep,name=workspaces,proto3" json:"workspaces,omitempty"`
}

func (x *ListRunnerWorkspacesResponse) Reset() {
	*x = ListRunnerWorkspacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRunnerWorkspacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunnerWorkspacesResponse) ProtoMessage() {}

func (x *ListRunnerWorkspacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunnerWorkspacesResponse.ProtoReflect.Descriptor instead.
func (*ListRunnerWorkspacesResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_workspace_runner_proto_rawDescGZIP(), []int{6}
}

func (x *ListRunnerWorkspacesResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListRunnerWorkspacesResponse) GetWorkspaces() []*RunnerWorkspace {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

type WatchRunnerWorkspacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cluster's identity
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *WatchRunnerWorkspacesRequest) Reset() {
	*x = WatchRunnerWorkspacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchRunnerWorkspacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRunnerWorkspacesRequest) ProtoMessage() {}

func (x *WatchRunnerWorkspacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRunnerWorkspacesRequest.ProtoReflect.Descriptor instead.
func (*WatchRunnerWorkspacesRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_workspace_runner_proto_rawDescGZIP(), []int{7}
}

func (x *WatchRunnerWorkspacesRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type WatchRunnerWorkspacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cluster's identity
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The workspace's ID
	Workspace *Workspace `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (x *WatchRunnerWorkspacesResponse) Reset() {
	*x = WatchRunnerWorkspacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchRunnerWorkspacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRunnerWorkspacesResponse) ProtoMessage() {}

func (x *WatchRunnerWorkspacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRunnerWorkspacesResponse.ProtoReflect.Descriptor instead.
func (*WatchRunnerWorkspacesResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_workspace_runner_proto_rawDescGZIP(), []int{8}
}

func (x *WatchRunnerWorkspacesResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *WatchRunnerWorkspacesResponse) GetWorkspace() *Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

type UpdateRunnerWorkspaceStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cluster's identity
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The workspace's ID
	WorkspaceId string `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// Types that are assignable to Update:
	//
	//	*UpdateRunnerWorkspaceStatusRequest_Status
	//	*UpdateRunnerWorkspaceStatusRequest_Ack
	Update isUpdateRunnerWorkspaceStatusRequest_Update `protobuf_oneof:"update"`
}

func (x *UpdateRunnerWorkspaceStatusRequest) Reset() {
	*x = UpdateRunnerWorkspaceStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRunnerWorkspaceStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRunnerWorkspaceStatusRequest) ProtoMessage() {}

func (x *UpdateRunnerWorkspaceStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRunnerWorkspaceStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateRunnerWorkspaceStatusRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_workspace_runner_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateRunnerWorkspaceStatusRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateRunnerWorkspaceStatusRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (m *UpdateRunnerWorkspaceStatusRequest) GetUpdate() isUpdateRunnerWorkspaceStatusRequest_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *UpdateRunnerWorkspaceStatusRequest) GetStatus() *WorkspaceStatus {
	if x, ok := x.GetUpdate().(*UpdateRunnerWorkspaceStatusRequest_Status); ok {
		return x.Status
	}
	return nil
}

func (x *UpdateRunnerWorkspaceStatusRequest) GetAck() *UpdateRunnerWorkspaceStatusRequest_WorkspaceACK {
	if x, ok := x.GetUpdate().(*UpdateRunnerWorkspaceStatusRequest_Ack); ok {
		return x.Ack
	}
	return nil
}

type isUpdateRunnerWorkspaceStatusRequest_Update interface {
	isUpdateRunnerWorkspaceStatusRequest_Update()
}

type UpdateRunnerWorkspaceStatusRequest_Status struct {
	// The workspace's status
	Status *WorkspaceStatus `protobuf:"bytes,3,opt,name=status,proto3,oneof"`
}

type UpdateRunnerWorkspaceStatusRequest_Ack struct {
	// The workspace's status
	Ack *UpdateRunnerWorkspaceStatusRequest_WorkspaceACK `protobuf:"bytes,4,opt,name=ack,proto3,oneof"`
}

func (*UpdateRunnerWorkspaceStatusRequest_Status) isUpdateRunnerWorkspaceStatusRequest_Update() {}

func (*UpdateRunnerWorkspaceStatusRequest_Ack) isUpdateRunnerWorkspaceStatusRequest_Update() {}

type UpdateRunnerWorkspaceStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRunnerWorkspaceStatusResponse) Reset() {
	*x = UpdateRunnerWorkspaceStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRunnerWorkspaceStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRunnerWorkspaceStatusResponse) ProtoMessage() {}

func (x *UpdateRunnerWorkspaceStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRunnerWorkspaceStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateRunnerWorkspaceStatusResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_workspace_runner_proto_rawDescGZIP(), []int{10}
}

type RegisterRunnerRequest_WorkspaceClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *RegisterRunnerRequest_WorkspaceClass) Reset() {
	*x = RegisterRunnerRequest_WorkspaceClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRunnerRequest_WorkspaceClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRunnerRequest_WorkspaceClass) ProtoMessage() {}

func (x *RegisterRunnerRequest_WorkspaceClass) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRunnerRequest_WorkspaceClass.ProtoReflect.Descriptor instead.
func (*RegisterRunnerRequest_WorkspaceClass) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_workspace_runner_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RegisterRunnerRequest_WorkspaceClass) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterRunnerRequest_WorkspaceClass) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *RegisterRunnerRequest_WorkspaceClass) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// WorkspaceACK is a simple acknowledgement of a workspace status update
type UpdateRunnerWorkspaceStatusRequest_WorkspaceACK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3,enum=gitpod.v1.UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode" json:"status_code,omitempty"`
	Message    string                                                     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateRunnerWorkspaceStatusRequest_WorkspaceACK) Reset() {
	*x = UpdateRunnerWorkspaceStatusRequest_WorkspaceACK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRunnerWorkspaceStatusRequest_WorkspaceACK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRunnerWorkspaceStatusRequest_WorkspaceACK) ProtoMessage() {}

func (x *UpdateRunnerWorkspaceStatusRequest_WorkspaceACK) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_workspace_runner_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRunnerWorkspaceStatusRequest_WorkspaceACK.ProtoReflect.Descriptor instead.
func (*UpdateRunnerWorkspaceStatusRequest_WorkspaceACK) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_workspace_runner_proto_rawDescGZIP(), []int{9, 0}
}

func (x *UpdateRunnerWorkspaceStatusRequest_WorkspaceACK) GetStatusCode() UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_STATUS_CODE_UNSPECIFIED
}

func (x *UpdateRunnerWorkspaceStatusRequest_WorkspaceACK) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_gitpod_v1_workspace_runner_proto protoreflect.FileDescriptor

var file_gitpod_v1_workspace_runner_proto_rawDesc = []byte{
	0x0a, 0x20, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1a, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x03, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x65, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5e,
	0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x55, 0x4e,
	0x4e, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x42, 0x07,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x37, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x3f, 0x0a, 0x1e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x21, 0x0a, 0x1f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x44, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x50, 0x68, 0x61, 0x73, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x1c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x1d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xa9, 0x04, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x43, 0x4b, 0x48,
	0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x1a, 0xb0, 0x02, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x41, 0x43, 0x4b, 0x12, 0x66, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x43, 0x4b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x4b,
	0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f,
	0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x22, 0x25, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc0, 0x04, 0x0a, 0x16, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72,
	0x0a, 0x17, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x69, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a,
	0x15, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x7e, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x39, 0x5a,
	0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitpod_v1_workspace_runner_proto_rawDescOnce sync.Once
	file_gitpod_v1_workspace_runner_proto_rawDescData = file_gitpod_v1_workspace_runner_proto_rawDesc
)

func file_gitpod_v1_workspace_runner_proto_rawDescGZIP() []byte {
	file_gitpod_v1_workspace_runner_proto_rawDescOnce.Do(func() {
		file_gitpod_v1_workspace_runner_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitpod_v1_workspace_runner_proto_rawDescData)
	})
	return file_gitpod_v1_workspace_runner_proto_rawDescData
}

var file_gitpod_v1_workspace_runner_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_gitpod_v1_workspace_runner_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_gitpod_v1_workspace_runner_proto_goTypes = []interface{}{
	(RegisterRunnerRequest_RunnerType)(0),                           // 0: gitpod.v1.RegisterRunnerRequest.RunnerType
	(UpdateRunnerWorkspaceStatusRequest_WorkspaceACK_StatusCode)(0), // 1: gitpod.v1.UpdateRunnerWorkspaceStatusRequest.WorkspaceACK.StatusCode
	(*RegisterRunnerRequest)(nil),                                   // 2: gitpod.v1.RegisterRunnerRequest
	(*RegisterRunnerResponse)(nil),                                  // 3: gitpod.v1.RegisterRunnerResponse
	(*RenewRunnerRegistrationRequest)(nil),                          // 4: gitpod.v1.RenewRunnerRegistrationRequest
	(*RenewRunnerRegistrationResponse)(nil),                         // 5: gitpod.v1.RenewRunnerRegistrationResponse
	(*ListRunnerWorkspacesRequest)(nil),                             // 6: gitpod.v1.ListRunnerWorkspacesRequest
	(*RunnerWorkspace)(nil),                                         // 7: gitpod.v1.RunnerWorkspace
	(*ListRunnerWorkspacesResponse)(nil),                            // 8: gitpod.v1.ListRunnerWorkspacesResponse
	(*WatchRunnerWorkspacesRequest)(nil),                            // 9: gitpod.v1.WatchRunnerWorkspacesRequest
	(*WatchRunnerWorkspacesResponse)(nil),                           // 10: gitpod.v1.WatchRunnerWorkspacesResponse
	(*UpdateRunnerWorkspaceStatusRequest)(nil),                      // 11: gitpod.v1.UpdateRunnerWorkspaceStatusRequest
	(*UpdateRunnerWorkspaceStatusResponse)(nil),                     // 12: gitpod.v1.UpdateRunnerWorkspaceStatusResponse
	(*RegisterRunnerRequest_WorkspaceClass)(nil),                    // 13: gitpod.v1.RegisterRunnerRequest.WorkspaceClass
	(*UpdateRunnerWorkspaceStatusRequest_WorkspaceACK)(nil),         // 14: gitpod.v1.UpdateRunnerWorkspaceStatusRequest.WorkspaceACK
	(*PaginationRequest)(nil),                                       // 15: gitpod.v1.PaginationRequest
	(*WorkspaceMetadata)(nil),                                       // 16: gitpod.v1.WorkspaceMetadata
	(*WorkspaceSpec)(nil),                                           // 17: gitpod.v1.WorkspaceSpec
	(WorkspacePhase_Phase)(0),                                       // 18: gitpod.v1.WorkspacePhase.Phase
	(*PaginationResponse)(nil),                                      // 19: gitpod.v1.PaginationResponse
	(*Workspace)(nil),                                               // 20: gitpod.v1.Workspace
	(*WorkspaceStatus)(nil),                                         // 21: gitpod.v1.WorkspaceStatus
}
var file_gitpod_v1_workspace_runner_proto_depIdxs = []int32{
	0,  // 0: gitpod.v1.RegisterRunnerRequest.type:type_name -> gitpod.v1.RegisterRunnerRequest.RunnerType
	13, // 1: gitpod.v1.RegisterRunnerRequest.workspace_classes:type_name -> gitpod.v1.RegisterRunnerRequest.WorkspaceClass
	15, // 2: gitpod.v1.ListRunnerWorkspacesRequest.pagination:type_name -> gitpod.v1.PaginationRequest
	16, // 3: gitpod.v1.RunnerWorkspace.metadata:type_name -> gitpod.v1.WorkspaceMetadata
	17, // 4: gitpod.v1.RunnerWorkspace.spec:type_name -> gitpod.v1.WorkspaceSpec
	18, // 5: gitpod.v1.RunnerWorkspace.desired_phase:type_name -> gitpod.v1.WorkspacePhase.Phase
	19, // 6: gitpod.v1.ListRunnerWorkspacesResponse.pagination:type_name -> gitpod.v1.PaginationResponse
	7,  // 7: gitpod.v1.ListRunnerWorkspacesResponse.workspaces:type_name -> gitpod.v1.RunnerWorkspace
	20, // 8: gitpod.v1.WatchRunnerWorkspacesResponse.workspace:type_name -> gitpod.v1.Workspace
	21, // 9: gitpod.v1.UpdateRunnerWorkspaceStatusRequest.status:type_name -> gitpod.v1.WorkspaceStatus
	14, // 10: gitpod.v1.UpdateRunnerWorkspaceStatusRequest.ack:type_name -> gitpod.v1.UpdateRunnerWorkspaceStatusRequest.WorkspaceACK
	1,  // 11: gitpod.v1.UpdateRunnerWorkspaceStatusRequest.WorkspaceACK.status_code:type_name -> gitpod.v1.UpdateRunnerWorkspaceStatusRequest.WorkspaceACK.StatusCode
	2,  // 12: gitpod.v1.WorkspaceRunnerService.RegisterRunner:input_type -> gitpod.v1.RegisterRunnerRequest
	4,  // 13: gitpod.v1.WorkspaceRunnerService.RenewRunnerRegistration:input_type -> gitpod.v1.RenewRunnerRegistrationRequest
	6,  // 14: gitpod.v1.WorkspaceRunnerService.ListRunnerWorkspaces:input_type -> gitpod.v1.ListRunnerWorkspacesRequest
	9,  // 15: gitpod.v1.WorkspaceRunnerService.WatchRunnerWorkspaces:input_type -> gitpod.v1.WatchRunnerWorkspacesRequest
	11, // 16: gitpod.v1.WorkspaceRunnerService.UpdateRunnerWorkspaceStatus:input_type -> gitpod.v1.UpdateRunnerWorkspaceStatusRequest
	3,  // 17: gitpod.v1.WorkspaceRunnerService.RegisterRunner:output_type -> gitpod.v1.RegisterRunnerResponse
	5,  // 18: gitpod.v1.WorkspaceRunnerService.RenewRunnerRegistration:output_type -> gitpod.v1.RenewRunnerRegistrationResponse
	8,  // 19: gitpod.v1.WorkspaceRunnerService.ListRunnerWorkspaces:output_type -> gitpod.v1.ListRunnerWorkspacesResponse
	10, // 20: gitpod.v1.WorkspaceRunnerService.WatchRunnerWorkspaces:output_type -> gitpod.v1.WatchRunnerWorkspacesResponse
	12, // 21: gitpod.v1.WorkspaceRunnerService.UpdateRunnerWorkspaceStatus:output_type -> gitpod.v1.UpdateRunnerWorkspaceStatusResponse
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_gitpod_v1_workspace_runner_proto_init() }
func file_gitpod_v1_workspace_runner_proto_init() {
	if File_gitpod_v1_workspace_runner_proto != nil {
		return
	}
	file_gitpod_v1_pagination_proto_init()
	file_gitpod_v1_workspace_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gitpod_v1_workspace_runner_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRunnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_workspace_runner_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRunnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_workspace_runner_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewRunnerRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_workspace_runner_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewRunnerRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_workspace_runner_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRunnerWorkspacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_workspace_runner_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerWorkspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_workspace_runner_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRunnerWorkspacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_workspace_runner_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRunnerWorkspacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_workspace_runner_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRunnerWorkspacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_workspace_runner_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRunnerWorkspaceStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_workspace_runner_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRunnerWorkspaceStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_workspace_runner_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRunnerRequest_WorkspaceClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_workspace_runner_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRunnerWorkspaceStatusRequest_WorkspaceACK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_gitpod_v1_workspace_runner_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RegisterRunnerRequest_OrganizationId)(nil),
		(*RegisterRunnerRequest_UserId)(nil),
	}
	file_gitpod_v1_workspace_runner_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*UpdateRunnerWorkspaceStatusRequest_Status)(nil),
		(*UpdateRunnerWorkspaceStatusRequest_Ack)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitpod_v1_workspace_runner_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gitpod_v1_workspace_runner_proto_goTypes,
		DependencyIndexes: file_gitpod_v1_workspace_runner_proto_depIdxs,
		EnumInfos:         file_gitpod_v1_workspace_runner_proto_enumTypes,
		MessageInfos:      file_gitpod_v1_workspace_runner_proto_msgTypes,
	}.Build()
	File_gitpod_v1_workspace_runner_proto = out.File
	file_gitpod_v1_workspace_runner_proto_rawDesc = nil
	file_gitpod_v1_workspace_runner_proto_goTypes = nil
	file_gitpod_v1_workspace_runner_proto_depIdxs = nil
}
