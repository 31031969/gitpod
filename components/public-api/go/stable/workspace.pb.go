// Copyright (c) 2023 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: gitpod/stable/workspace.proto

package stable

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Admission level describes who can access a workspace instance and its ports.
type AdmissionLevel int32

const (
	AdmissionLevel_ADMISSION_LEVEL_UNSPECIFIED AdmissionLevel = 0
	// ADMISSION_LEVEL_OWNER_ONLY means the workspace can only be accessed using the owner token
	AdmissionLevel_ADMISSION_LEVEL_OWNER_ONLY AdmissionLevel = 1
	// ADMISSION_LEVEL_EVERYONE means the workspace (including ports) can be accessed by everyone.
	AdmissionLevel_ADMISSION_LEVEL_EVERYONE AdmissionLevel = 2
)

// Enum value maps for AdmissionLevel.
var (
	AdmissionLevel_name = map[int32]string{
		0: "ADMISSION_LEVEL_UNSPECIFIED",
		1: "ADMISSION_LEVEL_OWNER_ONLY",
		2: "ADMISSION_LEVEL_EVERYONE",
	}
	AdmissionLevel_value = map[string]int32{
		"ADMISSION_LEVEL_UNSPECIFIED": 0,
		"ADMISSION_LEVEL_OWNER_ONLY":  1,
		"ADMISSION_LEVEL_EVERYONE":    2,
	}
)

func (x AdmissionLevel) Enum() *AdmissionLevel {
	p := new(AdmissionLevel)
	*p = x
	return p
}

func (x AdmissionLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdmissionLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_stable_workspace_proto_enumTypes[0].Descriptor()
}

func (AdmissionLevel) Type() protoreflect.EnumType {
	return &file_gitpod_stable_workspace_proto_enumTypes[0]
}

func (x AdmissionLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdmissionLevel.Descriptor instead.
func (AdmissionLevel) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{0}
}

// Policy defines the accssbility policy of a workspace port is guarded by an authentication in the proxy
type WorkspacePort_Policy int32

const (
	WorkspacePort_POLICY_UNSPECIFIED WorkspacePort_Policy = 0
	// Private means the port is accessible by the workspace owner only using the workspace port URL
	WorkspacePort_POLICY_PRIVATE WorkspacePort_Policy = 1
	// Public means the port is accessible by everybody using the workspace port URL
	WorkspacePort_POLICY_PUBLIC WorkspacePort_Policy = 2
)

// Enum value maps for WorkspacePort_Policy.
var (
	WorkspacePort_Policy_name = map[int32]string{
		0: "POLICY_UNSPECIFIED",
		1: "POLICY_PRIVATE",
		2: "POLICY_PUBLIC",
	}
	WorkspacePort_Policy_value = map[string]int32{
		"POLICY_UNSPECIFIED": 0,
		"POLICY_PRIVATE":     1,
		"POLICY_PUBLIC":      2,
	}
)

func (x WorkspacePort_Policy) Enum() *WorkspacePort_Policy {
	p := new(WorkspacePort_Policy)
	*p = x
	return p
}

func (x WorkspacePort_Policy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkspacePort_Policy) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_stable_workspace_proto_enumTypes[1].Descriptor()
}

func (WorkspacePort_Policy) Type() protoreflect.EnumType {
	return &file_gitpod_stable_workspace_proto_enumTypes[1]
}

func (x WorkspacePort_Policy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkspacePort_Policy.Descriptor instead.
func (WorkspacePort_Policy) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{9, 0}
}

// Protocol defines the backend protocol of port
type WorkspacePort_Protocol int32

const (
	WorkspacePort_PROTOCOL_UNSPECIFIED WorkspacePort_Protocol = 0
	// Http means the port backend is http
	WorkspacePort_PROTOCOL_HTTP WorkspacePort_Protocol = 1
	// Https means the port backend is https
	WorkspacePort_PROTOCOL_HTTPS WorkspacePort_Protocol = 2
)

// Enum value maps for WorkspacePort_Protocol.
var (
	WorkspacePort_Protocol_name = map[int32]string{
		0: "PROTOCOL_UNSPECIFIED",
		1: "PROTOCOL_HTTP",
		2: "PROTOCOL_HTTPS",
	}
	WorkspacePort_Protocol_value = map[string]int32{
		"PROTOCOL_UNSPECIFIED": 0,
		"PROTOCOL_HTTP":        1,
		"PROTOCOL_HTTPS":       2,
	}
)

func (x WorkspacePort_Protocol) Enum() *WorkspacePort_Protocol {
	p := new(WorkspacePort_Protocol)
	*p = x
	return p
}

func (x WorkspacePort_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkspacePort_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_stable_workspace_proto_enumTypes[2].Descriptor()
}

func (WorkspacePort_Protocol) Type() protoreflect.EnumType {
	return &file_gitpod_stable_workspace_proto_enumTypes[2]
}

func (x WorkspacePort_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkspacePort_Protocol.Descriptor instead.
func (WorkspacePort_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{9, 1}
}

type WorkspacePhase_Phase int32

const (
	// Unknown indicates an issue within the workspace manager in that it cannot determine the actual phase of
	// a workspace. This phase is usually accompanied by an error.
	WorkspacePhase_PHASE_UNSPECIFIED WorkspacePhase_Phase = 0
	// Preparing means that we haven't actually started the workspace instance just yet, but rather
	// are still preparing for launch.
	WorkspacePhase_PHASE_PREPARING WorkspacePhase_Phase = 1
	// ImageBuild indicates that there's an image build running for this workspace.
	WorkspacePhase_PHASE_IMAGEBUILD WorkspacePhase_Phase = 2
	// Pending means the workspace does not yet consume resources in the cluster, but rather is looking for
	// some space within the cluster. If for example the cluster needs to scale up to accomodate the
	// workspace, the workspace will be in Pending state until that happened.
	WorkspacePhase_PHASE_PENDING WorkspacePhase_Phase = 3
	// Creating means the workspace is currently being created. That includes downloading the images required
	// to run the workspace over the network. The time spent in this phase varies widely and depends on the current
	// network speed, image size and cache states.
	WorkspacePhase_PHASE_CREATING WorkspacePhase_Phase = 4
	// Initializing is the phase in which the workspace is executing the appropriate workspace initializer (e.g. Git
	// clone or backup download). After this phase one can expect the workspace to either be Running or Failed.
	WorkspacePhase_PHASE_INITIALIZING WorkspacePhase_Phase = 5
	// Running means the workspace is able to actively perform work, either by serving a user through Theia,
	// or as a headless workspace.
	WorkspacePhase_PHASE_RUNNING WorkspacePhase_Phase = 6
	// Interrupted is an exceptional state where the container should be running but is temporarily unavailable.
	// When in this state, we expect it to become running or stopping anytime soon.
	WorkspacePhase_PHASE_INTERRUPTED WorkspacePhase_Phase = 7
	// Stopping means that the workspace is currently shutting down. It could go to stopped every moment.
	WorkspacePhase_PHASE_STOPPING WorkspacePhase_Phase = 8
	// Stopped means the workspace ended regularly because it was shut down.
	WorkspacePhase_PHASE_STOPPED WorkspacePhase_Phase = 9
)

// Enum value maps for WorkspacePhase_Phase.
var (
	WorkspacePhase_Phase_name = map[int32]string{
		0: "PHASE_UNSPECIFIED",
		1: "PHASE_PREPARING",
		2: "PHASE_IMAGEBUILD",
		3: "PHASE_PENDING",
		4: "PHASE_CREATING",
		5: "PHASE_INITIALIZING",
		6: "PHASE_RUNNING",
		7: "PHASE_INTERRUPTED",
		8: "PHASE_STOPPING",
		9: "PHASE_STOPPED",
	}
	WorkspacePhase_Phase_value = map[string]int32{
		"PHASE_UNSPECIFIED":  0,
		"PHASE_PREPARING":    1,
		"PHASE_IMAGEBUILD":   2,
		"PHASE_PENDING":      3,
		"PHASE_CREATING":     4,
		"PHASE_INITIALIZING": 5,
		"PHASE_RUNNING":      6,
		"PHASE_INTERRUPTED":  7,
		"PHASE_STOPPING":     8,
		"PHASE_STOPPED":      9,
	}
)

func (x WorkspacePhase_Phase) Enum() *WorkspacePhase_Phase {
	p := new(WorkspacePhase_Phase)
	*p = x
	return p
}

func (x WorkspacePhase_Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkspacePhase_Phase) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_stable_workspace_proto_enumTypes[3].Descriptor()
}

func (WorkspacePhase_Phase) Type() protoreflect.EnumType {
	return &file_gitpod_stable_workspace_proto_enumTypes[3]
}

func (x WorkspacePhase_Phase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkspacePhase_Phase.Descriptor instead.
func (WorkspacePhase_Phase) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{11, 0}
}

// +resource create workspace
type CreateAndStartWorkspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pinned         bool   `protobuf:"varint,3,opt,name=pinned,proto3" json:"pinned,omitempty"`
	// Types that are assignable to Source:
	//
	//	*CreateAndStartWorkspaceRequest_Git
	Source isCreateAndStartWorkspaceRequest_Source `protobuf_oneof:"source"`
	// additional_environment_variables provide additional environment variables which
	// take precedence over environment variables provided by the project and user.
	//
	// +optional
	AdditionalEnvironmentVariables []*WorkspaceEnvironmentVariable `protobuf:"bytes,5,rep,name=additional_environment_variables,json=additionalEnvironmentVariables,proto3" json:"additional_environment_variables,omitempty"`
	// region specifies the region in which the workspace will be created.
	// Obtain available regions using the ListRegions operation.
	//
	// +optional defaults to the user's default region
	Region *string `protobuf:"bytes,6,opt,name=region,proto3,oneof" json:"region,omitempty"`
	// workspace_class specifies the workspace class with which to create the workspace.
	// Obtain available workspace classes using the ListWorkspaceClass operation.
	//
	// +optional defaults to the class configured on the project or the cluster's default class.
	WorkspaceClass *string `protobuf:"bytes,7,opt,name=workspace_class,json=workspaceClass,proto3,oneof" json:"workspace_class,omitempty"`
	// editor specifies the editor that will be used with this workspace.
	// Obtain available editors using the EditorService.ListEditors operation.
	//
	// +optional defaults to the default editor of the user
	Editor *EditorReference `protobuf:"bytes,8,opt,name=editor,proto3,oneof" json:"editor,omitempty"`
}

func (x *CreateAndStartWorkspaceRequest) Reset() {
	*x = CreateAndStartWorkspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_stable_workspace_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAndStartWorkspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAndStartWorkspaceRequest) ProtoMessage() {}

func (x *CreateAndStartWorkspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_stable_workspace_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAndStartWorkspaceRequest.ProtoReflect.Descriptor instead.
func (*CreateAndStartWorkspaceRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{0}
}

func (x *CreateAndStartWorkspaceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateAndStartWorkspaceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAndStartWorkspaceRequest) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

func (m *CreateAndStartWorkspaceRequest) GetSource() isCreateAndStartWorkspaceRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *CreateAndStartWorkspaceRequest) GetGit() *WorkspaceContentSourceGit {
	if x, ok := x.GetSource().(*CreateAndStartWorkspaceRequest_Git); ok {
		return x.Git
	}
	return nil
}

func (x *CreateAndStartWorkspaceRequest) GetAdditionalEnvironmentVariables() []*WorkspaceEnvironmentVariable {
	if x != nil {
		return x.AdditionalEnvironmentVariables
	}
	return nil
}

func (x *CreateAndStartWorkspaceRequest) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *CreateAndStartWorkspaceRequest) GetWorkspaceClass() string {
	if x != nil && x.WorkspaceClass != nil {
		return *x.WorkspaceClass
	}
	return ""
}

func (x *CreateAndStartWorkspaceRequest) GetEditor() *EditorReference {
	if x != nil {
		return x.Editor
	}
	return nil
}

type isCreateAndStartWorkspaceRequest_Source interface {
	isCreateAndStartWorkspaceRequest_Source()
}

type CreateAndStartWorkspaceRequest_Git struct {
	Git *WorkspaceContentSourceGit `protobuf:"bytes,4,opt,name=git,proto3,oneof"`
}

func (*CreateAndStartWorkspaceRequest_Git) isCreateAndStartWorkspaceRequest_Source() {}

type WorkspaceContentSourceGit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// clone_url is the repository url as you would pass it to "git clone".
	// Only HTTPS clone URLs are supported.
	CloneUrl string `protobuf:"bytes,1,opt,name=clone_url,json=cloneUrl,proto3" json:"clone_url,omitempty"`
	// ref references a Git object either by its commit hash
	// or as symbolic reference https://git-scm.com/book/en/v2/Git-Internals-Git-References.
	Ref string `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	// create_local_branch changes the interpretation of ref. If true, the system will create
	// a local branch named ref instead of trying to check out an existing reference.
	CreateLocalBranch bool `protobuf:"varint,3,opt,name=create_local_branch,json=createLocalBranch,proto3" json:"create_local_branch,omitempty"`
}

func (x *WorkspaceContentSourceGit) Reset() {
	*x = WorkspaceContentSourceGit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_stable_workspace_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceContentSourceGit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceContentSourceGit) ProtoMessage() {}

func (x *WorkspaceContentSourceGit) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_stable_workspace_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceContentSourceGit.ProtoReflect.Descriptor instead.
func (*WorkspaceContentSourceGit) Descriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{1}
}

func (x *WorkspaceContentSourceGit) GetCloneUrl() string {
	if x != nil {
		return x.CloneUrl
	}
	return ""
}

func (x *WorkspaceContentSourceGit) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *WorkspaceContentSourceGit) GetCreateLocalBranch() bool {
	if x != nil {
		return x.CreateLocalBranch
	}
	return false
}

type EditorReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *EditorReference) Reset() {
	*x = EditorReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_stable_workspace_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditorReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditorReference) ProtoMessage() {}

func (x *EditorReference) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_stable_workspace_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditorReference.ProtoReflect.Descriptor instead.
func (*EditorReference) Descriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{2}
}

func (x *EditorReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EditorReference) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type WorkspaceEnvironmentVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *WorkspaceEnvironmentVariable) Reset() {
	*x = WorkspaceEnvironmentVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_stable_workspace_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceEnvironmentVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceEnvironmentVariable) ProtoMessage() {}

func (x *WorkspaceEnvironmentVariable) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_stable_workspace_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceEnvironmentVariable.ProtoReflect.Descriptor instead.
func (*WorkspaceEnvironmentVariable) Descriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{3}
}

func (x *WorkspaceEnvironmentVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkspaceEnvironmentVariable) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CreateAndStartWorkspaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// workspace_id is the ID of the workspace that was just created
	WorkspaceId string `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *CreateAndStartWorkspaceResponse) Reset() {
	*x = CreateAndStartWorkspaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_stable_workspace_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAndStartWorkspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAndStartWorkspaceResponse) ProtoMessage() {}

func (x *CreateAndStartWorkspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_stable_workspace_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAndStartWorkspaceResponse.ProtoReflect.Descriptor instead.
func (*CreateAndStartWorkspaceResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{4}
}

func (x *CreateAndStartWorkspaceResponse) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type GetWorkspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetWorkspaceRequest) Reset() {
	*x = GetWorkspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_stable_workspace_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceRequest) ProtoMessage() {}

func (x *GetWorkspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_stable_workspace_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceRequest.ProtoReflect.Descriptor instead.
func (*GetWorkspaceRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{5}
}

func (x *GetWorkspaceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetWorkspaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *Workspace `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetWorkspaceResponse) Reset() {
	*x = GetWorkspaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_stable_workspace_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceResponse) ProtoMessage() {}

func (x *GetWorkspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_stable_workspace_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceResponse.ProtoReflect.Descriptor instead.
func (*GetWorkspaceResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{6}
}

func (x *GetWorkspaceResponse) GetItem() *Workspace {
	if x != nil {
		return x.Item
	}
	return nil
}

// +resource get workspace
type Workspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string           `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Name           string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pinned         bool             `protobuf:"varint,3,opt,name=pinned,proto3" json:"pinned,omitempty"`
	Status         *WorkspaceStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// additional_environment_variables provide additional environment variables which
	// take precedence over environment variables provided by the project and user.
	//
	// +optional
	AdditionalEnvironmentVariables []*WorkspaceEnvironmentVariable `protobuf:"bytes,5,rep,name=additional_environment_variables,json=additionalEnvironmentVariables,proto3" json:"additional_environment_variables,omitempty"`
	// region specifies the region in which the workspace will be created.
	// Obtain available regions using the ListRegions operation.
	//
	// +optional defaults to the user's default region
	Region *string `protobuf:"bytes,6,opt,name=region,proto3,oneof" json:"region,omitempty"`
	// workspace_class specifies the workspace class with which to create the workspace.
	// Obtain available workspace classes using the ListWorkspaceClass operation.
	//
	// +optional defaults to the class configured on the project or the cluster's default class.
	WorkspaceClass *string `protobuf:"bytes,7,opt,name=workspace_class,json=workspaceClass,proto3,oneof" json:"workspace_class,omitempty"`
	// editor specifies the editor that will be used with this workspace.
	// Obtain available editors using the EditorService.ListEditors operation.
	//
	// +optional defaults to the default editor of the user
	Editor *EditorReference `protobuf:"bytes,8,opt,name=editor,proto3,oneof" json:"editor,omitempty"`
}

func (x *Workspace) Reset() {
	*x = Workspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_stable_workspace_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workspace) ProtoMessage() {}

func (x *Workspace) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_stable_workspace_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workspace.ProtoReflect.Descriptor instead.
func (*Workspace) Descriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{7}
}

func (x *Workspace) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *Workspace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workspace) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

func (x *Workspace) GetStatus() *WorkspaceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Workspace) GetAdditionalEnvironmentVariables() []*WorkspaceEnvironmentVariable {
	if x != nil {
		return x.AdditionalEnvironmentVariables
	}
	return nil
}

func (x *Workspace) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *Workspace) GetWorkspaceClass() string {
	if x != nil && x.WorkspaceClass != nil {
		return *x.WorkspaceClass
	}
	return ""
}

func (x *Workspace) GetEditor() *EditorReference {
	if x != nil {
		return x.Editor
	}
	return nil
}

type WorkspaceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Phase is a simple, high-level summary of where the workspace is in its lifecycle.
	// The phase is not intended to be a comprehensive rollup of observations of the workspace state,
	// nor is it intended to be a comprehensive state machine.
	// (based on https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase)
	Phase *WorkspacePhase `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
	// message is an optional human-readable message detailing the current phase
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	// workspace_url is the URL of the workspace. Only present when the phase is running.
	WorkspaceUrl string `protobuf:"bytes,3,opt,name=workspace_url,json=workspaceUrl,proto3" json:"workspace_url,omitempty"`
	// git_status details the Git working copy status of the workspace.
	// Note: this is a best-effort field and more often than not will not be present. Its absence does not
	// indicate the absence of a working copy.
	GitStatus *WorkspaceGitStatus `protobuf:"bytes,4,opt,name=git_status,json=gitStatus,proto3" json:"git_status,omitempty"`
	// ports lists the network ports currently available/known of this workspace
	Ports []*WorkspacePort `protobuf:"bytes,5,rep,name=ports,proto3" json:"ports,omitempty"`
	// Admission describes who can access a workspace instance and its ports.
	Admission AdmissionLevel `protobuf:"varint,6,opt,name=admission,proto3,enum=gitpod.stable.AdmissionLevel" json:"admission,omitempty"`
}

func (x *WorkspaceStatus) Reset() {
	*x = WorkspaceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_stable_workspace_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceStatus) ProtoMessage() {}

func (x *WorkspaceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_stable_workspace_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceStatus.ProtoReflect.Descriptor instead.
func (*WorkspaceStatus) Descriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{8}
}

func (x *WorkspaceStatus) GetPhase() *WorkspacePhase {
	if x != nil {
		return x.Phase
	}
	return nil
}

func (x *WorkspaceStatus) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *WorkspaceStatus) GetWorkspaceUrl() string {
	if x != nil {
		return x.WorkspaceUrl
	}
	return ""
}

func (x *WorkspaceStatus) GetGitStatus() *WorkspaceGitStatus {
	if x != nil {
		return x.GitStatus
	}
	return nil
}

func (x *WorkspaceStatus) GetPorts() []*WorkspacePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *WorkspaceStatus) GetAdmission() AdmissionLevel {
	if x != nil {
		return x.Admission
	}
	return AdmissionLevel_ADMISSION_LEVEL_UNSPECIFIED
}

type WorkspacePort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// port number
	Port uint64 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// policy of this port
	Policy WorkspacePort_Policy `protobuf:"varint,2,opt,name=policy,proto3,enum=gitpod.stable.WorkspacePort_Policy" json:"policy,omitempty"`
	// url that can be used to access the port
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// backend protocol of this port
	Protocol WorkspacePort_Protocol `protobuf:"varint,4,opt,name=protocol,proto3,enum=gitpod.stable.WorkspacePort_Protocol" json:"protocol,omitempty"`
}

func (x *WorkspacePort) Reset() {
	*x = WorkspacePort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_stable_workspace_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspacePort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspacePort) ProtoMessage() {}

func (x *WorkspacePort) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_stable_workspace_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspacePort.ProtoReflect.Descriptor instead.
func (*WorkspacePort) Descriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{9}
}

func (x *WorkspacePort) GetPort() uint64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *WorkspacePort) GetPolicy() WorkspacePort_Policy {
	if x != nil {
		return x.Policy
	}
	return WorkspacePort_POLICY_UNSPECIFIED
}

func (x *WorkspacePort) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *WorkspacePort) GetProtocol() WorkspacePort_Protocol {
	if x != nil {
		return x.Protocol
	}
	return WorkspacePort_PROTOCOL_UNSPECIFIED
}

type WorkspaceGitStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// clone_url is the repository url as you would pass it to "git clone".
	// Only HTTPS clone URLs are supported.
	CloneUrl string `protobuf:"bytes,1,opt,name=clone_url,json=cloneUrl,proto3" json:"clone_url,omitempty"`
	// branch is branch we're currently on
	Branch string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	// latest_commit is the most recent commit on the current branch
	LatestCommit string `protobuf:"bytes,3,opt,name=latest_commit,json=latestCommit,proto3" json:"latest_commit,omitempty"`
	// uncommited_files is an array of uncommitted files, possibly truncated
	UncommitedFiles []string `protobuf:"bytes,4,rep,name=uncommited_files,json=uncommitedFiles,proto3" json:"uncommited_files,omitempty"`
	// the total number of uncommited files
	TotalUncommitedFiles int32 `protobuf:"varint,5,opt,name=total_uncommited_files,json=totalUncommitedFiles,proto3" json:"total_uncommited_files,omitempty"`
	// untracked_files is an array of untracked files in the workspace, possibly truncated
	UntrackedFiles []string `protobuf:"bytes,6,rep,name=untracked_files,json=untrackedFiles,proto3" json:"untracked_files,omitempty"`
	// the total number of untracked files
	TotalUntrackedFiles int32 `protobuf:"varint,7,opt,name=total_untracked_files,json=totalUntrackedFiles,proto3" json:"total_untracked_files,omitempty"`
	// unpushed_commits is an array of unpushed changes in the workspace, possibly truncated
	UnpushedCommits []string `protobuf:"bytes,8,rep,name=unpushed_commits,json=unpushedCommits,proto3" json:"unpushed_commits,omitempty"`
	// the total number of unpushed changes
	TotalUnpushedCommits int32 `protobuf:"varint,9,opt,name=total_unpushed_commits,json=totalUnpushedCommits,proto3" json:"total_unpushed_commits,omitempty"`
}

func (x *WorkspaceGitStatus) Reset() {
	*x = WorkspaceGitStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_stable_workspace_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceGitStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceGitStatus) ProtoMessage() {}

func (x *WorkspaceGitStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_stable_workspace_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceGitStatus.ProtoReflect.Descriptor instead.
func (*WorkspaceGitStatus) Descriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{10}
}

func (x *WorkspaceGitStatus) GetCloneUrl() string {
	if x != nil {
		return x.CloneUrl
	}
	return ""
}

func (x *WorkspaceGitStatus) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *WorkspaceGitStatus) GetLatestCommit() string {
	if x != nil {
		return x.LatestCommit
	}
	return ""
}

func (x *WorkspaceGitStatus) GetUncommitedFiles() []string {
	if x != nil {
		return x.UncommitedFiles
	}
	return nil
}

func (x *WorkspaceGitStatus) GetTotalUncommitedFiles() int32 {
	if x != nil {
		return x.TotalUncommitedFiles
	}
	return 0
}

func (x *WorkspaceGitStatus) GetUntrackedFiles() []string {
	if x != nil {
		return x.UntrackedFiles
	}
	return nil
}

func (x *WorkspaceGitStatus) GetTotalUntrackedFiles() int32 {
	if x != nil {
		return x.TotalUntrackedFiles
	}
	return 0
}

func (x *WorkspaceGitStatus) GetUnpushedCommits() []string {
	if x != nil {
		return x.UnpushedCommits
	}
	return nil
}

func (x *WorkspaceGitStatus) GetTotalUnpushedCommits() int32 {
	if x != nil {
		return x.TotalUnpushedCommits
	}
	return 0
}

type WorkspacePhase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               WorkspacePhase_Phase   `protobuf:"varint,1,opt,name=name,proto3,enum=gitpod.stable.WorkspacePhase_Phase" json:"name,omitempty"`
	LastTransitionTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty"`
}

func (x *WorkspacePhase) Reset() {
	*x = WorkspacePhase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_stable_workspace_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspacePhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspacePhase) ProtoMessage() {}

func (x *WorkspacePhase) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_stable_workspace_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspacePhase.ProtoReflect.Descriptor instead.
func (*WorkspacePhase) Descriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{11}
}

func (x *WorkspacePhase) GetName() WorkspacePhase_Phase {
	if x != nil {
		return x.Name
	}
	return WorkspacePhase_PHASE_UNSPECIFIED
}

func (x *WorkspacePhase) GetLastTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTransitionTime
	}
	return nil
}

type ListWorkspacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination paginates through the result list.
	Pagination     *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
	OrganizationId string      `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// search_string returns only workspaces which contain the search_string
	// in their name or Git status.
	SearchString *string `protobuf:"bytes,3,opt,name=search_string,json=searchString,proto3,oneof" json:"search_string,omitempty"`
	// pinned_only returns only pinned workspaces.
	PinnedOnly *bool `protobuf:"varint,4,opt,name=pinned_only,json=pinnedOnly,proto3,oneof" json:"pinned_only,omitempty"`
	// project_id reduces the result set to only workspaces within the referenced project
	ProjectId *string `protobuf:"bytes,5,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
}

func (x *ListWorkspacesRequest) Reset() {
	*x = ListWorkspacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_stable_workspace_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkspacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkspacesRequest) ProtoMessage() {}

func (x *ListWorkspacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_stable_workspace_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkspacesRequest.ProtoReflect.Descriptor instead.
func (*ListWorkspacesRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{12}
}

func (x *ListWorkspacesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListWorkspacesRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListWorkspacesRequest) GetSearchString() string {
	if x != nil && x.SearchString != nil {
		return *x.SearchString
	}
	return ""
}

func (x *ListWorkspacesRequest) GetPinnedOnly() bool {
	if x != nil && x.PinnedOnly != nil {
		return *x.PinnedOnly
	}
	return false
}

func (x *ListWorkspacesRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

type ListWorkspacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Workspace `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListWorkspacesResponse) Reset() {
	*x = ListWorkspacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_stable_workspace_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkspacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkspacesResponse) ProtoMessage() {}

func (x *ListWorkspacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_stable_workspace_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkspacesResponse.ProtoReflect.Descriptor instead.
func (*ListWorkspacesResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{13}
}

func (x *ListWorkspacesResponse) GetItems() []*Workspace {
	if x != nil {
		return x.Items
	}
	return nil
}

type StartWorkspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StartWorkspaceRequest) Reset() {
	*x = StartWorkspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_stable_workspace_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWorkspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkspaceRequest) ProtoMessage() {}

func (x *StartWorkspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_stable_workspace_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorkspaceRequest.ProtoReflect.Descriptor instead.
func (*StartWorkspaceRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{14}
}

func (x *StartWorkspaceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StartWorkspaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartWorkspaceResponse) Reset() {
	*x = StartWorkspaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_stable_workspace_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWorkspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkspaceResponse) ProtoMessage() {}

func (x *StartWorkspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_stable_workspace_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorkspaceResponse.ProtoReflect.Descriptor instead.
func (*StartWorkspaceResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{15}
}

type StopWorkspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StopWorkspaceRequest) Reset() {
	*x = StopWorkspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_stable_workspace_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopWorkspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopWorkspaceRequest) ProtoMessage() {}

func (x *StopWorkspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_stable_workspace_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopWorkspaceRequest.ProtoReflect.Descriptor instead.
func (*StopWorkspaceRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{16}
}

func (x *StopWorkspaceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StopWorkspaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopWorkspaceResponse) Reset() {
	*x = StopWorkspaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_stable_workspace_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopWorkspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopWorkspaceResponse) ProtoMessage() {}

func (x *StopWorkspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_stable_workspace_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopWorkspaceResponse.ProtoReflect.Descriptor instead.
func (*StopWorkspaceResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{17}
}

type UpdateWorkspacePortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Port *WorkspacePort `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *UpdateWorkspacePortRequest) Reset() {
	*x = UpdateWorkspacePortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_stable_workspace_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkspacePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkspacePortRequest) ProtoMessage() {}

func (x *UpdateWorkspacePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_stable_workspace_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkspacePortRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkspacePortRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateWorkspacePortRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateWorkspacePortRequest) GetPort() *WorkspacePort {
	if x != nil {
		return x.Port
	}
	return nil
}

type UpdateWorkspacePortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateWorkspacePortResponse) Reset() {
	*x = UpdateWorkspacePortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_stable_workspace_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkspacePortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkspacePortResponse) ProtoMessage() {}

func (x *UpdateWorkspacePortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_stable_workspace_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkspacePortResponse.ProtoReflect.Descriptor instead.
func (*UpdateWorkspacePortResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_stable_workspace_proto_rawDescGZIP(), []int{19}
}

var File_gitpod_stable_workspace_proto protoreflect.FileDescriptor

var file_gitpod_stable_workspace_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x1e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe6, 0x03, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x69, 0x74, 0x48, 0x00,
	0x52, 0x03, 0x67, 0x69, 0x74, 0x12, 0x75, 0x0a, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x1e, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x03, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x22, 0x7a, 0x0a, 0x19, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x47, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x72, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x22, 0x3f, 0x0a, 0x0f, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x1c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44,
	0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x22, 0xc1, 0x03, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x75, 0x0a, 0x20,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x1e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b,
	0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x02,
	0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x22, 0xc9, 0x02, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x40, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x47, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x67, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xcb, 0x02, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x47, 0x0a, 0x06, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x10, 0x02, 0x22, 0x4b, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x53, 0x10, 0x02, 0x22,
	0x8d, 0x03, 0x0a, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x47, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x6e, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x55, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x75, 0x6e, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x6e, 0x70, 0x75, 0x73, 0x68,
	0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x55, 0x6e, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x22,
	0xf3, 0x02, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x2e,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x05, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x48,
	0x41, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x48, 0x41, 0x53,
	0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49,
	0x4e, 0x47, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x48, 0x41, 0x53, 0x45,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47,
	0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x50, 0x45, 0x44, 0x10, 0x09, 0x22, 0xb4, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x27, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x18, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x0a, 0x14, 0x53, 0x74, 0x6f,
	0x70, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x6f, 0x0a, 0x0e, 0x41, 0x64, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x1b, 0x41,
	0x44, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a,
	0x41, 0x44, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x44, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x45, 0x56, 0x45, 0x52, 0x59, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x32, 0xf9, 0x04, 0x0a, 0x10, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x7a, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2d, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2d, 0x69, 0x6f, 0x2f, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitpod_stable_workspace_proto_rawDescOnce sync.Once
	file_gitpod_stable_workspace_proto_rawDescData = file_gitpod_stable_workspace_proto_rawDesc
)

func file_gitpod_stable_workspace_proto_rawDescGZIP() []byte {
	file_gitpod_stable_workspace_proto_rawDescOnce.Do(func() {
		file_gitpod_stable_workspace_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitpod_stable_workspace_proto_rawDescData)
	})
	return file_gitpod_stable_workspace_proto_rawDescData
}

var file_gitpod_stable_workspace_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_gitpod_stable_workspace_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_gitpod_stable_workspace_proto_goTypes = []interface{}{
	(AdmissionLevel)(0),                     // 0: gitpod.stable.AdmissionLevel
	(WorkspacePort_Policy)(0),               // 1: gitpod.stable.WorkspacePort.Policy
	(WorkspacePort_Protocol)(0),             // 2: gitpod.stable.WorkspacePort.Protocol
	(WorkspacePhase_Phase)(0),               // 3: gitpod.stable.WorkspacePhase.Phase
	(*CreateAndStartWorkspaceRequest)(nil),  // 4: gitpod.stable.CreateAndStartWorkspaceRequest
	(*WorkspaceContentSourceGit)(nil),       // 5: gitpod.stable.WorkspaceContentSourceGit
	(*EditorReference)(nil),                 // 6: gitpod.stable.EditorReference
	(*WorkspaceEnvironmentVariable)(nil),    // 7: gitpod.stable.WorkspaceEnvironmentVariable
	(*CreateAndStartWorkspaceResponse)(nil), // 8: gitpod.stable.CreateAndStartWorkspaceResponse
	(*GetWorkspaceRequest)(nil),             // 9: gitpod.stable.GetWorkspaceRequest
	(*GetWorkspaceResponse)(nil),            // 10: gitpod.stable.GetWorkspaceResponse
	(*Workspace)(nil),                       // 11: gitpod.stable.Workspace
	(*WorkspaceStatus)(nil),                 // 12: gitpod.stable.WorkspaceStatus
	(*WorkspacePort)(nil),                   // 13: gitpod.stable.WorkspacePort
	(*WorkspaceGitStatus)(nil),              // 14: gitpod.stable.WorkspaceGitStatus
	(*WorkspacePhase)(nil),                  // 15: gitpod.stable.WorkspacePhase
	(*ListWorkspacesRequest)(nil),           // 16: gitpod.stable.ListWorkspacesRequest
	(*ListWorkspacesResponse)(nil),          // 17: gitpod.stable.ListWorkspacesResponse
	(*StartWorkspaceRequest)(nil),           // 18: gitpod.stable.StartWorkspaceRequest
	(*StartWorkspaceResponse)(nil),          // 19: gitpod.stable.StartWorkspaceResponse
	(*StopWorkspaceRequest)(nil),            // 20: gitpod.stable.StopWorkspaceRequest
	(*StopWorkspaceResponse)(nil),           // 21: gitpod.stable.StopWorkspaceResponse
	(*UpdateWorkspacePortRequest)(nil),      // 22: gitpod.stable.UpdateWorkspacePortRequest
	(*UpdateWorkspacePortResponse)(nil),     // 23: gitpod.stable.UpdateWorkspacePortResponse
	(*timestamppb.Timestamp)(nil),           // 24: google.protobuf.Timestamp
	(*Pagination)(nil),                      // 25: gitpod.stable.Pagination
}
var file_gitpod_stable_workspace_proto_depIdxs = []int32{
	5,  // 0: gitpod.stable.CreateAndStartWorkspaceRequest.git:type_name -> gitpod.stable.WorkspaceContentSourceGit
	7,  // 1: gitpod.stable.CreateAndStartWorkspaceRequest.additional_environment_variables:type_name -> gitpod.stable.WorkspaceEnvironmentVariable
	6,  // 2: gitpod.stable.CreateAndStartWorkspaceRequest.editor:type_name -> gitpod.stable.EditorReference
	11, // 3: gitpod.stable.GetWorkspaceResponse.item:type_name -> gitpod.stable.Workspace
	12, // 4: gitpod.stable.Workspace.status:type_name -> gitpod.stable.WorkspaceStatus
	7,  // 5: gitpod.stable.Workspace.additional_environment_variables:type_name -> gitpod.stable.WorkspaceEnvironmentVariable
	6,  // 6: gitpod.stable.Workspace.editor:type_name -> gitpod.stable.EditorReference
	15, // 7: gitpod.stable.WorkspaceStatus.phase:type_name -> gitpod.stable.WorkspacePhase
	14, // 8: gitpod.stable.WorkspaceStatus.git_status:type_name -> gitpod.stable.WorkspaceGitStatus
	13, // 9: gitpod.stable.WorkspaceStatus.ports:type_name -> gitpod.stable.WorkspacePort
	0,  // 10: gitpod.stable.WorkspaceStatus.admission:type_name -> gitpod.stable.AdmissionLevel
	1,  // 11: gitpod.stable.WorkspacePort.policy:type_name -> gitpod.stable.WorkspacePort.Policy
	2,  // 12: gitpod.stable.WorkspacePort.protocol:type_name -> gitpod.stable.WorkspacePort.Protocol
	3,  // 13: gitpod.stable.WorkspacePhase.name:type_name -> gitpod.stable.WorkspacePhase.Phase
	24, // 14: gitpod.stable.WorkspacePhase.last_transition_time:type_name -> google.protobuf.Timestamp
	25, // 15: gitpod.stable.ListWorkspacesRequest.pagination:type_name -> gitpod.stable.Pagination
	11, // 16: gitpod.stable.ListWorkspacesResponse.items:type_name -> gitpod.stable.Workspace
	13, // 17: gitpod.stable.UpdateWorkspacePortRequest.port:type_name -> gitpod.stable.WorkspacePort
	4,  // 18: gitpod.stable.WorkspaceService.CreateAndStartWorkspace:input_type -> gitpod.stable.CreateAndStartWorkspaceRequest
	9,  // 19: gitpod.stable.WorkspaceService.GetWorkspace:input_type -> gitpod.stable.GetWorkspaceRequest
	16, // 20: gitpod.stable.WorkspaceService.ListWorkspaces:input_type -> gitpod.stable.ListWorkspacesRequest
	18, // 21: gitpod.stable.WorkspaceService.StartWorkspace:input_type -> gitpod.stable.StartWorkspaceRequest
	20, // 22: gitpod.stable.WorkspaceService.StopWorkspace:input_type -> gitpod.stable.StopWorkspaceRequest
	22, // 23: gitpod.stable.WorkspaceService.UpdateWorkspacePort:input_type -> gitpod.stable.UpdateWorkspacePortRequest
	8,  // 24: gitpod.stable.WorkspaceService.CreateAndStartWorkspace:output_type -> gitpod.stable.CreateAndStartWorkspaceResponse
	10, // 25: gitpod.stable.WorkspaceService.GetWorkspace:output_type -> gitpod.stable.GetWorkspaceResponse
	17, // 26: gitpod.stable.WorkspaceService.ListWorkspaces:output_type -> gitpod.stable.ListWorkspacesResponse
	19, // 27: gitpod.stable.WorkspaceService.StartWorkspace:output_type -> gitpod.stable.StartWorkspaceResponse
	21, // 28: gitpod.stable.WorkspaceService.StopWorkspace:output_type -> gitpod.stable.StopWorkspaceResponse
	23, // 29: gitpod.stable.WorkspaceService.UpdateWorkspacePort:output_type -> gitpod.stable.UpdateWorkspacePortResponse
	24, // [24:30] is the sub-list for method output_type
	18, // [18:24] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_gitpod_stable_workspace_proto_init() }
func file_gitpod_stable_workspace_proto_init() {
	if File_gitpod_stable_workspace_proto != nil {
		return
	}
	file_gitpod_stable_pagination_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gitpod_stable_workspace_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAndStartWorkspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_stable_workspace_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceContentSourceGit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_stable_workspace_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditorReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_stable_workspace_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceEnvironmentVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_stable_workspace_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAndStartWorkspaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_stable_workspace_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_stable_workspace_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkspaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_stable_workspace_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_stable_workspace_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_stable_workspace_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspacePort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_stable_workspace_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceGitStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_stable_workspace_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspacePhase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_stable_workspace_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkspacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_stable_workspace_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkspacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_stable_workspace_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartWorkspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_stable_workspace_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartWorkspaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_stable_workspace_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopWorkspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_stable_workspace_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopWorkspaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_stable_workspace_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkspacePortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_stable_workspace_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkspacePortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_gitpod_stable_workspace_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CreateAndStartWorkspaceRequest_Git)(nil),
	}
	file_gitpod_stable_workspace_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_gitpod_stable_workspace_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_gitpod_stable_workspace_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_gitpod_stable_workspace_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitpod_stable_workspace_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gitpod_stable_workspace_proto_goTypes,
		DependencyIndexes: file_gitpod_stable_workspace_proto_depIdxs,
		EnumInfos:         file_gitpod_stable_workspace_proto_enumTypes,
		MessageInfos:      file_gitpod_stable_workspace_proto_msgTypes,
	}.Build()
	File_gitpod_stable_workspace_proto = out.File
	file_gitpod_stable_workspace_proto_rawDesc = nil
	file_gitpod_stable_workspace_proto_goTypes = nil
	file_gitpod_stable_workspace_proto_depIdxs = nil
}
