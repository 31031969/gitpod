// Copyright (c) 2023 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-proxy-gen. DO NOT EDIT.

package stableconnect

import (
	context "context"
	connect_go "github.com/bufbuild/connect-go"
	stable "github.com/gitpod-io/gitpod/components/public-api/go/stable"
)

var _ WorkspaceServiceHandler = (*ProxyWorkspaceServiceHandler)(nil)

type ProxyWorkspaceServiceHandler struct {
	Client stable.WorkspaceServiceClient
	UnimplementedWorkspaceServiceHandler
}

func (s *ProxyWorkspaceServiceHandler) CreateAndStartWorkspace(ctx context.Context, req *connect_go.Request[stable.CreateAndStartWorkspaceRequest]) (*connect_go.Response[stable.CreateAndStartWorkspaceResponse], error) {
	resp, err := s.Client.CreateAndStartWorkspace(ctx, req.Msg)
	if err != nil {
		// TODO(milan): Convert to correct status code
		return nil, err
	}

	return connect_go.NewResponse(resp), nil
}

func (s *ProxyWorkspaceServiceHandler) GetWorkspace(ctx context.Context, req *connect_go.Request[stable.GetWorkspaceRequest]) (*connect_go.Response[stable.GetWorkspaceResponse], error) {
	resp, err := s.Client.GetWorkspace(ctx, req.Msg)
	if err != nil {
		// TODO(milan): Convert to correct status code
		return nil, err
	}

	return connect_go.NewResponse(resp), nil
}

func (s *ProxyWorkspaceServiceHandler) ListWorkspaces(ctx context.Context, req *connect_go.Request[stable.ListWorkspacesRequest]) (*connect_go.Response[stable.ListWorkspacesResponse], error) {
	resp, err := s.Client.ListWorkspaces(ctx, req.Msg)
	if err != nil {
		// TODO(milan): Convert to correct status code
		return nil, err
	}

	return connect_go.NewResponse(resp), nil
}

func (s *ProxyWorkspaceServiceHandler) StartWorkspace(ctx context.Context, req *connect_go.Request[stable.StartWorkspaceRequest]) (*connect_go.Response[stable.StartWorkspaceResponse], error) {
	resp, err := s.Client.StartWorkspace(ctx, req.Msg)
	if err != nil {
		// TODO(milan): Convert to correct status code
		return nil, err
	}

	return connect_go.NewResponse(resp), nil
}

func (s *ProxyWorkspaceServiceHandler) StopWorkspace(ctx context.Context, req *connect_go.Request[stable.StopWorkspaceRequest]) (*connect_go.Response[stable.StopWorkspaceResponse], error) {
	resp, err := s.Client.StopWorkspace(ctx, req.Msg)
	if err != nil {
		// TODO(milan): Convert to correct status code
		return nil, err
	}

	return connect_go.NewResponse(resp), nil
}

func (s *ProxyWorkspaceServiceHandler) UpdateWorkspacePort(ctx context.Context, req *connect_go.Request[stable.UpdateWorkspacePortRequest]) (*connect_go.Response[stable.UpdateWorkspacePortResponse], error) {
	resp, err := s.Client.UpdateWorkspacePort(ctx, req.Msg)
	if err != nil {
		// TODO(milan): Convert to correct status code
		return nil, err
	}

	return connect_go.NewResponse(resp), nil
}
