// Copyright (c) 2023 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/stable/workspace.proto

package stableconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	stable "github.com/gitpod-io/gitpod/components/public-api/go/stable"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// WorkspaceServiceName is the fully-qualified name of the WorkspaceService service.
	WorkspaceServiceName = "gitpod.stable.WorkspaceService"
)

// WorkspaceServiceClient is a client for the gitpod.stable.WorkspaceService service.
type WorkspaceServiceClient interface {
	// CreateAndStartWorkspace creates a new workspace and starts it
	//
	// +return NOT_FOUND User cannot access the Git repository itself
	// +return NOT_FOUND The referenced gitpod.yml file doesn’t exist
	// +return PERMISSION_DENIED User is not allowed to create a workspace on the repo/project
	// +return INVALID_ARGUMENT Any of the parameters/values is passed is invalid. The message details which one.
	// +return FAILED_PRECONDITION The .gitpod.yml is invalid
	// +return FAILED_PRECONDITION Configuration cannot be assembled or is invalid
	CreateAndStartWorkspace(context.Context, *connect_go.Request[stable.CreateAndStartWorkspaceRequest]) (*connect_go.Response[stable.CreateAndStartWorkspaceResponse], error)
	// GetWorkspace returns a single workspace.
	//
	// +return NOT_FOUND User does not have access to a workspace with the given ID
	// +return NOT_FOUND Workspace does not exist
	GetWorkspace(context.Context, *connect_go.Request[stable.GetWorkspaceRequest]) (*connect_go.Response[stable.GetWorkspaceResponse], error)
	// ListWorkspaces returns all workspaces matching the provided filters.
	// The individual filters are "AND'ed", i.e. specifying an additional filter reduces the result set.
	//
	// +return OK
	ListWorkspaces(context.Context, *connect_go.Request[stable.ListWorkspacesRequest]) (*connect_go.Response[stable.ListWorkspacesResponse], error)
	// StartWorkspace starts an existing workspace.
	//
	// +return NOT_FOUND User does not have access to a workspace with the given ID
	// +return NOT_FOUND Workspace does not exist
	// +return FAILED_PRECONDITION Workspace is not in a phase where it can be started.
	StartWorkspace(context.Context, *connect_go.Request[stable.StartWorkspaceRequest]) (*connect_go.Response[stable.StartWorkspaceResponse], error)
	// StopWorkspace stops a running workspace (instance).
	//
	// +return NOT_FOUND  User does not have access to a workspace with the given ID
	// +return NOT_FOUND Workspace does not exist
	// +return FAILED_PRECONDITION Workspace is not in a phase where it can be started.
	StopWorkspace(context.Context, *connect_go.Request[stable.StopWorkspaceRequest]) (*connect_go.Response[stable.StopWorkspaceResponse], error)
	// UpdateWorkspacePort changes the behaviour of a workspace port.
	//
	// +return NOT_FOUND  User does not have access to a workspace with the given ID
	// +return NOT_FOUND Workspace does not exist
	// +return PERMISSION_DENIED User is not allowed to update a port on this workspace
	// +return INVALID_ARGUMENT Any of the parameters/values is passed is invalid. The message details which one.
	UpdateWorkspacePort(context.Context, *connect_go.Request[stable.UpdateWorkspacePortRequest]) (*connect_go.Response[stable.UpdateWorkspacePortResponse], error)
}

// NewWorkspaceServiceClient constructs a client for the gitpod.stable.WorkspaceService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkspaceServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) WorkspaceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &workspaceServiceClient{
		createAndStartWorkspace: connect_go.NewClient[stable.CreateAndStartWorkspaceRequest, stable.CreateAndStartWorkspaceResponse](
			httpClient,
			baseURL+"/gitpod.stable.WorkspaceService/CreateAndStartWorkspace",
			opts...,
		),
		getWorkspace: connect_go.NewClient[stable.GetWorkspaceRequest, stable.GetWorkspaceResponse](
			httpClient,
			baseURL+"/gitpod.stable.WorkspaceService/GetWorkspace",
			opts...,
		),
		listWorkspaces: connect_go.NewClient[stable.ListWorkspacesRequest, stable.ListWorkspacesResponse](
			httpClient,
			baseURL+"/gitpod.stable.WorkspaceService/ListWorkspaces",
			opts...,
		),
		startWorkspace: connect_go.NewClient[stable.StartWorkspaceRequest, stable.StartWorkspaceResponse](
			httpClient,
			baseURL+"/gitpod.stable.WorkspaceService/StartWorkspace",
			opts...,
		),
		stopWorkspace: connect_go.NewClient[stable.StopWorkspaceRequest, stable.StopWorkspaceResponse](
			httpClient,
			baseURL+"/gitpod.stable.WorkspaceService/StopWorkspace",
			opts...,
		),
		updateWorkspacePort: connect_go.NewClient[stable.UpdateWorkspacePortRequest, stable.UpdateWorkspacePortResponse](
			httpClient,
			baseURL+"/gitpod.stable.WorkspaceService/UpdateWorkspacePort",
			opts...,
		),
	}
}

// workspaceServiceClient implements WorkspaceServiceClient.
type workspaceServiceClient struct {
	createAndStartWorkspace *connect_go.Client[stable.CreateAndStartWorkspaceRequest, stable.CreateAndStartWorkspaceResponse]
	getWorkspace            *connect_go.Client[stable.GetWorkspaceRequest, stable.GetWorkspaceResponse]
	listWorkspaces          *connect_go.Client[stable.ListWorkspacesRequest, stable.ListWorkspacesResponse]
	startWorkspace          *connect_go.Client[stable.StartWorkspaceRequest, stable.StartWorkspaceResponse]
	stopWorkspace           *connect_go.Client[stable.StopWorkspaceRequest, stable.StopWorkspaceResponse]
	updateWorkspacePort     *connect_go.Client[stable.UpdateWorkspacePortRequest, stable.UpdateWorkspacePortResponse]
}

// CreateAndStartWorkspace calls gitpod.stable.WorkspaceService.CreateAndStartWorkspace.
func (c *workspaceServiceClient) CreateAndStartWorkspace(ctx context.Context, req *connect_go.Request[stable.CreateAndStartWorkspaceRequest]) (*connect_go.Response[stable.CreateAndStartWorkspaceResponse], error) {
	return c.createAndStartWorkspace.CallUnary(ctx, req)
}

// GetWorkspace calls gitpod.stable.WorkspaceService.GetWorkspace.
func (c *workspaceServiceClient) GetWorkspace(ctx context.Context, req *connect_go.Request[stable.GetWorkspaceRequest]) (*connect_go.Response[stable.GetWorkspaceResponse], error) {
	return c.getWorkspace.CallUnary(ctx, req)
}

// ListWorkspaces calls gitpod.stable.WorkspaceService.ListWorkspaces.
func (c *workspaceServiceClient) ListWorkspaces(ctx context.Context, req *connect_go.Request[stable.ListWorkspacesRequest]) (*connect_go.Response[stable.ListWorkspacesResponse], error) {
	return c.listWorkspaces.CallUnary(ctx, req)
}

// StartWorkspace calls gitpod.stable.WorkspaceService.StartWorkspace.
func (c *workspaceServiceClient) StartWorkspace(ctx context.Context, req *connect_go.Request[stable.StartWorkspaceRequest]) (*connect_go.Response[stable.StartWorkspaceResponse], error) {
	return c.startWorkspace.CallUnary(ctx, req)
}

// StopWorkspace calls gitpod.stable.WorkspaceService.StopWorkspace.
func (c *workspaceServiceClient) StopWorkspace(ctx context.Context, req *connect_go.Request[stable.StopWorkspaceRequest]) (*connect_go.Response[stable.StopWorkspaceResponse], error) {
	return c.stopWorkspace.CallUnary(ctx, req)
}

// UpdateWorkspacePort calls gitpod.stable.WorkspaceService.UpdateWorkspacePort.
func (c *workspaceServiceClient) UpdateWorkspacePort(ctx context.Context, req *connect_go.Request[stable.UpdateWorkspacePortRequest]) (*connect_go.Response[stable.UpdateWorkspacePortResponse], error) {
	return c.updateWorkspacePort.CallUnary(ctx, req)
}

// WorkspaceServiceHandler is an implementation of the gitpod.stable.WorkspaceService service.
type WorkspaceServiceHandler interface {
	// CreateAndStartWorkspace creates a new workspace and starts it
	//
	// +return NOT_FOUND User cannot access the Git repository itself
	// +return NOT_FOUND The referenced gitpod.yml file doesn’t exist
	// +return PERMISSION_DENIED User is not allowed to create a workspace on the repo/project
	// +return INVALID_ARGUMENT Any of the parameters/values is passed is invalid. The message details which one.
	// +return FAILED_PRECONDITION The .gitpod.yml is invalid
	// +return FAILED_PRECONDITION Configuration cannot be assembled or is invalid
	CreateAndStartWorkspace(context.Context, *connect_go.Request[stable.CreateAndStartWorkspaceRequest]) (*connect_go.Response[stable.CreateAndStartWorkspaceResponse], error)
	// GetWorkspace returns a single workspace.
	//
	// +return NOT_FOUND User does not have access to a workspace with the given ID
	// +return NOT_FOUND Workspace does not exist
	GetWorkspace(context.Context, *connect_go.Request[stable.GetWorkspaceRequest]) (*connect_go.Response[stable.GetWorkspaceResponse], error)
	// ListWorkspaces returns all workspaces matching the provided filters.
	// The individual filters are "AND'ed", i.e. specifying an additional filter reduces the result set.
	//
	// +return OK
	ListWorkspaces(context.Context, *connect_go.Request[stable.ListWorkspacesRequest]) (*connect_go.Response[stable.ListWorkspacesResponse], error)
	// StartWorkspace starts an existing workspace.
	//
	// +return NOT_FOUND User does not have access to a workspace with the given ID
	// +return NOT_FOUND Workspace does not exist
	// +return FAILED_PRECONDITION Workspace is not in a phase where it can be started.
	StartWorkspace(context.Context, *connect_go.Request[stable.StartWorkspaceRequest]) (*connect_go.Response[stable.StartWorkspaceResponse], error)
	// StopWorkspace stops a running workspace (instance).
	//
	// +return NOT_FOUND  User does not have access to a workspace with the given ID
	// +return NOT_FOUND Workspace does not exist
	// +return FAILED_PRECONDITION Workspace is not in a phase where it can be started.
	StopWorkspace(context.Context, *connect_go.Request[stable.StopWorkspaceRequest]) (*connect_go.Response[stable.StopWorkspaceResponse], error)
	// UpdateWorkspacePort changes the behaviour of a workspace port.
	//
	// +return NOT_FOUND  User does not have access to a workspace with the given ID
	// +return NOT_FOUND Workspace does not exist
	// +return PERMISSION_DENIED User is not allowed to update a port on this workspace
	// +return INVALID_ARGUMENT Any of the parameters/values is passed is invalid. The message details which one.
	UpdateWorkspacePort(context.Context, *connect_go.Request[stable.UpdateWorkspacePortRequest]) (*connect_go.Response[stable.UpdateWorkspacePortResponse], error)
}

// NewWorkspaceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkspaceServiceHandler(svc WorkspaceServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/gitpod.stable.WorkspaceService/CreateAndStartWorkspace", connect_go.NewUnaryHandler(
		"/gitpod.stable.WorkspaceService/CreateAndStartWorkspace",
		svc.CreateAndStartWorkspace,
		opts...,
	))
	mux.Handle("/gitpod.stable.WorkspaceService/GetWorkspace", connect_go.NewUnaryHandler(
		"/gitpod.stable.WorkspaceService/GetWorkspace",
		svc.GetWorkspace,
		opts...,
	))
	mux.Handle("/gitpod.stable.WorkspaceService/ListWorkspaces", connect_go.NewUnaryHandler(
		"/gitpod.stable.WorkspaceService/ListWorkspaces",
		svc.ListWorkspaces,
		opts...,
	))
	mux.Handle("/gitpod.stable.WorkspaceService/StartWorkspace", connect_go.NewUnaryHandler(
		"/gitpod.stable.WorkspaceService/StartWorkspace",
		svc.StartWorkspace,
		opts...,
	))
	mux.Handle("/gitpod.stable.WorkspaceService/StopWorkspace", connect_go.NewUnaryHandler(
		"/gitpod.stable.WorkspaceService/StopWorkspace",
		svc.StopWorkspace,
		opts...,
	))
	mux.Handle("/gitpod.stable.WorkspaceService/UpdateWorkspacePort", connect_go.NewUnaryHandler(
		"/gitpod.stable.WorkspaceService/UpdateWorkspacePort",
		svc.UpdateWorkspacePort,
		opts...,
	))
	return "/gitpod.stable.WorkspaceService/", mux
}

// UnimplementedWorkspaceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkspaceServiceHandler struct{}

func (UnimplementedWorkspaceServiceHandler) CreateAndStartWorkspace(context.Context, *connect_go.Request[stable.CreateAndStartWorkspaceRequest]) (*connect_go.Response[stable.CreateAndStartWorkspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.stable.WorkspaceService.CreateAndStartWorkspace is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) GetWorkspace(context.Context, *connect_go.Request[stable.GetWorkspaceRequest]) (*connect_go.Response[stable.GetWorkspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.stable.WorkspaceService.GetWorkspace is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) ListWorkspaces(context.Context, *connect_go.Request[stable.ListWorkspacesRequest]) (*connect_go.Response[stable.ListWorkspacesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.stable.WorkspaceService.ListWorkspaces is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) StartWorkspace(context.Context, *connect_go.Request[stable.StartWorkspaceRequest]) (*connect_go.Response[stable.StartWorkspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.stable.WorkspaceService.StartWorkspace is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) StopWorkspace(context.Context, *connect_go.Request[stable.StopWorkspaceRequest]) (*connect_go.Response[stable.StopWorkspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.stable.WorkspaceService.StopWorkspace is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) UpdateWorkspacePort(context.Context, *connect_go.Request[stable.UpdateWorkspacePortRequest]) (*connect_go.Response[stable.UpdateWorkspacePortResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.stable.WorkspaceService.UpdateWorkspacePort is not implemented"))
}
