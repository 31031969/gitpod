// Copyright (c) 2023 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/experimental/v2/configuration.proto

package v2connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v2 "github.com/gitpod-io/gitpod/components/public-api/go/experimental/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ConfigurationServiceName is the fully-qualified name of the ConfigurationService service.
	ConfigurationServiceName = "gitpod.experimental.v2.ConfigurationService"
)

// ConfigurationServiceClient is a client for the gitpod.experimental.v2.ConfigurationService
// service.
type ConfigurationServiceClient interface {
	// Creates a new configuration.
	CreateConfiguration(context.Context, *connect_go.Request[v2.CreateConfigurationRequest]) (*connect_go.Response[v2.CreateConfigurationResponse], error)
	// Retrieves a configuration.
	GetConfiguration(context.Context, *connect_go.Request[v2.GetConfigurationRequest]) (*connect_go.Response[v2.GetConfigurationResponse], error)
	// Lists configurations.
	ListConfigurations(context.Context, *connect_go.Request[v2.ListConfigurationsRequest]) (*connect_go.Response[v2.ListConfigurationsResponse], error)
	// Deletes a configuration.
	DeleteConfiguration(context.Context, *connect_go.Request[v2.DeleteConfigurationRequest]) (*connect_go.Response[v2.DeleteConfigurationResponse], error)
}

// NewConfigurationServiceClient constructs a client for the
// gitpod.experimental.v2.ConfigurationService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConfigurationServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ConfigurationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &configurationServiceClient{
		createConfiguration: connect_go.NewClient[v2.CreateConfigurationRequest, v2.CreateConfigurationResponse](
			httpClient,
			baseURL+"/gitpod.experimental.v2.ConfigurationService/CreateConfiguration",
			opts...,
		),
		getConfiguration: connect_go.NewClient[v2.GetConfigurationRequest, v2.GetConfigurationResponse](
			httpClient,
			baseURL+"/gitpod.experimental.v2.ConfigurationService/GetConfiguration",
			opts...,
		),
		listConfigurations: connect_go.NewClient[v2.ListConfigurationsRequest, v2.ListConfigurationsResponse](
			httpClient,
			baseURL+"/gitpod.experimental.v2.ConfigurationService/ListConfigurations",
			opts...,
		),
		deleteConfiguration: connect_go.NewClient[v2.DeleteConfigurationRequest, v2.DeleteConfigurationResponse](
			httpClient,
			baseURL+"/gitpod.experimental.v2.ConfigurationService/DeleteConfiguration",
			opts...,
		),
	}
}

// configurationServiceClient implements ConfigurationServiceClient.
type configurationServiceClient struct {
	createConfiguration *connect_go.Client[v2.CreateConfigurationRequest, v2.CreateConfigurationResponse]
	getConfiguration    *connect_go.Client[v2.GetConfigurationRequest, v2.GetConfigurationResponse]
	listConfigurations  *connect_go.Client[v2.ListConfigurationsRequest, v2.ListConfigurationsResponse]
	deleteConfiguration *connect_go.Client[v2.DeleteConfigurationRequest, v2.DeleteConfigurationResponse]
}

// CreateConfiguration calls gitpod.experimental.v2.ConfigurationService.CreateConfiguration.
func (c *configurationServiceClient) CreateConfiguration(ctx context.Context, req *connect_go.Request[v2.CreateConfigurationRequest]) (*connect_go.Response[v2.CreateConfigurationResponse], error) {
	return c.createConfiguration.CallUnary(ctx, req)
}

// GetConfiguration calls gitpod.experimental.v2.ConfigurationService.GetConfiguration.
func (c *configurationServiceClient) GetConfiguration(ctx context.Context, req *connect_go.Request[v2.GetConfigurationRequest]) (*connect_go.Response[v2.GetConfigurationResponse], error) {
	return c.getConfiguration.CallUnary(ctx, req)
}

// ListConfigurations calls gitpod.experimental.v2.ConfigurationService.ListConfigurations.
func (c *configurationServiceClient) ListConfigurations(ctx context.Context, req *connect_go.Request[v2.ListConfigurationsRequest]) (*connect_go.Response[v2.ListConfigurationsResponse], error) {
	return c.listConfigurations.CallUnary(ctx, req)
}

// DeleteConfiguration calls gitpod.experimental.v2.ConfigurationService.DeleteConfiguration.
func (c *configurationServiceClient) DeleteConfiguration(ctx context.Context, req *connect_go.Request[v2.DeleteConfigurationRequest]) (*connect_go.Response[v2.DeleteConfigurationResponse], error) {
	return c.deleteConfiguration.CallUnary(ctx, req)
}

// ConfigurationServiceHandler is an implementation of the
// gitpod.experimental.v2.ConfigurationService service.
type ConfigurationServiceHandler interface {
	// Creates a new configuration.
	CreateConfiguration(context.Context, *connect_go.Request[v2.CreateConfigurationRequest]) (*connect_go.Response[v2.CreateConfigurationResponse], error)
	// Retrieves a configuration.
	GetConfiguration(context.Context, *connect_go.Request[v2.GetConfigurationRequest]) (*connect_go.Response[v2.GetConfigurationResponse], error)
	// Lists configurations.
	ListConfigurations(context.Context, *connect_go.Request[v2.ListConfigurationsRequest]) (*connect_go.Response[v2.ListConfigurationsResponse], error)
	// Deletes a configuration.
	DeleteConfiguration(context.Context, *connect_go.Request[v2.DeleteConfigurationRequest]) (*connect_go.Response[v2.DeleteConfigurationResponse], error)
}

// NewConfigurationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConfigurationServiceHandler(svc ConfigurationServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/gitpod.experimental.v2.ConfigurationService/CreateConfiguration", connect_go.NewUnaryHandler(
		"/gitpod.experimental.v2.ConfigurationService/CreateConfiguration",
		svc.CreateConfiguration,
		opts...,
	))
	mux.Handle("/gitpod.experimental.v2.ConfigurationService/GetConfiguration", connect_go.NewUnaryHandler(
		"/gitpod.experimental.v2.ConfigurationService/GetConfiguration",
		svc.GetConfiguration,
		opts...,
	))
	mux.Handle("/gitpod.experimental.v2.ConfigurationService/ListConfigurations", connect_go.NewUnaryHandler(
		"/gitpod.experimental.v2.ConfigurationService/ListConfigurations",
		svc.ListConfigurations,
		opts...,
	))
	mux.Handle("/gitpod.experimental.v2.ConfigurationService/DeleteConfiguration", connect_go.NewUnaryHandler(
		"/gitpod.experimental.v2.ConfigurationService/DeleteConfiguration",
		svc.DeleteConfiguration,
		opts...,
	))
	return "/gitpod.experimental.v2.ConfigurationService/", mux
}

// UnimplementedConfigurationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConfigurationServiceHandler struct{}

func (UnimplementedConfigurationServiceHandler) CreateConfiguration(context.Context, *connect_go.Request[v2.CreateConfigurationRequest]) (*connect_go.Response[v2.CreateConfigurationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.experimental.v2.ConfigurationService.CreateConfiguration is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) GetConfiguration(context.Context, *connect_go.Request[v2.GetConfigurationRequest]) (*connect_go.Response[v2.GetConfigurationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.experimental.v2.ConfigurationService.GetConfiguration is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) ListConfigurations(context.Context, *connect_go.Request[v2.ListConfigurationsRequest]) (*connect_go.Response[v2.ListConfigurationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.experimental.v2.ConfigurationService.ListConfigurations is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) DeleteConfiguration(context.Context, *connect_go.Request[v2.DeleteConfigurationRequest]) (*connect_go.Response[v2.DeleteConfigurationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.experimental.v2.ConfigurationService.DeleteConfiguration is not implemented"))
}
